

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Oct 08 11:06:58 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.41
    23                           ; Generated 25/01/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	smallconst
    58  000800                     __psmallconst:
    59                           	opt stack 0
    60  000800  00                 	db	0
    61  000801                     _dpowers:
    62                           	opt stack 0
    63  000801  0001               	dw	1
    64  000803  000A               	dw	10
    65  000805  0064               	dw	100
    66  000807  03E8               	dw	1000
    67  000809  2710               	dw	10000
    68  00080B                     __end_of_dpowers:
    69                           	opt stack 0
    70  0000                     _ADCON1	set	4033
    71  0000                     _OSCCON	set	4051
    72  0000                     _RD2	set	31770
    73  0000                     _RD3	set	31771
    74  0000                     _RD4	set	31772
    75  0000                     _RD5	set	31773
    76  0000                     _RD6	set	31774
    77  0000                     _RD7	set	31775
    78  0000                     _TRISD2	set	31914
    79  0000                     _TRISD3	set	31915
    80  0000                     _TRISD4	set	31916
    81  0000                     _TRISD5	set	31917
    82  0000                     _TRISD6	set	31918
    83  0000                     _TRISD7	set	31919
    84  00080B                     STR_2:
    85  00080B  42                 	db	66	;'B'
    86  00080C  79                 	db	121	;'y'
    87  00080D  20                 	db	32
    88  00080E  6C                 	db	108	;'l'
    89  00080F  75                 	db	117	;'u'
    90  000810  69                 	db	105	;'i'
    91  000811  73                 	db	115	;'s'
    92  000812  20                 	db	32
    93  000813  52                 	db	82	;'R'
    94  000814  69                 	db	105	;'i'
    95  000815  76                 	db	118	;'v'
    96  000816  65                 	db	101	;'e'
    97  000817  72                 	db	114	;'r'
    98  000818  61                 	db	97	;'a'
    99  000819  00                 	db	0
   100  00081A                     STR_1:
   101  00081A  43                 	db	67	;'C'
   102  00081B  75                 	db	117	;'u'
   103  00081C  65                 	db	101	;'e'
   104  00081D  6E                 	db	110	;'n'
   105  00081E  74                 	db	116	;'t'
   106  00081F  61                 	db	97	;'a'
   107  000820  20                 	db	32
   108  000821  25                 	db	37
   109  000822  30                 	db	48	;'0'
   110  000823  33                 	db	51	;'3'
   111  000824  64                 	db	100	;'d'
   112  000825  00                 	db	0
   113  000826                     STR_3:
   114  000826  46                 	db	70	;'F'
   115  000827  55                 	db	85	;'U'
   116  000828  4E                 	db	78	;'N'
   117  000829  43                 	db	67	;'C'
   118  00082A  49                 	db	73	;'I'
   119  00082B  4F                 	db	79	;'O'
   120  00082C  4E                 	db	78	;'N'
   121  00082D  41                 	db	65	;'A'
   122  00082E  00                 	db	0
   123  00082F                     STR_4:
   124  00082F  79                 	db	121	;'y'
   125  000830  65                 	db	101	;'e'
   126  000831  73                 	db	115	;'s'
   127  000832  00                 	db	0
   128                           
   129                           ; #config settings
   130  000833  00                 	db	0	; dummy byte at the end
   131  0000                     
   132                           	psect	cinit
   133  0010AA                     __pcinit:
   134                           	opt stack 0
   135  0010AA                     start_initialization:
   136                           	opt stack 0
   137  0010AA                     __initialization:
   138                           	opt stack 0
   139  0010AA                     end_of_initialization:
   140                           	opt stack 0
   141  0010AA                     __end_of__initialization:
   142                           	opt stack 0
   143  0010AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   144  0010AC  6EF8               	movwf	tblptru,c
   145  0010AE  0100               	movlb	0
   146  0010B0  EF61  F005         	goto	_main	;jump to C main() function
   147                           tblptru	equ	0xFF8
   148                           
   149                           	psect	cstackCOMRAM
   150  000001                     __pcstackCOMRAM:
   151                           	opt stack 0
   152  000001                     ??_Lcd_Cmd:
   153  000001                     ??_Lcd_Chr_CP:
   154  000001                     ??_isdigit:
   155  000001                     ?___wmul:
   156                           	opt stack 0
   157  000001                     ?___lwdiv:
   158                           	opt stack 0
   159  000001                     ___wmul@multiplier:
   160                           	opt stack 0
   161  000001                     ___lwdiv@dividend:
   162                           	opt stack 0
   163                           
   164                           ; 2 bytes @ 0x0
   165  000001                     	ds	1
   166  000002                     _isdigit$329:
   167                           	opt stack 0
   168                           
   169                           ; 1 bytes @ 0x1
   170  000002                     	ds	1
   171  000003                     Lcd_Chr_CP@data:
   172                           	opt stack 0
   173  000003                     Lcd_Cmd@data:
   174                           	opt stack 0
   175  000003                     isdigit@c:
   176                           	opt stack 0
   177  000003                     ___wmul@multiplicand:
   178                           	opt stack 0
   179  000003                     ___lwdiv@divisor:
   180                           	opt stack 0
   181                           
   182                           ; 2 bytes @ 0x2
   183  000003                     	ds	1
   184  000004                     ??_Lcd_Init:
   185  000004                     Lcd_Out@x:
   186                           	opt stack 0
   187  000004                     Lcd_Out2@x:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x3
   191  000004                     	ds	1
   192  000005                     Lcd_Init@data:
   193                           	opt stack 0
   194  000005                     Lcd_Out@buffer:
   195                           	opt stack 0
   196  000005                     Lcd_Out2@buffer:
   197                           	opt stack 0
   198  000005                     ___wmul@product:
   199                           	opt stack 0
   200  000005                     ___lwdiv@quotient:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x4
   204  000005                     	ds	2
   205  000007                     Lcd_Out@y:
   206                           	opt stack 0
   207  000007                     Lcd_Out2@y:
   208                           	opt stack 0
   209  000007                     ___lwdiv@counter:
   210                           	opt stack 0
   211                           
   212                           ; 1 bytes @ 0x6
   213  000007                     	ds	1
   214  000008                     ?___lwmod:
   215                           	opt stack 0
   216  000008                     Lcd_Out@data:
   217                           	opt stack 0
   218  000008                     Lcd_Out2@data:
   219                           	opt stack 0
   220  000008                     ___lwmod@dividend:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x7
   224  000008                     	ds	2
   225  00000A                     ___lwmod@divisor:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x9
   229  00000A                     	ds	2
   230  00000C                     ___lwmod@counter:
   231                           	opt stack 0
   232                           
   233                           ; 1 bytes @ 0xB
   234  00000C                     	ds	1
   235  00000D                     ?_sprintf:
   236                           	opt stack 0
   237  00000D                     sprintf@sp:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0xC
   241  00000D                     	ds	2
   242  00000F                     sprintf@f:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0xE
   246  00000F                     	ds	4
   247  000013                     ??_sprintf:
   248                           
   249                           ; 1 bytes @ 0x12
   250  000013                     	ds	4
   251  000017                     sprintf@ap:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x16
   255  000017                     	ds	2
   256  000019                     sprintf@prec:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x18
   260  000019                     	ds	1
   261  00001A                     sprintf@val:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x19
   265  00001A                     	ds	2
   266  00001C                     sprintf@flag:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x1B
   270  00001C                     	ds	1
   271  00001D                     sprintf@width:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x1C
   275  00001D                     	ds	2
   276  00001F                     sprintf@c:
   277                           	opt stack 0
   278                           
   279                           ; 1 bytes @ 0x1E
   280  00001F                     	ds	1
   281  000020                     ??_main:
   282                           
   283                           ; 1 bytes @ 0x1F
   284  000020                     	ds	2
   285  000022                     main@buffer1:
   286                           	opt stack 0
   287                           
   288                           ; 20 bytes @ 0x21
   289  000022                     	ds	20
   290  000036                     main@i:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0x35
   294  000036                     	ds	1
   295                           tblptru	equ	0xFF8
   296                           
   297 ;;
   298 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   299 ;;
   300 ;; *************** function _main *****************
   301 ;; Defined at:
   302 ;;		line 7 in file "LCD_C.c"
   303 ;; Parameters:    Size  Location     Type
   304 ;;		None
   305 ;; Auto vars:     Size  Location     Type
   306 ;;  buffer1        20   33[COMRAM] unsigned char [20]
   307 ;;  i               1   53[COMRAM] unsigned char 
   308 ;;  j               1    0        unsigned char 
   309 ;; Return value:  Size  Location     Type
   310 ;;                  1    wreg      void 
   311 ;; Registers used:
   312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   313 ;; Tracked objects:
   314 ;;		On entry : 0/0
   315 ;;		On exit  : 0/0
   316 ;;		Unchanged: 0/0
   317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   318 ;;      Params:         0       0       0       0       0       0       0       0       0
   319 ;;      Locals:        21       0       0       0       0       0       0       0       0
   320 ;;      Temps:          2       0       0       0       0       0       0       0       0
   321 ;;      Totals:        23       0       0       0       0       0       0       0       0
   322 ;;Total ram usage:       23 bytes
   323 ;; Hardware stack levels required when called:    2
   324 ;; This function calls:
   325 ;;		_Lcd_Cmd
   326 ;;		_Lcd_Init
   327 ;;		_Lcd_Out
   328 ;;		_Lcd_Out2
   329 ;;		_sprintf
   330 ;; This function is called by:
   331 ;;		Startup code after reset
   332 ;; This function uses a non-reentrant model
   333 ;;
   334                           
   335                           	psect	text0
   336  000AC2                     __ptext0:
   337                           	opt stack 0
   338  000AC2                     _main:
   339                           	opt stack 29
   340                           
   341                           ;LCD_C.c: 8: unsigned char i, j;
   342                           ;LCD_C.c: 9: unsigned char buffer1[20];
   343                           ;LCD_C.c: 11: OSCCON= 0b01110010;
   344                           
   345                           ;incstack = 0
   346  000AC2  0E72               	movlw	114
   347  000AC4  6ED3               	movwf	4051,c	;volatile
   348                           
   349                           ;LCD_C.c: 14: ADCON1=0xff;
   350  000AC6  68C1               	setf	4033,c	;volatile
   351                           
   352                           ;LCD_C.c: 16: Lcd_Init();
   353  000AC8  EC01  F006         	call	_Lcd_Init	;wreg free
   354                           
   355                           ;LCD_C.c: 17: Lcd_Cmd(1);
   356  000ACC  0E01               	movlw	1
   357  000ACE  EC0B  F007         	call	_Lcd_Cmd
   358                           
   359                           ;LCD_C.c: 18: Lcd_Cmd(12);
   360  000AD2  0E0C               	movlw	12
   361  000AD4  EC0B  F007         	call	_Lcd_Cmd
   362                           
   363                           ;LCD_C.c: 19: _delay((unsigned long)((100)*(8000000/4000.0)));
   364  000AD8  0E02               	movlw	2
   365  000ADA  6E21               	movwf	(??_main+1)& (0+255),c
   366  000ADC  0E04               	movlw	4
   367  000ADE  6E20               	movwf	??_main& (0+255),c
   368  000AE0  0EBA               	movlw	186
   369  000AE2                     u1037:
   370  000AE2  2EE8               	decfsz	wreg,f,c
   371  000AE4  D7FE               	bra	u1037
   372  000AE6  2E20               	decfsz	??_main& (0+255),f,c
   373  000AE8  D7FC               	bra	u1037
   374  000AEA  2E21               	decfsz	(??_main+1)& (0+255),f,c
   375  000AEC  D7FA               	bra	u1037
   376  000AEE  D087               	goto	L1
   377  000AF0                     l1345:
   378                           
   379                           ;LCD_C.c: 22: for(i=3; i>0; i--)
   380  000AF0  0E03               	movlw	3
   381  000AF2  6E36               	movwf	main@i,c
   382  000AF4                     l1347:
   383  000AF4  5036               	movf	main@i,w,c
   384  000AF6  B4D8               	btfsc	status,2,c
   385  000AF8  D023               	goto	l1361
   386                           
   387                           ;LCD_C.c: 23: {
   388                           ;LCD_C.c: 24: sprintf(buffer1,"Cuenta %03d",i);
   389  000AFA  0E22               	movlw	low main@buffer1
   390  000AFC  6E0D               	movwf	sprintf@sp,c
   391  000AFE  0E00               	movlw	high main@buffer1
   392  000B00  6E0E               	movwf	sprintf@sp+1,c
   393  000B02  0E1A               	movlw	low STR_1
   394  000B04  6E0F               	movwf	sprintf@f,c
   395  000B06  0E08               	movlw	high STR_1
   396  000B08  6E10               	movwf	sprintf@f+1,c
   397  000B0A  C036  F011         	movff	main@i,?_sprintf+4
   398  000B0E  6A12               	clrf	?_sprintf+5,c
   399  000B10  EC1A  F004         	call	_sprintf	;wreg free
   400                           
   401                           ;LCD_C.c: 25: Lcd_Out2(1, 1, buffer1);
   402  000B14  0E01               	movlw	1
   403  000B16  6E04               	movwf	Lcd_Out2@x,c
   404  000B18  0E22               	movlw	low main@buffer1
   405  000B1A  6E05               	movwf	Lcd_Out2@buffer,c
   406  000B1C  0E00               	movlw	high main@buffer1
   407  000B1E  6E06               	movwf	Lcd_Out2@buffer+1,c
   408  000B20  0E01               	movlw	1
   409  000B22  ECB8  F007         	call	_Lcd_Out2
   410                           
   411                           ;LCD_C.c: 26: _delay((unsigned long)((1000)*(8000000/4000.0)));
   412  000B26  0E0B               	movlw	11
   413  000B28  6E21               	movwf	(??_main+1)& (0+255),c
   414  000B2A  0E26               	movlw	38
   415  000B2C  6E20               	movwf	??_main& (0+255),c
   416  000B2E  0E5E               	movlw	94
   417  000B30                     u1047:
   418  000B30  2EE8               	decfsz	wreg,f,c
   419  000B32  D7FE               	bra	u1047
   420  000B34  2E20               	decfsz	??_main& (0+255),f,c
   421  000B36  D7FC               	bra	u1047
   422  000B38  2E21               	decfsz	(??_main+1)& (0+255),f,c
   423  000B3A  D7FA               	bra	u1047
   424  000B3C  0636               	decf	main@i,f,c
   425  000B3E  D7DA               	goto	l1347
   426  000B40                     l1361:
   427                           
   428                           ;LCD_C.c: 27: }
   429                           ;LCD_C.c: 29: Lcd_Out(2, 1, "By luis Rivera");
   430  000B40  0E01               	movlw	1
   431  000B42  6E04               	movwf	Lcd_Out@x,c
   432  000B44  0E0B               	movlw	low STR_2
   433  000B46  6E05               	movwf	Lcd_Out@buffer,c
   434  000B48  0E08               	movlw	high STR_2
   435  000B4A  6E06               	movwf	Lcd_Out@buffer+1,c
   436  000B4C  0E02               	movlw	2
   437  000B4E  EC84  F007         	call	_Lcd_Out
   438                           
   439                           ;LCD_C.c: 30: _delay((unsigned long)((600)*(8000000/4000.0)));
   440  000B52  0E07               	movlw	7
   441  000B54  6E21               	movwf	(??_main+1)& (0+255),c
   442  000B56  0E17               	movlw	23
   443  000B58  6E20               	movwf	??_main& (0+255),c
   444  000B5A  0E6A               	movlw	106
   445  000B5C                     u1057:
   446  000B5C  2EE8               	decfsz	wreg,f,c
   447  000B5E  D7FE               	bra	u1057
   448  000B60  2E20               	decfsz	??_main& (0+255),f,c
   449  000B62  D7FC               	bra	u1057
   450  000B64  2E21               	decfsz	(??_main+1)& (0+255),f,c
   451  000B66  D7FA               	bra	u1057
   452  000B68  D000               	nop2	
   453                           
   454                           ;LCD_C.c: 31: Lcd_Cmd(15);
   455  000B6A  0E0F               	movlw	15
   456  000B6C  EC0B  F007         	call	_Lcd_Cmd
   457                           
   458                           ;LCD_C.c: 32: _delay((unsigned long)((1000)*(8000000/4000.0)));
   459  000B70  0E0B               	movlw	11
   460  000B72  6E21               	movwf	(??_main+1)& (0+255),c
   461  000B74  0E26               	movlw	38
   462  000B76  6E20               	movwf	??_main& (0+255),c
   463  000B78  0E5E               	movlw	94
   464  000B7A                     u1067:
   465  000B7A  2EE8               	decfsz	wreg,f,c
   466  000B7C  D7FE               	bra	u1067
   467  000B7E  2E20               	decfsz	??_main& (0+255),f,c
   468  000B80  D7FC               	bra	u1067
   469  000B82  2E21               	decfsz	(??_main+1)& (0+255),f,c
   470  000B84  D7FA               	bra	u1067
   471                           
   472                           ;LCD_C.c: 33: Lcd_Cmd(14);
   473  000B86  0E0E               	movlw	14
   474  000B88  EC0B  F007         	call	_Lcd_Cmd
   475                           
   476                           ;LCD_C.c: 34: _delay((unsigned long)((1000)*(8000000/4000.0)));
   477  000B8C  0E0B               	movlw	11
   478  000B8E  6E21               	movwf	(??_main+1)& (0+255),c
   479  000B90  0E26               	movlw	38
   480  000B92  6E20               	movwf	??_main& (0+255),c
   481  000B94  0E5E               	movlw	94
   482  000B96                     u1077:
   483  000B96  2EE8               	decfsz	wreg,f,c
   484  000B98  D7FE               	bra	u1077
   485  000B9A  2E20               	decfsz	??_main& (0+255),f,c
   486  000B9C  D7FC               	bra	u1077
   487  000B9E  2E21               	decfsz	(??_main+1)& (0+255),f,c
   488  000BA0  D7FA               	bra	u1077
   489                           
   490                           ;LCD_C.c: 35: Lcd_Cmd(12);
   491  000BA2  0E0C               	movlw	12
   492  000BA4  EC0B  F007         	call	_Lcd_Cmd
   493                           
   494                           ;LCD_C.c: 36: _delay((unsigned long)((1000)*(8000000/4000.0)));
   495  000BA8  0E0B               	movlw	11
   496  000BAA  6E21               	movwf	(??_main+1)& (0+255),c
   497  000BAC  0E26               	movlw	38
   498  000BAE  6E20               	movwf	??_main& (0+255),c
   499  000BB0  0E5E               	movlw	94
   500  000BB2                     u1087:
   501  000BB2  2EE8               	decfsz	wreg,f,c
   502  000BB4  D7FE               	bra	u1087
   503  000BB6  2E20               	decfsz	??_main& (0+255),f,c
   504  000BB8  D7FC               	bra	u1087
   505  000BBA  2E21               	decfsz	(??_main+1)& (0+255),f,c
   506  000BBC  D7FA               	bra	u1087
   507                           
   508                           ;LCD_C.c: 37: Lcd_Cmd(1);
   509  000BBE  0E01               	movlw	1
   510  000BC0  EC0B  F007         	call	_Lcd_Cmd
   511                           
   512                           ;LCD_C.c: 39: Lcd_Out(1, 4, "FUNCIONA");
   513  000BC4  0E04               	movlw	4
   514  000BC6  6E04               	movwf	Lcd_Out@x,c
   515  000BC8  0E26               	movlw	low STR_3
   516  000BCA  6E05               	movwf	Lcd_Out@buffer,c
   517  000BCC  0E08               	movlw	high STR_3
   518  000BCE  6E06               	movwf	Lcd_Out@buffer+1,c
   519  000BD0  0E01               	movlw	1
   520  000BD2  EC84  F007         	call	_Lcd_Out
   521                           
   522                           ;LCD_C.c: 40: Lcd_Out(2, 4, "yes");
   523  000BD6  0E04               	movlw	4
   524  000BD8  6E04               	movwf	Lcd_Out@x,c
   525  000BDA  0E2F               	movlw	low STR_4
   526  000BDC  6E05               	movwf	Lcd_Out@buffer,c
   527  000BDE  0E08               	movlw	high STR_4
   528  000BE0  6E06               	movwf	Lcd_Out@buffer+1,c
   529  000BE2  0E02               	movlw	2
   530  000BE4  EC84  F007         	call	_Lcd_Out
   531                           
   532                           ;LCD_C.c: 41: _delay((unsigned long)((2000)*(8000000/4000.0)));
   533  000BE8  0E15               	movlw	21
   534  000BEA  6E21               	movwf	(??_main+1)& (0+255),c
   535  000BEC  0E4B               	movlw	75
   536  000BEE  6E20               	movwf	??_main& (0+255),c
   537  000BF0  0EBE               	movlw	190
   538  000BF2                     u1097:
   539  000BF2  2EE8               	decfsz	wreg,f,c
   540  000BF4  D7FE               	bra	u1097
   541  000BF6  2E20               	decfsz	??_main& (0+255),f,c
   542  000BF8  D7FC               	bra	u1097
   543  000BFA  2E21               	decfsz	(??_main+1)& (0+255),f,c
   544  000BFC  D7FA               	bra	u1097
   545  000BFE                     L1:
   546  000BFE  D000               	nop2	
   547  000C00  D777               	goto	l1345
   548  000C02                     __end_of_main:
   549                           	opt stack 0
   550                           tblptru	equ	0xFF8
   551                           wreg	equ	0xFE8
   552                           status	equ	0xFD8
   553                           
   554 ;; *************** function _sprintf *****************
   555 ;; Defined at:
   556 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
   557 ;; Parameters:    Size  Location     Type
   558 ;;  sp              2   12[COMRAM] PTR unsigned char 
   559 ;;		 -> main@buffer1(20), 
   560 ;;  f               2   14[COMRAM] PTR const unsigned char 
   561 ;;		 -> STR_1(12), 
   562 ;; Auto vars:     Size  Location     Type
   563 ;;  tmpval          4    0        struct .
   564 ;;  cp              3    0        PTR const unsigned char 
   565 ;;  width           2   28[COMRAM] int 
   566 ;;  val             2   25[COMRAM] unsigned int 
   567 ;;  ap              2   22[COMRAM] PTR void [1]
   568 ;;		 -> ?_sprintf(2), 
   569 ;;  len             2    0        unsigned int 
   570 ;;  c               1   30[COMRAM] char 
   571 ;;  flag            1   27[COMRAM] unsigned char 
   572 ;;  prec            1   24[COMRAM] char 
   573 ;; Return value:  Size  Location     Type
   574 ;;                  2   12[COMRAM] int 
   575 ;; Registers used:
   576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   582 ;;      Params:         6       0       0       0       0       0       0       0       0
   583 ;;      Locals:         9       0       0       0       0       0       0       0       0
   584 ;;      Temps:          4       0       0       0       0       0       0       0       0
   585 ;;      Totals:        19       0       0       0       0       0       0       0       0
   586 ;;Total ram usage:       19 bytes
   587 ;; Hardware stack levels used:    1
   588 ;; Hardware stack levels required when called:    1
   589 ;; This function calls:
   590 ;;		___lwdiv
   591 ;;		___lwmod
   592 ;;		___wmul
   593 ;;		_isdigit
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           	psect	text1
   600  000834                     __ptext1:
   601                           	opt stack 0
   602  000834                     _sprintf:
   603                           	opt stack 29
   604                           
   605                           ;doprnt.c: 494: va_list ap;
   606                           ;doprnt.c: 499: signed char c;
   607                           ;doprnt.c: 501: int width;
   608                           ;doprnt.c: 506: signed char prec;
   609                           ;doprnt.c: 508: unsigned char flag;
   610                           ;doprnt.c: 523: union {
   611                           ;doprnt.c: 524: unsigned long vd;
   612                           ;doprnt.c: 525: double integ;
   613                           ;doprnt.c: 526: } tmpval;
   614                           ;doprnt.c: 528: unsigned int val;
   615                           ;doprnt.c: 529: unsigned len;
   616                           ;doprnt.c: 530: const char * cp;
   617                           ;doprnt.c: 533: *ap = __va_start();
   618                           
   619                           ;incstack = 0
   620  000834  0E11               	movlw	low (?_sprintf+4)
   621  000836  6E17               	movwf	sprintf@ap,c
   622  000838  0E00               	movlw	high (?_sprintf+4)
   623  00083A  6E18               	movwf	sprintf@ap+1,c
   624                           
   625                           ;doprnt.c: 536: while(c = *f++) {
   626  00083C  D12F               	goto	l1327
   627  00083E                     l1221:
   628                           
   629                           ;doprnt.c: 538: if(c != '%')
   630  00083E  0E25               	movlw	37
   631  000840  181F               	xorwf	sprintf@c,w,c
   632  000842  B4D8               	btfsc	status,2,c
   633  000844  D009               	goto	l1227
   634                           
   635                           ;doprnt.c: 540: {
   636                           ;doprnt.c: 541: ((*sp++ = (c)));
   637  000846  C00D  FFD9         	movff	sprintf@sp,fsr2l
   638  00084A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   639  00084E  C01F  FFDF         	movff	sprintf@c,indf2
   640  000852  4A0D               	infsnz	sprintf@sp,f,c
   641  000854  2A0E               	incf	sprintf@sp+1,f,c
   642                           
   643                           ;doprnt.c: 542: continue;
   644  000856  D122               	goto	l1327
   645  000858                     l1227:
   646                           
   647                           ;doprnt.c: 543: }
   648                           ;doprnt.c: 546: width = 0;
   649  000858  0E00               	movlw	0
   650  00085A  6E1E               	movwf	sprintf@width+1,c
   651  00085C  0E00               	movlw	0
   652  00085E  6E1D               	movwf	sprintf@width,c
   653                           
   654                           ;doprnt.c: 548: flag = 0;
   655  000860  0E00               	movlw	0
   656  000862  6E1C               	movwf	sprintf@flag,c
   657                           
   658                           ;doprnt.c: 551: switch(*f) {
   659                           
   660                           ;doprnt.c: 550: for(;;) {
   661  000864  D003               	goto	l1233
   662  000866                     l1229:
   663                           
   664                           ;doprnt.c: 580: flag |= 0x04;
   665  000866  841C               	bsf	sprintf@flag,2,c
   666                           
   667                           ;doprnt.c: 581: f++;
   668  000868  4A0F               	infsnz	sprintf@f,f,c
   669  00086A  2A10               	incf	sprintf@f+1,f,c
   670  00086C                     l1233:
   671  00086C  C00F  FFF6         	movff	sprintf@f,tblptrl
   672  000870  C010  FFF7         	movff	sprintf@f+1,tblptrh
   673  000874                     	if	0	;tblptru may be non-zero
   674  000874                     	endif
   675  000874                     	if	0	;tblptru may be non-zero
   676  000874                     	endif
   677  000874  0008               	tblrd		*
   678  000876  50F5               	movf	tablat,w,c
   679                           
   680                           ; Switch size 1, requested type "space"
   681                           ; Number of cases is 1, Range of values is 48 to 48
   682                           ; switch strategies available:
   683                           ; Name         Instructions Cycles
   684                           ; simple_byte            4     3 (average)
   685                           ;	Chosen strategy is simple_byte
   686  000878  0A30               	xorlw	48	; case 48
   687  00087A  B4D8               	btfsc	status,2,c
   688  00087C  D7F4               	goto	l1229
   689                           
   690                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   691                           
   692                           ;doprnt.c: 586: }
   693                           
   694                           ;doprnt.c: 585: break;
   695  00087E  C00F  FFF6         	movff	sprintf@f,tblptrl
   696  000882  C010  FFF7         	movff	sprintf@f+1,tblptrh
   697  000886                     	if	0	;tblptru may be non-zero
   698  000886                     	endif
   699  000886                     	if	0	;tblptru may be non-zero
   700  000886                     	endif
   701  000886  0008               	tblrd		*
   702  000888  50F5               	movf	tablat,w,c
   703  00088A  EC46  F008         	call	_isdigit
   704  00088E  A0D8               	btfss	status,0,c
   705  000890  D032               	goto	l1249
   706                           
   707                           ;doprnt.c: 598: width = 0;
   708  000892  0E00               	movlw	0
   709  000894  6E1E               	movwf	sprintf@width+1,c
   710  000896  0E00               	movlw	0
   711  000898  6E1D               	movwf	sprintf@width,c
   712  00089A                     l1239:
   713                           
   714                           ;doprnt.c: 600: width *= 10;
   715  00089A  C01D  F001         	movff	sprintf@width,___wmul@multiplier
   716  00089E  C01E  F002         	movff	sprintf@width+1,___wmul@multiplier+1
   717  0008A2  0E00               	movlw	0
   718  0008A4  6E04               	movwf	___wmul@multiplicand+1,c
   719  0008A6  0E0A               	movlw	10
   720  0008A8  6E03               	movwf	___wmul@multiplicand,c
   721  0008AA  EC33  F008         	call	___wmul	;wreg free
   722  0008AE  C001  F01D         	movff	?___wmul,sprintf@width
   723  0008B2  C002  F01E         	movff	?___wmul+1,sprintf@width+1
   724                           
   725                           ;doprnt.c: 601: width += *f++ - '0';
   726  0008B6  0ED0               	movlw	208
   727  0008B8  6E13               	movwf	??_sprintf& (0+255),c
   728  0008BA  0EFF               	movlw	255
   729  0008BC  6E14               	movwf	(??_sprintf+1)& (0+255),c
   730  0008BE  C00F  FFF6         	movff	sprintf@f,tblptrl
   731  0008C2  C010  FFF7         	movff	sprintf@f+1,tblptrh
   732  0008C6                     	if	0	;tblptru may be non-zero
   733  0008C6                     	endif
   734  0008C6                     	if	0	;tblptru may be non-zero
   735  0008C6                     	endif
   736  0008C6  0008               	tblrd		*
   737  0008C8  50F5               	movf	tablat,w,c
   738  0008CA  6E15               	movwf	(??_sprintf+2)& (0+255),c
   739  0008CC  6A16               	clrf	(??_sprintf+3)& (0+255),c
   740  0008CE  5013               	movf	??_sprintf,w,c
   741  0008D0  2615               	addwf	??_sprintf+2,f,c
   742  0008D2  5014               	movf	??_sprintf+1,w,c
   743  0008D4  2216               	addwfc	??_sprintf+3,f,c
   744  0008D6  5015               	movf	??_sprintf+2,w,c
   745  0008D8  261D               	addwf	sprintf@width,f,c
   746  0008DA  5016               	movf	??_sprintf+3,w,c
   747  0008DC  221E               	addwfc	sprintf@width+1,f,c
   748  0008DE  4A0F               	infsnz	sprintf@f,f,c
   749  0008E0  2A10               	incf	sprintf@f+1,f,c
   750                           
   751                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   752  0008E2  C00F  FFF6         	movff	sprintf@f,tblptrl
   753  0008E6  C010  FFF7         	movff	sprintf@f+1,tblptrh
   754  0008EA                     	if	0	;tblptru may be non-zero
   755  0008EA                     	endif
   756  0008EA                     	if	0	;tblptru may be non-zero
   757  0008EA                     	endif
   758  0008EA  0008               	tblrd		*
   759  0008EC  50F5               	movf	tablat,w,c
   760  0008EE  EC46  F008         	call	_isdigit
   761  0008F2  B0D8               	btfsc	status,0,c
   762  0008F4  D7D2               	goto	l1239
   763  0008F6                     l1249:
   764  0008F6  C00F  FFF6         	movff	sprintf@f,tblptrl
   765  0008FA  C010  FFF7         	movff	sprintf@f+1,tblptrh
   766  0008FE  4A0F               	infsnz	sprintf@f,f,c
   767  000900  2A10               	incf	sprintf@f+1,f,c
   768  000902                     	if	0	;tblptru may be non-zero
   769  000902                     	endif
   770  000902                     	if	0	;tblptru may be non-zero
   771  000902                     	endif
   772  000902  0008               	tblrd		*
   773  000904  CFF5 F01F          	movff	tablat,sprintf@c
   774  000908  501F               	movf	sprintf@c,w,c
   775                           
   776                           ; Switch size 1, requested type "space"
   777                           ; Number of cases is 3, Range of values is 0 to 105
   778                           ; switch strategies available:
   779                           ; Name         Instructions Cycles
   780                           ; simple_byte           10     6 (average)
   781                           ;	Chosen strategy is simple_byte
   782  00090A  0A00               	xorlw	0	; case 0
   783  00090C  B4D8               	btfsc	status,2,c
   784  00090E  D0D2               	goto	l1329
   785  000910  0A64               	xorlw	100	; case 100
   786  000912  B4D8               	btfsc	status,2,c
   787  000914  D003               	goto	l1251
   788  000916  0A0D               	xorlw	13	; case 105
   789  000918  A4D8               	btfss	status,2,c
   790  00091A  D0C0               	goto	l1327
   791  00091C                     l1251:
   792                           
   793                           ;doprnt.c: 1253: {
   794                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   795  00091C  C017  FFD9         	movff	sprintf@ap,fsr2l
   796  000920  C018  FFDA         	movff	sprintf@ap+1,fsr2h
   797  000924  CFDE F01A          	movff	postinc2,sprintf@val
   798  000928  CFDD F01B          	movff	postdec2,sprintf@val+1
   799  00092C  0E02               	movlw	2
   800  00092E  2617               	addwf	sprintf@ap,f,c
   801  000930  0E00               	movlw	0
   802  000932  2218               	addwfc	sprintf@ap+1,f,c
   803                           
   804                           ;doprnt.c: 1261: if((int)val < 0) {
   805  000934  AE1B               	btfss	sprintf@val+1,7,c
   806  000936  D006               	goto	l1261
   807                           
   808                           ;doprnt.c: 1262: flag |= 0x03;
   809  000938  0E03               	movlw	3
   810  00093A  121C               	iorwf	sprintf@flag,f,c
   811                           
   812                           ;doprnt.c: 1263: val = -val;
   813  00093C  6C1A               	negf	sprintf@val,c
   814  00093E  1E1B               	comf	sprintf@val+1,f,c
   815  000940  B0D8               	btfsc	status,0,c
   816  000942  2A1B               	incf	sprintf@val+1,f,c
   817  000944                     l1261:
   818                           
   819                           ;doprnt.c: 1264: }
   820                           ;doprnt.c: 1266: }
   821                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   822  000944  0E01               	movlw	1
   823  000946  6E1F               	movwf	sprintf@c,c
   824  000948                     l1263:
   825  000948  0E05               	movlw	5
   826  00094A  181F               	xorwf	sprintf@c,w,c
   827  00094C  B4D8               	btfsc	status,2,c
   828  00094E  D012               	goto	l1275
   829                           
   830                           ;doprnt.c: 1306: if(val < dpowers[c])
   831  000950  501F               	movf	sprintf@c,w,c
   832  000952  0D02               	mullw	2
   833  000954  0E01               	movlw	low _dpowers
   834  000956  24F3               	addwf	prodl,w,c
   835  000958  6EF6               	movwf	tblptrl,c
   836  00095A  0E08               	movlw	high _dpowers
   837  00095C  20F4               	addwfc	prodh,w,c
   838  00095E  6EF7               	movwf	tblptrh,c
   839  000960                     	if	0	;There are less than 3 active tblptr bytes
   840  000960                     	endif
   841  000960  0009               	tblrd		*+
   842  000962  50F5               	movf	tablat,w,c
   843  000964  5C1A               	subwf	sprintf@val,w,c
   844  000966  0009               	tblrd		*+
   845  000968  50F5               	movf	tablat,w,c
   846  00096A  581B               	subwfb	sprintf@val+1,w,c
   847  00096C  A0D8               	btfss	status,0,c
   848  00096E  D002               	goto	l1275
   849                           
   850                           ;doprnt.c: 1307: break;
   851  000970  2A1F               	incf	sprintf@c,f,c
   852  000972  D7EA               	goto	l1263
   853  000974                     l1275:
   854                           
   855                           ;doprnt.c: 1345: if(width && flag & 0x03)
   856  000974  501D               	movf	sprintf@width,w,c
   857  000976  101E               	iorwf	sprintf@width+1,w,c
   858  000978  B4D8               	btfsc	status,2,c
   859  00097A  D009               	goto	l1281
   860  00097C  C01C  F013         	movff	sprintf@flag,??_sprintf
   861  000980  0E03               	movlw	3
   862  000982  1613               	andwf	??_sprintf,f,c
   863  000984  B4D8               	btfsc	status,2,c
   864  000986  D003               	goto	l1281
   865                           
   866                           ;doprnt.c: 1346: width--;
   867  000988  061D               	decf	sprintf@width,f,c
   868  00098A  A0D8               	btfss	status,0,c
   869  00098C  061E               	decf	sprintf@width+1,f,c
   870  00098E                     l1281:
   871                           
   872                           ;doprnt.c: 1381: if(width > c)
   873  00098E  0E80               	movlw	128
   874  000990  BE1F               	btfsc	sprintf@c,7,c
   875  000992  0E7F               	movlw	127
   876  000994  6E13               	movwf	??_sprintf& (0+255),c
   877  000996  501D               	movf	sprintf@width,w,c
   878  000998  5C1F               	subwf	sprintf@c,w,c
   879  00099A  501E               	movf	sprintf@width+1,w,c
   880  00099C  0A80               	xorlw	128
   881  00099E  5813               	subwfb	??_sprintf& (0+255),w,c
   882  0009A0  B0D8               	btfsc	status,0,c
   883  0009A2  D007               	goto	l1285
   884                           
   885                           ;doprnt.c: 1382: width -= c;
   886  0009A4  501F               	movf	sprintf@c,w,c
   887  0009A6  5E1D               	subwf	sprintf@width,f,c
   888  0009A8  0E00               	movlw	0
   889  0009AA  BE1F               	btfsc	sprintf@c,7,c
   890  0009AC  0EFF               	movlw	255
   891  0009AE  5A1E               	subwfb	sprintf@width+1,f,c
   892  0009B0  D004               	goto	l1287
   893  0009B2                     l1285:
   894                           
   895                           ;doprnt.c: 1383: else
   896                           ;doprnt.c: 1384: width = 0;
   897  0009B2  0E00               	movlw	0
   898  0009B4  6E1E               	movwf	sprintf@width+1,c
   899  0009B6  0E00               	movlw	0
   900  0009B8  6E1D               	movwf	sprintf@width,c
   901  0009BA                     l1287:
   902                           
   903                           ;doprnt.c: 1387: if(flag & 0x04) {
   904  0009BA  A41C               	btfss	sprintf@flag,2,c
   905  0009BC  D01E               	goto	l1303
   906                           
   907                           ;doprnt.c: 1392: if(flag & 0x03)
   908  0009BE  C01C  F013         	movff	sprintf@flag,??_sprintf
   909  0009C2  0E03               	movlw	3
   910  0009C4  1613               	andwf	??_sprintf,f,c
   911  0009C6  B4D8               	btfsc	status,2,c
   912  0009C8  D008               	goto	l1295
   913                           
   914                           ;doprnt.c: 1393: ((*sp++ = ('-')));
   915  0009CA  C00D  FFD9         	movff	sprintf@sp,fsr2l
   916  0009CE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   917  0009D2  0E2D               	movlw	45
   918  0009D4  6EDF               	movwf	indf2,c
   919  0009D6  4A0D               	infsnz	sprintf@sp,f,c
   920  0009D8  2A0E               	incf	sprintf@sp+1,f,c
   921  0009DA                     l1295:
   922                           
   923                           ;doprnt.c: 1415: if(width)
   924  0009DA  501D               	movf	sprintf@width,w,c
   925  0009DC  101E               	iorwf	sprintf@width+1,w,c
   926  0009DE  B4D8               	btfsc	status,2,c
   927  0009E0  D02D               	goto	l1317
   928                           
   929                           ;doprnt.c: 1417: ((*sp++ = ('0')));
   930                           
   931                           ;doprnt.c: 1416: do
   932  0009E2  C00D  FFD9         	movff	sprintf@sp,fsr2l
   933  0009E6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   934  0009EA  0E30               	movlw	48
   935  0009EC  6EDF               	movwf	indf2,c
   936  0009EE  4A0D               	infsnz	sprintf@sp,f,c
   937  0009F0  2A0E               	incf	sprintf@sp+1,f,c
   938                           
   939                           ;doprnt.c: 1418: while(--width);
   940  0009F2  061D               	decf	sprintf@width,f,c
   941  0009F4  A0D8               	btfss	status,0,c
   942  0009F6  061E               	decf	sprintf@width+1,f,c
   943  0009F8  D7F0               	goto	l1295
   944  0009FA                     l1303:
   945                           
   946                           ;doprnt.c: 1422: {
   947                           ;doprnt.c: 1424: if(width
   948                           ;doprnt.c: 1428: )
   949  0009FA  501D               	movf	sprintf@width,w,c
   950  0009FC  101E               	iorwf	sprintf@width+1,w,c
   951  0009FE  B4D8               	btfsc	status,2,c
   952  000A00  D00F               	goto	l1311
   953  000A02                     l1305:
   954                           
   955                           ;doprnt.c: 1430: ((*sp++ = (' ')));
   956  000A02  C00D  FFD9         	movff	sprintf@sp,fsr2l
   957  000A06  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   958  000A0A  0E20               	movlw	32
   959  000A0C  6EDF               	movwf	indf2,c
   960  000A0E  4A0D               	infsnz	sprintf@sp,f,c
   961  000A10  2A0E               	incf	sprintf@sp+1,f,c
   962                           
   963                           ;doprnt.c: 1431: while(--width);
   964  000A12  061D               	decf	sprintf@width,f,c
   965  000A14  A0D8               	btfss	status,0,c
   966  000A16  061E               	decf	sprintf@width+1,f,c
   967  000A18  501D               	movf	sprintf@width,w,c
   968  000A1A  101E               	iorwf	sprintf@width+1,w,c
   969  000A1C  A4D8               	btfss	status,2,c
   970  000A1E  D7F1               	goto	l1305
   971  000A20                     l1311:
   972                           
   973                           ;doprnt.c: 1438: if(flag & 0x03)
   974  000A20  C01C  F013         	movff	sprintf@flag,??_sprintf
   975  000A24  0E03               	movlw	3
   976  000A26  1613               	andwf	??_sprintf,f,c
   977  000A28  B4D8               	btfsc	status,2,c
   978  000A2A  D008               	goto	l1317
   979                           
   980                           ;doprnt.c: 1439: ((*sp++ = ('-')));
   981  000A2C  C00D  FFD9         	movff	sprintf@sp,fsr2l
   982  000A30  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   983  000A34  0E2D               	movlw	45
   984  000A36  6EDF               	movwf	indf2,c
   985  000A38  4A0D               	infsnz	sprintf@sp,f,c
   986  000A3A  2A0E               	incf	sprintf@sp+1,f,c
   987  000A3C                     l1317:
   988                           
   989                           ;doprnt.c: 1469: }
   990                           ;doprnt.c: 1472: prec = c;
   991  000A3C  C01F  F019         	movff	sprintf@c,sprintf@prec
   992                           
   993                           ;doprnt.c: 1474: while(prec--) {
   994  000A40  D029               	goto	l1325
   995  000A42                     l1319:
   996                           
   997                           ;doprnt.c: 1478: {
   998                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   999  000A42  5019               	movf	sprintf@prec,w,c
  1000  000A44  0D02               	mullw	2
  1001  000A46  0E01               	movlw	low _dpowers
  1002  000A48  24F3               	addwf	prodl,w,c
  1003  000A4A  6EF6               	movwf	tblptrl,c
  1004  000A4C  0E08               	movlw	high _dpowers
  1005  000A4E  20F4               	addwfc	prodh,w,c
  1006  000A50  6EF7               	movwf	tblptrh,c
  1007  000A52                     	if	0	;There are less than 3 active tblptr bytes
  1008  000A52                     	endif
  1009  000A52  0009               	tblrd		*+
  1010  000A54  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1011  000A58  000A               	tblrd		*-
  1012  000A5A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1013  000A5E  C01A  F001         	movff	sprintf@val,___lwdiv@dividend
  1014  000A62  C01B  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1015  000A66  ECE9  F007         	call	___lwdiv	;wreg free
  1016  000A6A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1017  000A6E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1018  000A72  0E00               	movlw	0
  1019  000A74  6E0B               	movwf	___lwmod@divisor+1,c
  1020  000A76  0E0A               	movlw	10
  1021  000A78  6E0A               	movwf	___lwmod@divisor,c
  1022  000A7A  EC12  F008         	call	___lwmod	;wreg free
  1023  000A7E  5008               	movf	?___lwmod,w,c
  1024  000A80  0F30               	addlw	48
  1025  000A82  6E1F               	movwf	sprintf@c,c
  1026                           
  1027                           ;doprnt.c: 1523: }
  1028                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1029  000A84  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1030  000A88  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1031  000A8C  C01F  FFDF         	movff	sprintf@c,indf2
  1032  000A90  4A0D               	infsnz	sprintf@sp,f,c
  1033  000A92  2A0E               	incf	sprintf@sp+1,f,c
  1034  000A94                     l1325:
  1035  000A94  0619               	decf	sprintf@prec,f,c
  1036  000A96  2819               	incf	sprintf@prec,w,c
  1037  000A98  A4D8               	btfss	status,2,c
  1038  000A9A  D7D3               	goto	l1319
  1039  000A9C                     l1327:
  1040  000A9C  C00F  FFF6         	movff	sprintf@f,tblptrl
  1041  000AA0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1042  000AA4  4A0F               	infsnz	sprintf@f,f,c
  1043  000AA6  2A10               	incf	sprintf@f+1,f,c
  1044  000AA8                     	if	0	;tblptru may be non-zero
  1045  000AA8                     	endif
  1046  000AA8                     	if	0	;tblptru may be non-zero
  1047  000AA8                     	endif
  1048  000AA8  0008               	tblrd		*
  1049  000AAA  CFF5 F01F          	movff	tablat,sprintf@c
  1050  000AAE  501F               	movf	sprintf@c,w,c
  1051  000AB0  A4D8               	btfss	status,2,c
  1052  000AB2  D6C5               	goto	l1221
  1053  000AB4                     l1329:
  1054                           
  1055                           ;doprnt.c: 1538: *sp = 0;
  1056  000AB4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1057  000AB8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1058  000ABC  0E00               	movlw	0
  1059  000ABE  6EDF               	movwf	indf2,c
  1060  000AC0  0012               	return	
  1061  000AC2                     __end_of_sprintf:
  1062                           	opt stack 0
  1063                           tblptru	equ	0xFF8
  1064                           tblptrh	equ	0xFF7
  1065                           tblptrl	equ	0xFF6
  1066                           tablat	equ	0xFF5
  1067                           prodh	equ	0xFF4
  1068                           prodl	equ	0xFF3
  1069                           wreg	equ	0xFE8
  1070                           indf2	equ	0xFDF
  1071                           postinc2	equ	0xFDE
  1072                           postdec2	equ	0xFDD
  1073                           fsr2h	equ	0xFDA
  1074                           fsr2l	equ	0xFD9
  1075                           status	equ	0xFD8
  1076                           
  1077 ;; *************** function _isdigit *****************
  1078 ;; Defined at:
  1079 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;  c               1    wreg     unsigned char 
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;  c               1    2[COMRAM] unsigned char 
  1084 ;; Return value:  Size  Location     Type
  1085 ;;		None               void
  1086 ;; Registers used:
  1087 ;;		wreg, status,2, status,0
  1088 ;; Tracked objects:
  1089 ;;		On entry : 0/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1093 ;;      Params:         0       0       0       0       0       0       0       0       0
  1094 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1095 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1096 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1097 ;;Total ram usage:        3 bytes
  1098 ;; Hardware stack levels used:    1
  1099 ;; This function calls:
  1100 ;;		Nothing
  1101 ;; This function is called by:
  1102 ;;		_sprintf
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           	psect	text2
  1107  00108C                     __ptext2:
  1108                           	opt stack 0
  1109  00108C                     _isdigit:
  1110                           	opt stack 29
  1111                           
  1112                           ;incstack = 0
  1113                           ;isdigit@c stored from wreg
  1114  00108C  6E03               	movwf	isdigit@c,c
  1115  00108E  0E00               	movlw	0
  1116  001090  6E02               	movwf	_isdigit$329,c
  1117  001092  0E3A               	movlw	58
  1118  001094  6003               	cpfslt	isdigit@c,c
  1119  001096  D005               	goto	l1127
  1120  001098  0E2F               	movlw	47
  1121  00109A  6403               	cpfsgt	isdigit@c,c
  1122  00109C  D002               	goto	l1127
  1123  00109E  0E01               	movlw	1
  1124  0010A0  6E02               	movwf	_isdigit$329,c
  1125  0010A2                     l1127:
  1126  0010A2  C002  F001         	movff	_isdigit$329,??_isdigit
  1127  0010A6  3001               	rrcf	??_isdigit,w,c
  1128  0010A8  0012               	return	
  1129  0010AA                     __end_of_isdigit:
  1130                           	opt stack 0
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           prodh	equ	0xFF4
  1136                           prodl	equ	0xFF3
  1137                           wreg	equ	0xFE8
  1138                           indf2	equ	0xFDF
  1139                           postinc2	equ	0xFDE
  1140                           postdec2	equ	0xFDD
  1141                           fsr2h	equ	0xFDA
  1142                           fsr2l	equ	0xFD9
  1143                           status	equ	0xFD8
  1144                           
  1145 ;; *************** function ___wmul *****************
  1146 ;; Defined at:
  1147 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;  multiplier      2    0[COMRAM] unsigned int 
  1150 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;  product         2    4[COMRAM] unsigned int 
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  2    0[COMRAM] unsigned int 
  1155 ;; Registers used:
  1156 ;;		wreg, status,2, status,0, prodl, prodh
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1162 ;;      Params:         4       0       0       0       0       0       0       0       0
  1163 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1164 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1165 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1166 ;;Total ram usage:        6 bytes
  1167 ;; Hardware stack levels used:    1
  1168 ;; This function calls:
  1169 ;;		Nothing
  1170 ;; This function is called by:
  1171 ;;		_sprintf
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text3
  1176  001066                     __ptext3:
  1177                           	opt stack 0
  1178  001066                     ___wmul:
  1179                           	opt stack 29
  1180                           
  1181                           ;incstack = 0
  1182  001066  5001               	movf	___wmul@multiplier,w,c
  1183  001068  0203               	mulwf	___wmul@multiplicand,c
  1184  00106A  CFF3 F005          	movff	prodl,___wmul@product
  1185  00106E  CFF4 F006          	movff	prodh,___wmul@product+1
  1186  001072  5001               	movf	___wmul@multiplier,w,c
  1187  001074  0204               	mulwf	___wmul@multiplicand+1,c
  1188  001076  50F3               	movf	prodl,w,c
  1189  001078  2606               	addwf	___wmul@product+1,f,c
  1190  00107A  5002               	movf	___wmul@multiplier+1,w,c
  1191  00107C  0203               	mulwf	___wmul@multiplicand,c
  1192  00107E  50F3               	movf	prodl,w,c
  1193  001080  2606               	addwf	___wmul@product+1,f,c
  1194  001082  C005  F001         	movff	___wmul@product,?___wmul
  1195  001086  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1196  00108A  0012               	return	
  1197  00108C                     __end_of___wmul:
  1198                           	opt stack 0
  1199                           tblptru	equ	0xFF8
  1200                           tblptrh	equ	0xFF7
  1201                           tblptrl	equ	0xFF6
  1202                           tablat	equ	0xFF5
  1203                           prodh	equ	0xFF4
  1204                           prodl	equ	0xFF3
  1205                           wreg	equ	0xFE8
  1206                           indf2	equ	0xFDF
  1207                           postinc2	equ	0xFDE
  1208                           postdec2	equ	0xFDD
  1209                           fsr2h	equ	0xFDA
  1210                           fsr2l	equ	0xFD9
  1211                           status	equ	0xFD8
  1212                           
  1213 ;; *************** function ___lwmod *****************
  1214 ;; Defined at:
  1215 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;  dividend        2    7[COMRAM] unsigned int 
  1218 ;;  divisor         2    9[COMRAM] unsigned int 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  counter         1   11[COMRAM] unsigned char 
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  2    7[COMRAM] unsigned int 
  1223 ;; Registers used:
  1224 ;;		wreg, status,2, status,0
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1230 ;;      Params:         4       0       0       0       0       0       0       0       0
  1231 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1232 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1233 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1234 ;;Total ram usage:        5 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_sprintf
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243                           	psect	text4
  1244  001024                     __ptext4:
  1245                           	opt stack 0
  1246  001024                     ___lwmod:
  1247                           	opt stack 29
  1248                           
  1249                           ;incstack = 0
  1250  001024  500A               	movf	___lwmod@divisor,w,c
  1251  001026  100B               	iorwf	___lwmod@divisor+1,w,c
  1252  001028  B4D8               	btfsc	status,2,c
  1253  00102A  D018               	goto	l550
  1254  00102C  0E01               	movlw	1
  1255  00102E  6E0C               	movwf	___lwmod@counter,c
  1256  001030  D004               	goto	l1165
  1257  001032                     l1163:
  1258  001032  90D8               	bcf	status,0,c
  1259  001034  360A               	rlcf	___lwmod@divisor,f,c
  1260  001036  360B               	rlcf	___lwmod@divisor+1,f,c
  1261  001038  2A0C               	incf	___lwmod@counter,f,c
  1262  00103A                     l1165:
  1263  00103A  AE0B               	btfss	___lwmod@divisor+1,7,c
  1264  00103C  D7FA               	goto	l1163
  1265  00103E                     l1167:
  1266  00103E  500A               	movf	___lwmod@divisor,w,c
  1267  001040  5C08               	subwf	___lwmod@dividend,w,c
  1268  001042  500B               	movf	___lwmod@divisor+1,w,c
  1269  001044  5809               	subwfb	___lwmod@dividend+1,w,c
  1270  001046  A0D8               	btfss	status,0,c
  1271  001048  D004               	goto	l1171
  1272  00104A  500A               	movf	___lwmod@divisor,w,c
  1273  00104C  5E08               	subwf	___lwmod@dividend,f,c
  1274  00104E  500B               	movf	___lwmod@divisor+1,w,c
  1275  001050  5A09               	subwfb	___lwmod@dividend+1,f,c
  1276  001052                     l1171:
  1277  001052  90D8               	bcf	status,0,c
  1278  001054  320B               	rrcf	___lwmod@divisor+1,f,c
  1279  001056  320A               	rrcf	___lwmod@divisor,f,c
  1280  001058  2E0C               	decfsz	___lwmod@counter,f,c
  1281  00105A  D7F1               	goto	l1167
  1282  00105C                     l550:
  1283  00105C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1284  001060  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1285  001064  0012               	return		;funcret
  1286  001066                     __end_of___lwmod:
  1287                           	opt stack 0
  1288                           tblptru	equ	0xFF8
  1289                           tblptrh	equ	0xFF7
  1290                           tblptrl	equ	0xFF6
  1291                           tablat	equ	0xFF5
  1292                           prodh	equ	0xFF4
  1293                           prodl	equ	0xFF3
  1294                           wreg	equ	0xFE8
  1295                           indf2	equ	0xFDF
  1296                           postinc2	equ	0xFDE
  1297                           postdec2	equ	0xFDD
  1298                           fsr2h	equ	0xFDA
  1299                           fsr2l	equ	0xFD9
  1300                           status	equ	0xFD8
  1301                           
  1302 ;; *************** function ___lwdiv *****************
  1303 ;; Defined at:
  1304 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  dividend        2    0[COMRAM] unsigned int 
  1307 ;;  divisor         2    2[COMRAM] unsigned int 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;  quotient        2    4[COMRAM] unsigned int 
  1310 ;;  counter         1    6[COMRAM] unsigned char 
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  2    0[COMRAM] unsigned int 
  1313 ;; Registers used:
  1314 ;;		wreg, status,2, status,0
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1320 ;;      Params:         4       0       0       0       0       0       0       0       0
  1321 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1322 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1323 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1324 ;;Total ram usage:        7 bytes
  1325 ;; Hardware stack levels used:    1
  1326 ;; This function calls:
  1327 ;;		Nothing
  1328 ;; This function is called by:
  1329 ;;		_sprintf
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text5
  1334  000FD2                     __ptext5:
  1335                           	opt stack 0
  1336  000FD2                     ___lwdiv:
  1337                           	opt stack 29
  1338                           
  1339                           ;incstack = 0
  1340  000FD2  0E00               	movlw	0
  1341  000FD4  6E06               	movwf	___lwdiv@quotient+1,c
  1342  000FD6  0E00               	movlw	0
  1343  000FD8  6E05               	movwf	___lwdiv@quotient,c
  1344  000FDA  5003               	movf	___lwdiv@divisor,w,c
  1345  000FDC  1004               	iorwf	___lwdiv@divisor+1,w,c
  1346  000FDE  B4D8               	btfsc	status,2,c
  1347  000FE0  D01C               	goto	l540
  1348  000FE2  0E01               	movlw	1
  1349  000FE4  6E07               	movwf	___lwdiv@counter,c
  1350  000FE6  D004               	goto	l1145
  1351  000FE8                     l1143:
  1352  000FE8  90D8               	bcf	status,0,c
  1353  000FEA  3603               	rlcf	___lwdiv@divisor,f,c
  1354  000FEC  3604               	rlcf	___lwdiv@divisor+1,f,c
  1355  000FEE  2A07               	incf	___lwdiv@counter,f,c
  1356  000FF0                     l1145:
  1357  000FF0  AE04               	btfss	___lwdiv@divisor+1,7,c
  1358  000FF2  D7FA               	goto	l1143
  1359  000FF4                     l1147:
  1360  000FF4  90D8               	bcf	status,0,c
  1361  000FF6  3605               	rlcf	___lwdiv@quotient,f,c
  1362  000FF8  3606               	rlcf	___lwdiv@quotient+1,f,c
  1363  000FFA  5003               	movf	___lwdiv@divisor,w,c
  1364  000FFC  5C01               	subwf	___lwdiv@dividend,w,c
  1365  000FFE  5004               	movf	___lwdiv@divisor+1,w,c
  1366  001000  5802               	subwfb	___lwdiv@dividend+1,w,c
  1367  001002  A0D8               	btfss	status,0,c
  1368  001004  D005               	goto	l1155
  1369  001006  5003               	movf	___lwdiv@divisor,w,c
  1370  001008  5E01               	subwf	___lwdiv@dividend,f,c
  1371  00100A  5004               	movf	___lwdiv@divisor+1,w,c
  1372  00100C  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1373  00100E  8005               	bsf	___lwdiv@quotient,0,c
  1374  001010                     l1155:
  1375  001010  90D8               	bcf	status,0,c
  1376  001012  3204               	rrcf	___lwdiv@divisor+1,f,c
  1377  001014  3203               	rrcf	___lwdiv@divisor,f,c
  1378  001016  2E07               	decfsz	___lwdiv@counter,f,c
  1379  001018  D7ED               	goto	l1147
  1380  00101A                     l540:
  1381  00101A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1382  00101E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1383  001022  0012               	return		;funcret
  1384  001024                     __end_of___lwdiv:
  1385                           	opt stack 0
  1386                           tblptru	equ	0xFF8
  1387                           tblptrh	equ	0xFF7
  1388                           tblptrl	equ	0xFF6
  1389                           tablat	equ	0xFF5
  1390                           prodh	equ	0xFF4
  1391                           prodl	equ	0xFF3
  1392                           wreg	equ	0xFE8
  1393                           indf2	equ	0xFDF
  1394                           postinc2	equ	0xFDE
  1395                           postdec2	equ	0xFDD
  1396                           fsr2h	equ	0xFDA
  1397                           fsr2l	equ	0xFD9
  1398                           status	equ	0xFD8
  1399                           
  1400 ;; *************** function _Lcd_Out2 *****************
  1401 ;; Defined at:
  1402 ;;		line 116 in file "flex_lcd.h"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;  y               1    wreg     unsigned char 
  1405 ;;  x               1    3[COMRAM] unsigned char 
  1406 ;;  buffer          2    4[COMRAM] PTR unsigned char 
  1407 ;;		 -> main@buffer1(20), 
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;  y               1    6[COMRAM] unsigned char 
  1410 ;;  data            1    7[COMRAM] unsigned char 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1420 ;;      Params:         3       0       0       0       0       0       0       0       0
  1421 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1422 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1423 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1424 ;;Total ram usage:        5 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    1
  1427 ;; This function calls:
  1428 ;;		_Lcd_Chr_CP
  1429 ;;		_Lcd_Cmd
  1430 ;; This function is called by:
  1431 ;;		_main
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           	psect	text6
  1436  000F70                     __ptext6:
  1437                           	opt stack 0
  1438  000F70                     _Lcd_Out2:
  1439                           	opt stack 29
  1440                           
  1441                           ;incstack = 0
  1442                           ;Lcd_Out2@y stored from wreg
  1443  000F70  6E07               	movwf	Lcd_Out2@y,c
  1444                           
  1445                           ;flex_lcd.h: 118: unsigned char data;
  1446                           ;flex_lcd.h: 119: switch (y)
  1447  000F72  D00D               	goto	l1209
  1448  000F74                     l1199:
  1449  000F74  5004               	movf	Lcd_Out2@x,w,c
  1450  000F76  0F80               	addlw	128
  1451  000F78  D008               	goto	L4
  1452  000F7A                     l1201:
  1453  000F7A  5004               	movf	Lcd_Out2@x,w,c
  1454  000F7C  0FC0               	addlw	192
  1455  000F7E  D005               	goto	L4
  1456  000F80                     l1203:
  1457  000F80  5004               	movf	Lcd_Out2@x,w,c
  1458  000F82  0F94               	addlw	148
  1459  000F84  D002               	goto	L4
  1460  000F86                     l1205:
  1461  000F86  5004               	movf	Lcd_Out2@x,w,c
  1462  000F88  0FD4               	addlw	212
  1463  000F8A                     L4:
  1464  000F8A  6E08               	movwf	Lcd_Out2@data,c
  1465                           
  1466                           ;flex_lcd.h: 126: }
  1467                           
  1468                           ;flex_lcd.h: 125: default: break;
  1469  000F8C  D00D               	goto	l1211
  1470  000F8E                     l1209:
  1471  000F8E  5007               	movf	Lcd_Out2@y,w,c
  1472                           
  1473                           ; Switch size 1, requested type "space"
  1474                           ; Number of cases is 4, Range of values is 1 to 4
  1475                           ; switch strategies available:
  1476                           ; Name         Instructions Cycles
  1477                           ; simple_byte           13     7 (average)
  1478                           ;	Chosen strategy is simple_byte
  1479  000F90  0A01               	xorlw	1	; case 1
  1480  000F92  B4D8               	btfsc	status,2,c
  1481  000F94  D7EF               	goto	l1199
  1482  000F96  0A03               	xorlw	3	; case 2
  1483  000F98  B4D8               	btfsc	status,2,c
  1484  000F9A  D7EF               	goto	l1201
  1485  000F9C  0A01               	xorlw	1	; case 3
  1486  000F9E  B4D8               	btfsc	status,2,c
  1487  000FA0  D7EF               	goto	l1203
  1488  000FA2  0A07               	xorlw	7	; case 4
  1489  000FA4  B4D8               	btfsc	status,2,c
  1490  000FA6  D7EF               	goto	l1205
  1491  000FA8                     l1211:
  1492                           
  1493                           ;flex_lcd.h: 127: Lcd_Cmd(data);
  1494  000FA8  5008               	movf	Lcd_Out2@data,w,c
  1495  000FAA  EC0B  F007         	call	_Lcd_Cmd
  1496                           
  1497                           ;flex_lcd.h: 128: while(*buffer)
  1498  000FAE  D009               	goto	l1217
  1499  000FB0                     l1213:
  1500                           
  1501                           ;flex_lcd.h: 129: {
  1502                           ;flex_lcd.h: 130: Lcd_Chr_CP(*buffer);
  1503  000FB0  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  1504  000FB4  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  1505  000FB8  50DF               	movf	indf2,w,c
  1506  000FBA  EC8E  F006         	call	_Lcd_Chr_CP
  1507                           
  1508                           ;flex_lcd.h: 131: buffer++;
  1509  000FBE  4A05               	infsnz	Lcd_Out2@buffer,f,c
  1510  000FC0  2A06               	incf	Lcd_Out2@buffer+1,f,c
  1511  000FC2                     l1217:
  1512  000FC2  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  1513  000FC6  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  1514  000FCA  50DF               	movf	indf2,w,c
  1515  000FCC  B4D8               	btfsc	status,2,c
  1516  000FCE  0012               	return	
  1517  000FD0  D7EF               	goto	l1213
  1518  000FD2                     __end_of_Lcd_Out2:
  1519                           	opt stack 0
  1520                           tblptru	equ	0xFF8
  1521                           tblptrh	equ	0xFF7
  1522                           tblptrl	equ	0xFF6
  1523                           tablat	equ	0xFF5
  1524                           prodh	equ	0xFF4
  1525                           prodl	equ	0xFF3
  1526                           wreg	equ	0xFE8
  1527                           indf2	equ	0xFDF
  1528                           postinc2	equ	0xFDE
  1529                           postdec2	equ	0xFDD
  1530                           fsr2h	equ	0xFDA
  1531                           fsr2l	equ	0xFD9
  1532                           status	equ	0xFD8
  1533                           
  1534 ;; *************** function _Lcd_Out *****************
  1535 ;; Defined at:
  1536 ;;		line 95 in file "flex_lcd.h"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;  y               1    wreg     unsigned char 
  1539 ;;  x               1    3[COMRAM] unsigned char 
  1540 ;;  buffer          2    4[COMRAM] PTR const unsigned char 
  1541 ;;		 -> STR_4(4), STR_3(9), STR_2(15), 
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;  y               1    6[COMRAM] unsigned char 
  1544 ;;  data            1    7[COMRAM] unsigned char 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1554 ;;      Params:         3       0       0       0       0       0       0       0       0
  1555 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1557 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1558 ;;Total ram usage:        5 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    1
  1561 ;; This function calls:
  1562 ;;		_Lcd_Chr_CP
  1563 ;;		_Lcd_Cmd
  1564 ;; This function is called by:
  1565 ;;		_main
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text7
  1570  000F08                     __ptext7:
  1571                           	opt stack 0
  1572  000F08                     _Lcd_Out:
  1573                           	opt stack 29
  1574                           
  1575                           ;incstack = 0
  1576                           ;Lcd_Out@y stored from wreg
  1577  000F08  6E07               	movwf	Lcd_Out@y,c
  1578                           
  1579                           ;flex_lcd.h: 97: unsigned char data;
  1580                           ;flex_lcd.h: 98: switch (y)
  1581  000F0A  D00D               	goto	l1187
  1582  000F0C                     l1177:
  1583  000F0C  5004               	movf	Lcd_Out@x,w,c
  1584  000F0E  0F80               	addlw	128
  1585  000F10  D008               	goto	L7
  1586  000F12                     l1179:
  1587  000F12  5004               	movf	Lcd_Out@x,w,c
  1588  000F14  0FC0               	addlw	192
  1589  000F16  D005               	goto	L7
  1590  000F18                     l1181:
  1591  000F18  5004               	movf	Lcd_Out@x,w,c
  1592  000F1A  0F94               	addlw	148
  1593  000F1C  D002               	goto	L7
  1594  000F1E                     l1183:
  1595  000F1E  5004               	movf	Lcd_Out@x,w,c
  1596  000F20  0FD4               	addlw	212
  1597  000F22                     L7:
  1598  000F22  6E08               	movwf	Lcd_Out@data,c
  1599                           
  1600                           ;flex_lcd.h: 105: }
  1601                           
  1602                           ;flex_lcd.h: 104: default: break;
  1603  000F24  D00D               	goto	l1189
  1604  000F26                     l1187:
  1605  000F26  5007               	movf	Lcd_Out@y,w,c
  1606                           
  1607                           ; Switch size 1, requested type "space"
  1608                           ; Number of cases is 4, Range of values is 1 to 4
  1609                           ; switch strategies available:
  1610                           ; Name         Instructions Cycles
  1611                           ; simple_byte           13     7 (average)
  1612                           ;	Chosen strategy is simple_byte
  1613  000F28  0A01               	xorlw	1	; case 1
  1614  000F2A  B4D8               	btfsc	status,2,c
  1615  000F2C  D7EF               	goto	l1177
  1616  000F2E  0A03               	xorlw	3	; case 2
  1617  000F30  B4D8               	btfsc	status,2,c
  1618  000F32  D7EF               	goto	l1179
  1619  000F34  0A01               	xorlw	1	; case 3
  1620  000F36  B4D8               	btfsc	status,2,c
  1621  000F38  D7EF               	goto	l1181
  1622  000F3A  0A07               	xorlw	7	; case 4
  1623  000F3C  B4D8               	btfsc	status,2,c
  1624  000F3E  D7EF               	goto	l1183
  1625  000F40                     l1189:
  1626                           
  1627                           ;flex_lcd.h: 106: Lcd_Cmd(data);
  1628  000F40  5008               	movf	Lcd_Out@data,w,c
  1629  000F42  EC0B  F007         	call	_Lcd_Cmd
  1630                           
  1631                           ;flex_lcd.h: 107: while(*buffer)
  1632  000F46  D00A               	goto	l1195
  1633  000F48                     l1191:
  1634                           
  1635                           ;flex_lcd.h: 108: {
  1636                           ;flex_lcd.h: 109: Lcd_Chr_CP(*buffer);
  1637  000F48  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  1638  000F4C  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  1639  000F50                     	if	0	;tblptru may be non-zero
  1640  000F50                     	endif
  1641  000F50                     	if	0	;tblptru may be non-zero
  1642  000F50                     	endif
  1643  000F50  0008               	tblrd		*
  1644  000F52  50F5               	movf	tablat,w,c
  1645  000F54  EC8E  F006         	call	_Lcd_Chr_CP
  1646                           
  1647                           ;flex_lcd.h: 110: buffer++;
  1648  000F58  4A05               	infsnz	Lcd_Out@buffer,f,c
  1649  000F5A  2A06               	incf	Lcd_Out@buffer+1,f,c
  1650  000F5C                     l1195:
  1651  000F5C  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  1652  000F60  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  1653  000F64                     	if	0	;tblptru may be non-zero
  1654  000F64                     	endif
  1655  000F64                     	if	0	;tblptru may be non-zero
  1656  000F64                     	endif
  1657  000F64  0008               	tblrd		*
  1658  000F66  50F5               	movf	tablat,w,c
  1659  000F68  0900               	iorlw	0
  1660  000F6A  B4D8               	btfsc	status,2,c
  1661  000F6C  0012               	return	
  1662  000F6E  D7EC               	goto	l1191
  1663  000F70                     __end_of_Lcd_Out:
  1664                           	opt stack 0
  1665                           tblptru	equ	0xFF8
  1666                           tblptrh	equ	0xFF7
  1667                           tblptrl	equ	0xFF6
  1668                           tablat	equ	0xFF5
  1669                           prodh	equ	0xFF4
  1670                           prodl	equ	0xFF3
  1671                           wreg	equ	0xFE8
  1672                           indf2	equ	0xFDF
  1673                           postinc2	equ	0xFDE
  1674                           postdec2	equ	0xFDD
  1675                           fsr2h	equ	0xFDA
  1676                           fsr2l	equ	0xFD9
  1677                           status	equ	0xFD8
  1678                           
  1679 ;; *************** function _Lcd_Chr_CP *****************
  1680 ;; Defined at:
  1681 ;;		line 137 in file "flex_lcd.h"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  data            1    wreg     unsigned char 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  data            1    2[COMRAM] unsigned char 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, status,2, status,0
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1695 ;;      Params:         0       0       0       0       0       0       0       0       0
  1696 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1697 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1698 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1699 ;;Total ram usage:        3 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; This function calls:
  1702 ;;		Nothing
  1703 ;; This function is called by:
  1704 ;;		_Lcd_Out
  1705 ;;		_Lcd_Out2
  1706 ;; This function uses a non-reentrant model
  1707 ;;
  1708                           
  1709                           	psect	text8
  1710  000D1C                     __ptext8:
  1711                           	opt stack 0
  1712  000D1C                     _Lcd_Chr_CP:
  1713                           	opt stack 29
  1714                           
  1715                           ;incstack = 0
  1716                           ;Lcd_Chr_CP@data stored from wreg
  1717  000D1C  6E03               	movwf	Lcd_Chr_CP@data,c
  1718                           
  1719                           ;flex_lcd.h: 138: RD3 = 0; RD2 = 1;
  1720  000D1E  9683               	bcf	3971,3,c	;volatile
  1721  000D20  8483               	bsf	3971,2,c	;volatile
  1722                           
  1723                           ;flex_lcd.h: 139: RD7 = (data & 0b10000000)>>7; RD6 = (data & 0b01000000)>>6;
  1724  000D22  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  1725  000D24  AE03               	btfss	Lcd_Chr_CP@data,7,c
  1726  000D26  D001               	bra	u205
  1727  000D28  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  1728  000D2A                     u205:
  1729  000D2A  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1730  000D2C  A0D8               	btfss	status,0,c
  1731  000D2E  D002               	goto	u210
  1732  000D30  8E83               	bsf	3971,7,c	;volatile
  1733  000D32  D001               	goto	u225
  1734  000D34                     u210:
  1735  000D34  9E83               	bcf	3971,7,c	;volatile
  1736  000D36                     u225:
  1737  000D36  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1738  000D3A  0E06               	movlw	6
  1739  000D3C  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  1740  000D3E                     u235:
  1741  000D3E  90D8               	bcf	status,0,c
  1742  000D40  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1743  000D42  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  1744  000D44  D7FC               	goto	u235
  1745  000D46  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1746  000D48  A0D8               	btfss	status,0,c
  1747  000D4A  D002               	goto	u240
  1748  000D4C  8C83               	bsf	3971,6,c	;volatile
  1749  000D4E  D001               	goto	u255
  1750  000D50                     u240:
  1751  000D50  9C83               	bcf	3971,6,c	;volatile
  1752  000D52                     u255:
  1753                           
  1754                           ;flex_lcd.h: 140: RD5 = (data & 0b00100000)>>5; RD4 = (data & 0b00010000)>>4;
  1755  000D52  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1756  000D56  0E05               	movlw	5
  1757  000D58  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  1758  000D5A                     u265:
  1759  000D5A  90D8               	bcf	status,0,c
  1760  000D5C  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1761  000D5E  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  1762  000D60  D7FC               	goto	u265
  1763  000D62  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1764  000D64  A0D8               	btfss	status,0,c
  1765  000D66  D002               	goto	u270
  1766  000D68  8A83               	bsf	3971,5,c	;volatile
  1767  000D6A  D001               	goto	u285
  1768  000D6C                     u270:
  1769  000D6C  9A83               	bcf	3971,5,c	;volatile
  1770  000D6E                     u285:
  1771  000D6E  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1772  000D72  3A01               	swapf	??_Lcd_Chr_CP,f,c
  1773  000D74  0E0F               	movlw	15
  1774  000D76  1601               	andwf	??_Lcd_Chr_CP,f,c
  1775  000D78  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1776  000D7A  A0D8               	btfss	status,0,c
  1777  000D7C  D002               	goto	u290
  1778  000D7E  8883               	bsf	3971,4,c	;volatile
  1779  000D80  D001               	goto	l779
  1780  000D82                     u290:
  1781  000D82  9883               	bcf	3971,4,c	;volatile
  1782  000D84                     l779:
  1783                           
  1784                           ;flex_lcd.h: 141: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1785  000D84  0E06               	movlw	6
  1786  000D86                     u1107:
  1787  000D86  2EE8               	decfsz	wreg,f,c
  1788  000D88  D7FE               	bra	u1107
  1789  000D8A  D000               	nop2	
  1790                           
  1791                           ;flex_lcd.h: 142: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  1792  000D8C  8683               	bsf	3971,3,c	;volatile
  1793  000D8E  0E03               	movlw	3
  1794  000D90                     u1117:
  1795  000D90  2EE8               	decfsz	wreg,f,c
  1796  000D92  D7FE               	bra	u1117
  1797  000D94  F000               	nop	
  1798  000D96  9683               	bcf	3971,3,c	;volatile
  1799                           
  1800                           ;flex_lcd.h: 143: RD7 = (data & 0b00001000)>>3; RD6 = (data & 0b00000100)>>2;
  1801  000D98  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1802  000D9C  90D8               	bcf	status,0,c
  1803  000D9E  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1804  000DA0  90D8               	bcf	status,0,c
  1805  000DA2  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1806  000DA4  90D8               	bcf	status,0,c
  1807  000DA6  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1808  000DA8  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1809  000DAA  A0D8               	btfss	status,0,c
  1810  000DAC  D002               	goto	u310
  1811  000DAE  8E83               	bsf	3971,7,c	;volatile
  1812  000DB0  D001               	goto	u325
  1813  000DB2                     u310:
  1814  000DB2  9E83               	bcf	3971,7,c	;volatile
  1815  000DB4                     u325:
  1816  000DB4  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1817  000DB8  90D8               	bcf	status,0,c
  1818  000DBA  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1819  000DBC  90D8               	bcf	status,0,c
  1820  000DBE  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1821  000DC0  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1822  000DC2  A0D8               	btfss	status,0,c
  1823  000DC4  D002               	goto	u330
  1824  000DC6  8C83               	bsf	3971,6,c	;volatile
  1825  000DC8  D001               	goto	u345
  1826  000DCA                     u330:
  1827  000DCA  9C83               	bcf	3971,6,c	;volatile
  1828  000DCC                     u345:
  1829                           
  1830                           ;flex_lcd.h: 144: RD5 = (data & 0b00000010)>>1; RD4 = (data & 0b00000001);
  1831  000DCC  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1832  000DD0  90D8               	bcf	status,0,c
  1833  000DD2  3201               	rrcf	??_Lcd_Chr_CP,f,c
  1834  000DD4  3001               	rrcf	??_Lcd_Chr_CP,w,c
  1835  000DD6  A0D8               	btfss	status,0,c
  1836  000DD8  D002               	goto	u350
  1837  000DDA  8A83               	bsf	3971,5,c	;volatile
  1838  000DDC  D001               	goto	l787
  1839  000DDE                     u350:
  1840  000DDE  9A83               	bcf	3971,5,c	;volatile
  1841  000DE0                     l787:
  1842  000DE0  A003               	btfss	Lcd_Chr_CP@data,0,c
  1843  000DE2  D002               	goto	u370
  1844  000DE4  8883               	bsf	3971,4,c	;volatile
  1845  000DE6  D001               	goto	l789
  1846  000DE8                     u370:
  1847  000DE8  9883               	bcf	3971,4,c	;volatile
  1848  000DEA                     l789:
  1849                           
  1850                           ;flex_lcd.h: 145: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1851  000DEA  0E06               	movlw	6
  1852  000DEC                     u1127:
  1853  000DEC  2EE8               	decfsz	wreg,f,c
  1854  000DEE  D7FE               	bra	u1127
  1855  000DF0  D000               	nop2	
  1856                           
  1857                           ;flex_lcd.h: 146: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  1858  000DF2  8683               	bsf	3971,3,c	;volatile
  1859  000DF4  0E03               	movlw	3
  1860  000DF6                     u1137:
  1861  000DF6  2EE8               	decfsz	wreg,f,c
  1862  000DF8  D7FE               	bra	u1137
  1863  000DFA  F000               	nop	
  1864  000DFC  9683               	bcf	3971,3,c	;volatile
  1865                           
  1866                           ;flex_lcd.h: 147: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned lon
      +                          g)((5500)*(8000000/4000000.0)));
  1867  000DFE  0E03               	movlw	3
  1868  000E00                     u1147:
  1869  000E00  2EE8               	decfsz	wreg,f,c
  1870  000E02  D7FE               	bra	u1147
  1871  000E04  F000               	nop	
  1872  000E06  0E0F               	movlw	15
  1873  000E08  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  1874  000E0A  0E48               	movlw	72
  1875  000E0C                     u1157:
  1876  000E0C  2EE8               	decfsz	wreg,f,c
  1877  000E0E  D7FE               	bra	u1157
  1878  000E10  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  1879  000E12  D7FC               	bra	u1157
  1880  000E14  0012               	return		;funcret
  1881  000E16                     __end_of_Lcd_Chr_CP:
  1882                           	opt stack 0
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           prodh	equ	0xFF4
  1888                           prodl	equ	0xFF3
  1889                           wreg	equ	0xFE8
  1890                           indf2	equ	0xFDF
  1891                           postinc2	equ	0xFDE
  1892                           postdec2	equ	0xFDD
  1893                           fsr2h	equ	0xFDA
  1894                           fsr2l	equ	0xFD9
  1895                           status	equ	0xFD8
  1896                           
  1897 ;; *************** function _Lcd_Init *****************
  1898 ;; Defined at:
  1899 ;;		line 53 in file "flex_lcd.h"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;  data            1    4[COMRAM] unsigned char 
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      void 
  1906 ;; Registers used:
  1907 ;;		wreg, status,2, status,0, cstack
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1913 ;;      Params:         0       0       0       0       0       0       0       0       0
  1914 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1915 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1916 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1917 ;;Total ram usage:        2 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    1
  1920 ;; This function calls:
  1921 ;;		_Lcd_Cmd
  1922 ;; This function is called by:
  1923 ;;		_main
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text9
  1928  000C02                     __ptext9:
  1929                           	opt stack 0
  1930  000C02                     _Lcd_Init:
  1931                           	opt stack 29
  1932                           
  1933                           ;flex_lcd.h: 54: unsigned char data;
  1934                           ;flex_lcd.h: 55: TRISD7 = 0;
  1935                           
  1936                           ;incstack = 0
  1937  000C02  9E95               	bcf	3989,7,c	;volatile
  1938                           
  1939                           ;flex_lcd.h: 56: TRISD6 = 0;
  1940  000C04  9C95               	bcf	3989,6,c	;volatile
  1941                           
  1942                           ;flex_lcd.h: 57: TRISD5 = 0;
  1943  000C06  9A95               	bcf	3989,5,c	;volatile
  1944                           
  1945                           ;flex_lcd.h: 58: TRISD4 = 0;
  1946  000C08  9895               	bcf	3989,4,c	;volatile
  1947                           
  1948                           ;flex_lcd.h: 59: TRISD3 = 0;
  1949  000C0A  9695               	bcf	3989,3,c	;volatile
  1950                           
  1951                           ;flex_lcd.h: 60: TRISD2 = 0;
  1952  000C0C  9495               	bcf	3989,2,c	;volatile
  1953                           
  1954                           ;flex_lcd.h: 61: RD7 = 0;
  1955  000C0E  9E83               	bcf	3971,7,c	;volatile
  1956                           
  1957                           ;flex_lcd.h: 62: RD6 = 0;
  1958  000C10  9C83               	bcf	3971,6,c	;volatile
  1959                           
  1960                           ;flex_lcd.h: 63: RD5 = 0;
  1961  000C12  9A83               	bcf	3971,5,c	;volatile
  1962                           
  1963                           ;flex_lcd.h: 64: RD4 = 0;
  1964  000C14  9883               	bcf	3971,4,c	;volatile
  1965                           
  1966                           ;flex_lcd.h: 65: RD3 = 0;
  1967  000C16  9683               	bcf	3971,3,c	;volatile
  1968                           
  1969                           ;flex_lcd.h: 66: RD2 = 0;
  1970  000C18  9483               	bcf	3971,2,c	;volatile
  1971                           
  1972                           ;flex_lcd.h: 67: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1973  000C1A  0E0F               	movlw	15
  1974  000C1C  6E04               	movwf	??_Lcd_Init& (0+255),c
  1975  000C1E  0E48               	movlw	72
  1976  000C20                     u1167:
  1977  000C20  2EE8               	decfsz	wreg,f,c
  1978  000C22  D7FE               	bra	u1167
  1979  000C24  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1980  000C26  D7FC               	bra	u1167
  1981                           
  1982                           ;flex_lcd.h: 68: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1983  000C28  0E0F               	movlw	15
  1984  000C2A  6E04               	movwf	??_Lcd_Init& (0+255),c
  1985  000C2C  0E48               	movlw	72
  1986  000C2E                     u1177:
  1987  000C2E  2EE8               	decfsz	wreg,f,c
  1988  000C30  D7FE               	bra	u1177
  1989  000C32  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1990  000C34  D7FC               	bra	u1177
  1991                           
  1992                           ;flex_lcd.h: 69: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1993  000C36  0E0F               	movlw	15
  1994  000C38  6E04               	movwf	??_Lcd_Init& (0+255),c
  1995  000C3A  0E48               	movlw	72
  1996  000C3C                     u1187:
  1997  000C3C  2EE8               	decfsz	wreg,f,c
  1998  000C3E  D7FE               	bra	u1187
  1999  000C40  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2000  000C42  D7FC               	bra	u1187
  2001                           
  2002                           ;flex_lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2003  000C44  0E0F               	movlw	15
  2004  000C46  6E04               	movwf	??_Lcd_Init& (0+255),c
  2005  000C48  0E48               	movlw	72
  2006  000C4A                     u1197:
  2007  000C4A  2EE8               	decfsz	wreg,f,c
  2008  000C4C  D7FE               	bra	u1197
  2009  000C4E  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2010  000C50  D7FC               	bra	u1197
  2011                           
  2012                           ;flex_lcd.h: 71: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2013  000C52  0E0F               	movlw	15
  2014  000C54  6E04               	movwf	??_Lcd_Init& (0+255),c
  2015  000C56  0E48               	movlw	72
  2016  000C58                     u1207:
  2017  000C58  2EE8               	decfsz	wreg,f,c
  2018  000C5A  D7FE               	bra	u1207
  2019  000C5C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2020  000C5E  D7FC               	bra	u1207
  2021                           
  2022                           ;flex_lcd.h: 72: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2023  000C60  0E0F               	movlw	15
  2024  000C62  6E04               	movwf	??_Lcd_Init& (0+255),c
  2025  000C64  0E48               	movlw	72
  2026  000C66                     u1217:
  2027  000C66  2EE8               	decfsz	wreg,f,c
  2028  000C68  D7FE               	bra	u1217
  2029  000C6A  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2030  000C6C  D7FC               	bra	u1217
  2031                           
  2032                           ;flex_lcd.h: 73: for(data = 1; data < 4; data ++)
  2033  000C6E  0E01               	movlw	1
  2034  000C70  6E05               	movwf	Lcd_Init@data,c
  2035  000C72                     l863:
  2036  000C72  0E03               	movlw	3
  2037  000C74  6405               	cpfsgt	Lcd_Init@data,c
  2038  000C76  D001               	goto	l39
  2039  000C78  D01F               	goto	l40
  2040  000C7A                     l39:
  2041                           
  2042                           ;flex_lcd.h: 74: {
  2043                           ;flex_lcd.h: 75: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1; RD3 = 0;
  2044  000C7A  9E83               	bcf	3971,7,c	;volatile
  2045  000C7C  9C83               	bcf	3971,6,c	;volatile
  2046  000C7E  8A83               	bsf	3971,5,c	;volatile
  2047  000C80  8883               	bsf	3971,4,c	;volatile
  2048  000C82  9683               	bcf	3971,3,c	;volatile
  2049                           
  2050                           ;flex_lcd.h: 76: RD2 = 0; RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1;
  2051  000C84  9483               	bcf	3971,2,c	;volatile
  2052  000C86  9E83               	bcf	3971,7,c	;volatile
  2053  000C88  9C83               	bcf	3971,6,c	;volatile
  2054  000C8A  8A83               	bsf	3971,5,c	;volatile
  2055  000C8C  8883               	bsf	3971,4,c	;volatile
  2056                           
  2057                           ;flex_lcd.h: 77: RD3 = 1; RD2 = 0;
  2058  000C8E  8683               	bsf	3971,3,c	;volatile
  2059  000C90  9483               	bcf	3971,2,c	;volatile
  2060                           
  2061                           ;flex_lcd.h: 78: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2062  000C92  0E03               	movlw	3
  2063  000C94                     u1227:
  2064  000C94  2EE8               	decfsz	wreg,f,c
  2065  000C96  D7FE               	bra	u1227
  2066  000C98  F000               	nop	
  2067                           
  2068                           ;flex_lcd.h: 79: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1; RD3 = 0;
  2069  000C9A  9E83               	bcf	3971,7,c	;volatile
  2070  000C9C  9C83               	bcf	3971,6,c	;volatile
  2071  000C9E  8A83               	bsf	3971,5,c	;volatile
  2072  000CA0  8883               	bsf	3971,4,c	;volatile
  2073  000CA2  9683               	bcf	3971,3,c	;volatile
  2074                           
  2075                           ;flex_lcd.h: 80: RD2 = 0;
  2076  000CA4  9483               	bcf	3971,2,c	;volatile
  2077                           
  2078                           ;flex_lcd.h: 81: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2079  000CA6  0E0F               	movlw	15
  2080  000CA8  6E04               	movwf	??_Lcd_Init& (0+255),c
  2081  000CAA  0E48               	movlw	72
  2082  000CAC                     u1237:
  2083  000CAC  2EE8               	decfsz	wreg,f,c
  2084  000CAE  D7FE               	bra	u1237
  2085  000CB0  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2086  000CB2  D7FC               	bra	u1237
  2087  000CB4  2A05               	incf	Lcd_Init@data,f,c
  2088  000CB6  D7DD               	goto	l863
  2089  000CB8                     l40:
  2090                           
  2091                           ;flex_lcd.h: 82: }
  2092                           ;flex_lcd.h: 83: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 0; RD2 = 0;
  2093  000CB8  9E83               	bcf	3971,7,c	;volatile
  2094  000CBA  9C83               	bcf	3971,6,c	;volatile
  2095  000CBC  8A83               	bsf	3971,5,c	;volatile
  2096  000CBE  9883               	bcf	3971,4,c	;volatile
  2097  000CC0  9683               	bcf	3971,3,c	;volatile
  2098  000CC2  9483               	bcf	3971,2,c	;volatile
  2099                           
  2100                           ;flex_lcd.h: 84: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 1; RD2 = 0;
  2101  000CC4  9E83               	bcf	3971,7,c	;volatile
  2102  000CC6  9C83               	bcf	3971,6,c	;volatile
  2103  000CC8  8A83               	bsf	3971,5,c	;volatile
  2104  000CCA  9883               	bcf	3971,4,c	;volatile
  2105  000CCC  8683               	bsf	3971,3,c	;volatile
  2106  000CCE  9483               	bcf	3971,2,c	;volatile
  2107                           
  2108                           ;flex_lcd.h: 85: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2109  000CD0  0E03               	movlw	3
  2110  000CD2                     u1247:
  2111  000CD2  2EE8               	decfsz	wreg,f,c
  2112  000CD4  D7FE               	bra	u1247
  2113  000CD6  F000               	nop	
  2114                           
  2115                           ;flex_lcd.h: 86: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 0; RD2 = 0;
  2116  000CD8  9E83               	bcf	3971,7,c	;volatile
  2117  000CDA  9C83               	bcf	3971,6,c	;volatile
  2118  000CDC  8A83               	bsf	3971,5,c	;volatile
  2119  000CDE  9883               	bcf	3971,4,c	;volatile
  2120  000CE0  9683               	bcf	3971,3,c	;volatile
  2121  000CE2  9483               	bcf	3971,2,c	;volatile
  2122                           
  2123                           ;flex_lcd.h: 87: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2124  000CE4  0E0F               	movlw	15
  2125  000CE6  6E04               	movwf	??_Lcd_Init& (0+255),c
  2126  000CE8  0E48               	movlw	72
  2127  000CEA                     u1257:
  2128  000CEA  2EE8               	decfsz	wreg,f,c
  2129  000CEC  D7FE               	bra	u1257
  2130  000CEE  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  2131  000CF0  D7FC               	bra	u1257
  2132                           
  2133                           ;flex_lcd.h: 88: data = 40; Lcd_Cmd(data);
  2134  000CF2  0E28               	movlw	40
  2135  000CF4  6E05               	movwf	Lcd_Init@data,c
  2136  000CF6  5005               	movf	Lcd_Init@data,w,c
  2137  000CF8  EC0B  F007         	call	_Lcd_Cmd
  2138                           
  2139                           ;flex_lcd.h: 89: data = 16; Lcd_Cmd(data);
  2140  000CFC  0E10               	movlw	16
  2141  000CFE  6E05               	movwf	Lcd_Init@data,c
  2142  000D00  5005               	movf	Lcd_Init@data,w,c
  2143  000D02  EC0B  F007         	call	_Lcd_Cmd
  2144                           
  2145                           ;flex_lcd.h: 90: data = 1; Lcd_Cmd(data);
  2146  000D06  0E01               	movlw	1
  2147  000D08  6E05               	movwf	Lcd_Init@data,c
  2148  000D0A  5005               	movf	Lcd_Init@data,w,c
  2149  000D0C  EC0B  F007         	call	_Lcd_Cmd
  2150                           
  2151                           ;flex_lcd.h: 91: data = 15; Lcd_Cmd(data);
  2152  000D10  0E0F               	movlw	15
  2153  000D12  6E05               	movwf	Lcd_Init@data,c
  2154  000D14  5005               	movf	Lcd_Init@data,w,c
  2155  000D16  EC0B  F007         	call	_Lcd_Cmd
  2156  000D1A  0012               	return		;funcret
  2157  000D1C                     __end_of_Lcd_Init:
  2158                           	opt stack 0
  2159                           tblptru	equ	0xFF8
  2160                           tblptrh	equ	0xFF7
  2161                           tblptrl	equ	0xFF6
  2162                           tablat	equ	0xFF5
  2163                           prodh	equ	0xFF4
  2164                           prodl	equ	0xFF3
  2165                           wreg	equ	0xFE8
  2166                           indf2	equ	0xFDF
  2167                           postinc2	equ	0xFDE
  2168                           postdec2	equ	0xFDD
  2169                           fsr2h	equ	0xFDA
  2170                           fsr2l	equ	0xFD9
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function _Lcd_Cmd *****************
  2174 ;; Defined at:
  2175 ;;		line 151 in file "flex_lcd.h"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;  data            1    wreg     unsigned char 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  data            1    2[COMRAM] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2189 ;;      Params:         0       0       0       0       0       0       0       0       0
  2190 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2191 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2192 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2193 ;;Total ram usage:        3 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; This function calls:
  2196 ;;		Nothing
  2197 ;; This function is called by:
  2198 ;;		_Lcd_Init
  2199 ;;		_Lcd_Out
  2200 ;;		_Lcd_Out2
  2201 ;;		_main
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text10
  2206  000E16                     __ptext10:
  2207                           	opt stack 0
  2208  000E16                     _Lcd_Cmd:
  2209                           	opt stack 29
  2210                           
  2211                           ;incstack = 0
  2212                           ;Lcd_Cmd@data stored from wreg
  2213  000E16  6E03               	movwf	Lcd_Cmd@data,c
  2214                           
  2215                           ;flex_lcd.h: 152: RD3 = 0; RD2 = 0;
  2216  000E18  9683               	bcf	3971,3,c	;volatile
  2217  000E1A  9483               	bcf	3971,2,c	;volatile
  2218                           
  2219                           ;flex_lcd.h: 153: RD7 = (data & 0b10000000)>>7; RD6 = (data & 0b01000000)>>6;
  2220  000E1C  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  2221  000E1E  AE03               	btfss	Lcd_Cmd@data,7,c
  2222  000E20  D001               	bra	u15
  2223  000E22  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  2224  000E24                     u15:
  2225  000E24  3001               	rrcf	??_Lcd_Cmd,w,c
  2226  000E26  A0D8               	btfss	status,0,c
  2227  000E28  D002               	goto	u20
  2228  000E2A  8E83               	bsf	3971,7,c	;volatile
  2229  000E2C  D001               	goto	u35
  2230  000E2E                     u20:
  2231  000E2E  9E83               	bcf	3971,7,c	;volatile
  2232  000E30                     u35:
  2233  000E30  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2234  000E34  0E06               	movlw	6
  2235  000E36  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  2236  000E38                     u45:
  2237  000E38  90D8               	bcf	status,0,c
  2238  000E3A  3201               	rrcf	??_Lcd_Cmd,f,c
  2239  000E3C  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  2240  000E3E  D7FC               	goto	u45
  2241  000E40  3001               	rrcf	??_Lcd_Cmd,w,c
  2242  000E42  A0D8               	btfss	status,0,c
  2243  000E44  D002               	goto	u50
  2244  000E46  8C83               	bsf	3971,6,c	;volatile
  2245  000E48  D001               	goto	u65
  2246  000E4A                     u50:
  2247  000E4A  9C83               	bcf	3971,6,c	;volatile
  2248  000E4C                     u65:
  2249                           
  2250                           ;flex_lcd.h: 154: RD5 = (data & 0b00100000)>>5; RD4 = (data & 0b00010000)>>4;
  2251  000E4C  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2252  000E50  0E05               	movlw	5
  2253  000E52  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  2254  000E54                     u75:
  2255  000E54  90D8               	bcf	status,0,c
  2256  000E56  3201               	rrcf	??_Lcd_Cmd,f,c
  2257  000E58  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  2258  000E5A  D7FC               	goto	u75
  2259  000E5C  3001               	rrcf	??_Lcd_Cmd,w,c
  2260  000E5E  A0D8               	btfss	status,0,c
  2261  000E60  D002               	goto	u80
  2262  000E62  8A83               	bsf	3971,5,c	;volatile
  2263  000E64  D001               	goto	u95
  2264  000E66                     u80:
  2265  000E66  9A83               	bcf	3971,5,c	;volatile
  2266  000E68                     u95:
  2267  000E68  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2268  000E6C  3A01               	swapf	??_Lcd_Cmd,f,c
  2269  000E6E  0E0F               	movlw	15
  2270  000E70  1601               	andwf	??_Lcd_Cmd,f,c
  2271  000E72  3001               	rrcf	??_Lcd_Cmd,w,c
  2272  000E74  A0D8               	btfss	status,0,c
  2273  000E76  D002               	goto	u100
  2274  000E78  8883               	bsf	3971,4,c	;volatile
  2275  000E7A  D001               	goto	l755
  2276  000E7C                     u100:
  2277  000E7C  9883               	bcf	3971,4,c	;volatile
  2278  000E7E                     l755:
  2279                           
  2280                           ;flex_lcd.h: 155: _delay((unsigned long)((10)*(8000000/4000000.0)));
  2281  000E7E  0E06               	movlw	6
  2282  000E80                     u1267:
  2283  000E80  2EE8               	decfsz	wreg,f,c
  2284  000E82  D7FE               	bra	u1267
  2285  000E84  D000               	nop2	
  2286                           
  2287                           ;flex_lcd.h: 156: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  2288  000E86  8683               	bsf	3971,3,c	;volatile
  2289  000E88  0E03               	movlw	3
  2290  000E8A                     u1277:
  2291  000E8A  2EE8               	decfsz	wreg,f,c
  2292  000E8C  D7FE               	bra	u1277
  2293  000E8E  F000               	nop	
  2294  000E90  9683               	bcf	3971,3,c	;volatile
  2295                           
  2296                           ;flex_lcd.h: 157: RD7 = (data & 0b00001000)>>3; RD6 = (data & 0b00000100)>>2;
  2297  000E92  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2298  000E96  90D8               	bcf	status,0,c
  2299  000E98  3201               	rrcf	??_Lcd_Cmd,f,c
  2300  000E9A  90D8               	bcf	status,0,c
  2301  000E9C  3201               	rrcf	??_Lcd_Cmd,f,c
  2302  000E9E  90D8               	bcf	status,0,c
  2303  000EA0  3201               	rrcf	??_Lcd_Cmd,f,c
  2304  000EA2  3001               	rrcf	??_Lcd_Cmd,w,c
  2305  000EA4  A0D8               	btfss	status,0,c
  2306  000EA6  D002               	goto	u120
  2307  000EA8  8E83               	bsf	3971,7,c	;volatile
  2308  000EAA  D001               	goto	u135
  2309  000EAC                     u120:
  2310  000EAC  9E83               	bcf	3971,7,c	;volatile
  2311  000EAE                     u135:
  2312  000EAE  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2313  000EB2  90D8               	bcf	status,0,c
  2314  000EB4  3201               	rrcf	??_Lcd_Cmd,f,c
  2315  000EB6  90D8               	bcf	status,0,c
  2316  000EB8  3201               	rrcf	??_Lcd_Cmd,f,c
  2317  000EBA  3001               	rrcf	??_Lcd_Cmd,w,c
  2318  000EBC  A0D8               	btfss	status,0,c
  2319  000EBE  D002               	goto	u140
  2320  000EC0  8C83               	bsf	3971,6,c	;volatile
  2321  000EC2  D001               	goto	u155
  2322  000EC4                     u140:
  2323  000EC4  9C83               	bcf	3971,6,c	;volatile
  2324  000EC6                     u155:
  2325                           
  2326                           ;flex_lcd.h: 158: RD5 = (data & 0b00000010)>>1; RD4 = (data & 0b00000001);
  2327  000EC6  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2328  000ECA  90D8               	bcf	status,0,c
  2329  000ECC  3201               	rrcf	??_Lcd_Cmd,f,c
  2330  000ECE  3001               	rrcf	??_Lcd_Cmd,w,c
  2331  000ED0  A0D8               	btfss	status,0,c
  2332  000ED2  D002               	goto	u160
  2333  000ED4  8A83               	bsf	3971,5,c	;volatile
  2334  000ED6  D001               	goto	l763
  2335  000ED8                     u160:
  2336  000ED8  9A83               	bcf	3971,5,c	;volatile
  2337  000EDA                     l763:
  2338  000EDA  A003               	btfss	Lcd_Cmd@data,0,c
  2339  000EDC  D002               	goto	u180
  2340  000EDE  8883               	bsf	3971,4,c	;volatile
  2341  000EE0  D001               	goto	l765
  2342  000EE2                     u180:
  2343  000EE2  9883               	bcf	3971,4,c	;volatile
  2344  000EE4                     l765:
  2345                           
  2346                           ;flex_lcd.h: 159: _delay((unsigned long)((10)*(8000000/4000000.0)));
  2347  000EE4  0E06               	movlw	6
  2348  000EE6                     u1287:
  2349  000EE6  2EE8               	decfsz	wreg,f,c
  2350  000EE8  D7FE               	bra	u1287
  2351  000EEA  D000               	nop2	
  2352                           
  2353                           ;flex_lcd.h: 160: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  2354  000EEC  8683               	bsf	3971,3,c	;volatile
  2355  000EEE  0E03               	movlw	3
  2356  000EF0                     u1297:
  2357  000EF0  2EE8               	decfsz	wreg,f,c
  2358  000EF2  D7FE               	bra	u1297
  2359  000EF4  F000               	nop	
  2360  000EF6  9683               	bcf	3971,3,c	;volatile
  2361                           
  2362                           ;flex_lcd.h: 161: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2363  000EF8  0E0F               	movlw	15
  2364  000EFA  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  2365  000EFC  0E48               	movlw	72
  2366  000EFE                     u1307:
  2367  000EFE  2EE8               	decfsz	wreg,f,c
  2368  000F00  D7FE               	bra	u1307
  2369  000F02  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  2370  000F04  D7FC               	bra	u1307
  2371  000F06  0012               	return		;funcret
  2372  000F08                     __end_of_Lcd_Cmd:
  2373                           	opt stack 0
  2374                           tblptru	equ	0xFF8
  2375                           tblptrh	equ	0xFF7
  2376                           tblptrl	equ	0xFF6
  2377                           tablat	equ	0xFF5
  2378                           prodh	equ	0xFF4
  2379                           prodl	equ	0xFF3
  2380                           wreg	equ	0xFE8
  2381                           indf2	equ	0xFDF
  2382                           postinc2	equ	0xFDE
  2383                           postdec2	equ	0xFDD
  2384                           fsr2h	equ	0xFDA
  2385                           fsr2l	equ	0xFD9
  2386                           status	equ	0xFD8
  2387                           tblptru	equ	0xFF8
  2388                           tblptrh	equ	0xFF7
  2389                           tblptrl	equ	0xFF6
  2390                           tablat	equ	0xFF5
  2391                           prodh	equ	0xFF4
  2392                           prodl	equ	0xFF3
  2393                           wreg	equ	0xFE8
  2394                           indf2	equ	0xFDF
  2395                           postinc2	equ	0xFDE
  2396                           postdec2	equ	0xFDD
  2397                           fsr2h	equ	0xFDA
  2398                           fsr2l	equ	0xFD9
  2399                           status	equ	0xFD8
  2400                           
  2401                           	psect	rparam
  2402  0000                     tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           prodh	equ	0xFF4
  2407                           prodl	equ	0xFF3
  2408                           wreg	equ	0xFE8
  2409                           indf2	equ	0xFDF
  2410                           postinc2	equ	0xFDE
  2411                           postdec2	equ	0xFDD
  2412                           fsr2h	equ	0xFDA
  2413                           fsr2l	equ	0xFD9
  2414                           status	equ	0xFD8


Data Sizes:
    Strings     40
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     54      54
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer1(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer1(COMRAM[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_4(CODE[4]), STR_3(CODE[9]), STR_2(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    3780
                                             31 COMRAM    23    23      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                           _Lcd_Out2
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             28    22      6    1968
                                             12 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     2      3     549
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              5     2      3     805
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     210
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     36      36       1       56.8%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Oct 08 11:06:58 2021

                     l40 0CB8                       l39 0C7A                       u20 0E2E  
                     u15 0E24                       u50 0E4A                       u35 0E30  
                     u45 0E38                       u80 0E66                       u65 0E4C  
                     u75 0E54                       u95 0E68              __CFG_BOR$ON 000000  
    ___wmul@multiplicand 0003              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_LVP$ON 000000                      l540 101A                      l550 105C  
                    l763 0EDA                      l755 0E7E                      l765 0EE4  
                    l863 0C72                      l787 0DE0                      l779 0D84  
                    l789 0DEA             __CFG_CPB$OFF 000000                      _RD2 007C1A  
                    _RD3 007C1B                      u100 0E7C                      _RD4 007C1C  
                    _RD5 007C1D                      _RD6 007C1E                      _RD7 007C1F  
                    u120 0EAC                      u210 0D34                      u140 0EC4  
                    u205 0D2A                      u310 0DB2                      u135 0EAE  
                    u160 0ED8                      u240 0D50                      u225 0D36  
                    u330 0DCA                      u155 0EC6                      u235 0D3E  
                    u180 0EE2                      u325 0DB4                      u350 0DDE  
                    u270 0D6C                      u255 0D52                      u345 0DCC  
                    u265 0D5A                      u370 0DE8                      u290 0D82  
           __CFG_CPD$OFF 000000                      u285 0D6E                      wreg 000FE8  
            main@buffer1 0022             __CFG_WDT$OFF 000000                     l1201 0F7A  
                   l1203 0F80                     l1211 0FA8                     l1213 0FB0  
                   l1205 0F86                     l1221 083E                     l1143 0FE8  
                   l1127 10A2                     l1311 0A20                     l1303 09FA  
                   l1217 0FC2                     l1209 0F8E                     l1145 0FF0  
                   l1305 0A02                     l1233 086C                     l1155 1010  
                   l1147 0FF4                     l1171 1052                     l1163 1032  
                   l1251 091C                     l1227 0858                     l1181 0F18  
                   l1165 103A                     l1325 0A94                     l1317 0A3C  
                   l1261 0944                     l1229 0866                     l1191 0F48  
                   l1183 0F1E                     l1167 103E                     l1319 0A42  
                   l1263 0948                     l1239 089A                     l1327 0A9C  
                   l1177 0F0C                     l1281 098E                     l1329 0AB4  
                   l1249 08F6                     l1361 0B40                     l1345 0AF0  
                   l1195 0F5C                     l1179 0F12                     l1187 0F26  
                   l1275 0974                     l1347 0AF4                     l1189 0F40  
                   l1285 09B2                     l1199 0F74                     l1295 09DA  
                   l1287 09BA                     STR_1 081A                     STR_2 080B  
                   STR_3 0826                     STR_4 082F                     u1107 0D86  
                   u1117 0D90                     u1037 0AE2                     u1207 0C58  
                   u1127 0DEC                     u1047 0B30                     u1217 0C66  
                   u1137 0DF6                     u1057 0B5C                     u1307 0EFE  
                   u1227 0C94                     u1147 0E00                     u1067 0B7A  
                   u1237 0CAC                     u1157 0E0C                     u1077 0B96  
                   u1247 0CD2                     u1167 0C20                     u1087 0BB2  
                   u1257 0CEA                     u1177 0C2E                     u1097 0BF2  
                   u1267 0E80                     u1187 0C3C                     u1277 0E8A  
                   u1197 0C4A                     u1287 0EE6                     u1297 0EF0  
                   _main 0AC2                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000          __end_of_Lcd_Cmd 0F08  
        __end_of_Lcd_Out 0F70            __CFG_MCLRE$ON 000000             ___param_bank 000000  
             _Lcd_Chr_CP 0D1C           Lcd_Out2@buffer 0005            __CFG_PLLDIV$1 000000  
         __CFG_CCP2MX$ON 000000                    ?_main 0001          __end_of___lwdiv 1024  
        __end_of___lwmod 1066            __CFG_USBDIV$1 000000            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000          __end_of_dpowers 080B          __end_of_isdigit 10AA  
                  main@i 0036                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 0AC2           __CFG_ICPRT$OFF 000000         __end_of_Lcd_Init 0D1C  
       __end_of_Lcd_Out2 0FD2          __initialization 10AA             __end_of_main 0C02  
                 ??_main 0020            __activetblptr 000002                   _ADCON1 000FC1  
                 _OSCCON 000FD3                ??_Lcd_Cmd 0001                ??_Lcd_Out 0007  
                 _TRISD2 007CAA                   _TRISD3 007CAB                   _TRISD4 007CAC  
                 _TRISD5 007CAD                   _TRISD6 007CAE                   _TRISD7 007CAF  
         __CFG_XINST$OFF 000000              ?_Lcd_Chr_CP 0001                   ___wmul 1066  
         __CFG_STVREN$ON 000000                ??___lwdiv 0005                ??___lwmod 000C  
              ??_isdigit 0001             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_sprintf 0013  
             __accesstop 0060  __end_of__initialization 10AA          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001                ?_Lcd_Init 0001  
              ?_Lcd_Out2 0004             sprintf@width 001D      __size_of_Lcd_Chr_CP 00FA  
                ?___wmul 0001               ??_Lcd_Init 0004               ??_Lcd_Out2 0007  
        __CFG_VREGEN$OFF 000000                  _Lcd_Cmd 0E16                  _Lcd_Out 0F08  
                __Hparam 0000                  __Lparam 0000          __size_of___wmul 0026  
                ___lwdiv 0FD2                  ___lwmod 1024             __psmallconst 0800  
                __pcinit 10AA                  __ramtop 0800                  __ptext0 0AC2  
                __ptext1 0834                  __ptext2 108C                  __ptext3 1066  
                __ptext4 1024                  __ptext5 0FD2                  __ptext6 0F70  
                __ptext7 0F08                  __ptext8 0D1C                  __ptext9 0C02  
                _dpowers 0801                  _isdigit 108C                  _sprintf 0834  
   end_of_initialization 10AA            __Lmediumconst 0000             ??_Lcd_Chr_CP 0001  
              Lcd_Out2@x 0004                Lcd_Out2@y 0007                  postdec2 000FDD  
                postinc2 000FDE       __end_of_Lcd_Chr_CP 0E16           __end_of___wmul 108C  
    start_initialization 10AA            Lcd_Out@buffer 0005        __size_of_Lcd_Init 011A  
      __size_of_Lcd_Out2 0062                 ??___wmul 0005         __CFG_LPT1OSC$OFF 000000  
               ?_Lcd_Cmd 0001              sprintf@flag 001C                 ?_Lcd_Out 0004  
            sprintf@prec 0019         ___lwdiv@dividend 0001                 ?___lwdiv 0001  
               ?___lwmod 0008              __smallconst 0800                 ?_isdigit 0001  
       ___lwdiv@quotient 0005                 ?_sprintf 000D           ___wmul@product 0005  
               Lcd_Out@x 0004         __CFG_WDTPS$32768 000000                 Lcd_Out@y 0007  
           Lcd_Init@data 0005        ___wmul@multiplier 0001             Lcd_Out2@data 0008  
               _Lcd_Init 0C02                 _Lcd_Out2 0F70         __size_of_Lcd_Cmd 00F2  
       __size_of_Lcd_Out 0068                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___lwdiv 0052         __size_of___lwmod 0042              _isdigit$329 0002  
             sprintf@val 001A         __size_of_isdigit 001E           Lcd_Chr_CP@data 0003  
        ___lwdiv@divisor 0003          ___lwdiv@counter 0007                 __ptext10 0E16  
       __size_of_sprintf 028E              Lcd_Cmd@data 0003            __size_of_main 0140  
  __CFG_CPUDIV$OSC1_PLL2 000000              Lcd_Out@data 0008                 isdigit@c 0003  
              sprintf@ap 0017                sprintf@sp 000D         ___lwmod@dividend 0008  
               sprintf@c 001F                 sprintf@f 000F      __CFG_FOSC$INTOSC_HS 000000  
        ___lwmod@divisor 000A          ___lwmod@counter 000C  
