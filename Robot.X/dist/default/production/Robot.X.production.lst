

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Oct 09 23:06:57 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.41
    39                           ; Generated 25/01/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4550 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	smallconst
    74  000800                     __psmallconst:
    75                           	opt stack 0
    76  000800  00                 	db	0
    77  000801                     _dpowers:
    78                           	opt stack 0
    79  000801  0001               	dw	1
    80  000803  0000               	dw	0
    81  000805  000A               	dw	10
    82  000807  0000               	dw	0
    83  000809  0064               	dw	100
    84  00080B  0000               	dw	0
    85  00080D  03E8               	dw	1000
    86  00080F  0000               	dw	0
    87  000811  2710               	dw	10000
    88  000813  0000               	dw	0
    89  000815  86A0               	dw	34464
    90  000817  0001               	dw	1
    91  000819  4240               	dw	16960
    92  00081B  000F               	dw	15
    93  00081D  9680               	dw	38528
    94  00081F  0098               	dw	152
    95  000821  E100               	dw	57600
    96  000823  05F5               	dw	1525
    97  000825  CA00               	dw	51712
    98  000827  3B9A               	dw	15258
    99  000829                     __end_of_dpowers:
   100                           	opt stack 0
   101  000829                     __powers_:
   102                           	opt stack 0
   103  000829  00                 	db	0
   104  00082A  80                 	db	128
   105  00082B  3F                 	db	63
   106  00082C  00                 	db	0
   107  00082D  20                 	db	32
   108  00082E  41                 	db	65
   109  00082F  00                 	db	0
   110  000830  C8                 	db	200
   111  000831  42                 	db	66
   112  000832  00                 	db	0
   113  000833  7A                 	db	122
   114  000834  44                 	db	68
   115  000835  40                 	db	64
   116  000836  1C                 	db	28
   117  000837  46                 	db	70
   118  000838  50                 	db	80
   119  000839  C3                 	db	195
   120  00083A  47                 	db	71
   121  00083B  24                 	db	36
   122  00083C  74                 	db	116
   123  00083D  49                 	db	73
   124  00083E  97                 	db	151
   125  00083F  18                 	db	24
   126  000840  4B                 	db	75
   127  000841  BC                 	db	188
   128  000842  BE                 	db	190
   129  000843  4C                 	db	76
   130  000844  6B                 	db	107
   131  000845  6E                 	db	110
   132  000846  4E                 	db	78
   133  000847  03                 	db	3
   134  000848  15                 	db	21
   135  000849  50                 	db	80
   136  00084A  79                 	db	121
   137  00084B  AD                 	db	173
   138  00084C  60                 	db	96
   139  00084D  F3                 	db	243
   140  00084E  49                 	db	73
   141  00084F  71                 	db	113
   142  000850                     __end_of__powers_:
   143                           	opt stack 0
   144  000850                     __npowers_:
   145                           	opt stack 0
   146  000850  00                 	db	0
   147  000851  80                 	db	128
   148  000852  3F                 	db	63
   149  000853  CD                 	db	205
   150  000854  CC                 	db	204
   151  000855  3D                 	db	61
   152  000856  D7                 	db	215
   153  000857  23                 	db	35
   154  000858  3C                 	db	60
   155  000859  12                 	db	18
   156  00085A  83                 	db	131
   157  00085B  3A                 	db	58
   158  00085C  B7                 	db	183
   159  00085D  D1                 	db	209
   160  00085E  38                 	db	56
   161  00085F  C6                 	db	198
   162  000860  27                 	db	39
   163  000861  37                 	db	55
   164  000862  38                 	db	56
   165  000863  86                 	db	134
   166  000864  35                 	db	53
   167  000865  C0                 	db	192
   168  000866  D6                 	db	214
   169  000867  33                 	db	51
   170  000868  CC                 	db	204
   171  000869  2B                 	db	43
   172  00086A  32                 	db	50
   173  00086B  70                 	db	112
   174  00086C  89                 	db	137
   175  00086D  30                 	db	48
   176  00086E  E7                 	db	231
   177  00086F  DB                 	db	219
   178  000870  2E                 	db	46
   179  000871  E5                 	db	229
   180  000872  3C                 	db	60
   181  000873  1E                 	db	30
   182  000874  42                 	db	66
   183  000875  A2                 	db	162
   184  000876  0D                 	db	13
   185  000877                     __end_of__npowers_:
   186                           	opt stack 0
   187  0000                     _TRISB	set	3987
   188  0000                     _TRISD	set	3989
   189  0000                     _TRISA	set	3986
   190  0000                     _OSCCON	set	4051
   191  0000                     _ADRESH	set	4036
   192  0000                     _ADCON2	set	4032
   193  0000                     _ADCON0	set	4034
   194  0000                     _ADCON1	set	4033
   195  0000                     _RC0	set	31760
   196  0000                     _RA2	set	31746
   197  0000                     _TRISA2	set	31890
   198  0000                     _TRISC0	set	31904
   199  0000                     _GO_DONE	set	32273
   200  0000                     _ADON	set	32272
   201  0000                     _RD2	set	31770
   202  0000                     _RD3	set	31771
   203  0000                     _RD4	set	31772
   204  0000                     _RD5	set	31773
   205  0000                     _RD6	set	31774
   206  0000                     _RD7	set	31775
   207  0000                     _TRISD2	set	31914
   208  0000                     _TRISD3	set	31915
   209  0000                     _TRISD4	set	31916
   210  0000                     _TRISD5	set	31917
   211  0000                     _TRISD6	set	31918
   212  0000                     _TRISD7	set	31919
   213  000877                     STR_1:
   214  000877  25                 	db	37
   215  000878  32                 	db	50	;'2'
   216  000879  2E                 	db	46
   217  00087A  32                 	db	50	;'2'
   218  00087B  66                 	db	102	;'f'
   219  00087C  20                 	db	32
   220  00087D  43                 	db	67	;'C'
   221  00087E  00                 	db	0
   222  00087F                     STR_3:
   223  00087F  54                 	db	84	;'T'
   224  000880  20                 	db	32
   225  000881  4D                 	db	77	;'M'
   226  000882  65                 	db	101	;'e'
   227  000883  64                 	db	100	;'d'
   228  000884  69                 	db	105	;'i'
   229  000885  61                 	db	97	;'a'
   230  000886  00                 	db	0
   231  000887                     STR_4:
   232  000887  54                 	db	84	;'T'
   233  000888  20                 	db	32
   234  000889  42                 	db	66	;'B'
   235  00088A  61                 	db	97	;'a'
   236  00088B  6A                 	db	106	;'j'
   237  00088C  61                 	db	97	;'a'
   238  00088D  00                 	db	0
   239  00088E                     STR_2:
   240  00088E  54                 	db	84	;'T'
   241  00088F  20                 	db	32
   242  000890  41                 	db	65	;'A'
   243  000891  6C                 	db	108	;'l'
   244  000892  74                 	db	116	;'t'
   245  000893  61                 	db	97	;'a'
   246  000894  00                 	db	0
   247                           
   248                           ; #config settings
   249  000895  00                 	db	0	; dummy byte at the end
   250  0000                     
   251                           	psect	cinit
   252  0027A6                     __pcinit:
   253                           	opt stack 0
   254  0027A6                     start_initialization:
   255                           	opt stack 0
   256  0027A6                     __initialization:
   257                           	opt stack 0
   258  0027A6                     end_of_initialization:
   259                           	opt stack 0
   260  0027A6                     __end_of__initialization:
   261                           	opt stack 0
   262  0027A6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   263  0027A8  6EF8               	movwf	tblptru,c
   264  0027AA  0100               	movlb	0
   265  0027AC  EFAC  F00D         	goto	_main	;jump to C main() function
   266                           tblptru	equ	0xFF8
   267                           
   268                           	psect	cstackBANK0
   269  000060                     __pcstackBANK0:
   270                           	opt stack 0
   271  000060                     _sprintf$706:
   272                           	opt stack 0
   273                           
   274                           ; 3 bytes @ 0x0
   275  000060                     	ds	3
   276  000063                     sprintf@ap:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0x3
   280  000063                     	ds	2
   281  000065                     sprintf@val:
   282                           	opt stack 0
   283                           
   284                           ; 4 bytes @ 0x5
   285  000065                     	ds	4
   286  000069                     sprintf@flag:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x9
   290  000069                     	ds	2
   291  00006B                     sprintf@width:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0xB
   295  00006B                     	ds	2
   296  00006D                     sprintf@tmpval:
   297                           	opt stack 0
   298                           
   299                           ; 4 bytes @ 0xD
   300  00006D                     	ds	4
   301  000071                     sprintf@exp:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x11
   305  000071                     	ds	2
   306  000073                     sprintf@fval:
   307                           	opt stack 0
   308                           
   309                           ; 3 bytes @ 0x13
   310  000073                     	ds	3
   311  000076                     sprintf@prec:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x16
   315  000076                     	ds	2
   316  000078                     sprintf@c:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x18
   320  000078                     	ds	1
   321  000079                     main@temp:
   322                           	opt stack 0
   323                           
   324                           ; 20 bytes @ 0x19
   325  000079                     	ds	20
   326  00008D                     main@temperatura:
   327                           	opt stack 0
   328                           
   329                           ; 3 bytes @ 0x2D
   330  00008D                     	ds	3
   331                           tblptru	equ	0xFF8
   332                           
   333                           	psect	cstackCOMRAM
   334  000001                     __pcstackCOMRAM:
   335                           	opt stack 0
   336  000001                     ??_Lcd_Cmd:
   337  000001                     ??_Lcd_Chr_CP:
   338  000001                     ??_isdigit:
   339  000001                     ?_getCad:
   340                           	opt stack 0
   341  000001                     ?___awmod:
   342                           	opt stack 0
   343  000001                     ?___ftpack:
   344                           	opt stack 0
   345  000001                     ?___ftneg:
   346                           	opt stack 0
   347  000001                     ?__tdiv_to_l_:
   348                           	opt stack 0
   349  000001                     ?__div_to_l_:
   350                           	opt stack 0
   351  000001                     ?___lldiv:
   352                           	opt stack 0
   353  000001                     ?___llmod:
   354                           	opt stack 0
   355  000001                     ___awmod@dividend:
   356                           	opt stack 0
   357  000001                     __div_to_l_@f1:
   358                           	opt stack 0
   359  000001                     ___ftpack@arg:
   360                           	opt stack 0
   361  000001                     __tdiv_to_l_@f1:
   362                           	opt stack 0
   363  000001                     ___ftge@ff1:
   364                           	opt stack 0
   365  000001                     ___ftneg@f1:
   366                           	opt stack 0
   367  000001                     ___lldiv@dividend:
   368                           	opt stack 0
   369  000001                     ___llmod@dividend:
   370                           	opt stack 0
   371                           
   372                           ; 4 bytes @ 0x0
   373  000001                     	ds	1
   374  000002                     _isdigit$377:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x1
   378  000002                     	ds	1
   379  000003                     Lcd_Chr_CP@data:
   380                           	opt stack 0
   381  000003                     Lcd_Cmd@data:
   382                           	opt stack 0
   383  000003                     getCad@canal:
   384                           	opt stack 0
   385  000003                     isdigit@c:
   386                           	opt stack 0
   387  000003                     ___awmod@divisor:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x2
   391  000003                     	ds	1
   392  000004                     ??_Lcd_Init:
   393  000004                     Lcd_Out2@x:
   394                           	opt stack 0
   395  000004                     ___ftpack@exp:
   396                           	opt stack 0
   397  000004                     __div_to_l_@f2:
   398                           	opt stack 0
   399  000004                     __tdiv_to_l_@f2:
   400                           	opt stack 0
   401  000004                     ___ftge@ff2:
   402                           	opt stack 0
   403                           
   404                           ; 3 bytes @ 0x3
   405  000004                     	ds	1
   406  000005                     Lcd_Init@data:
   407                           	opt stack 0
   408  000005                     ___awmod@counter:
   409                           	opt stack 0
   410  000005                     ___ftpack@sign:
   411                           	opt stack 0
   412  000005                     Lcd_Out2@buffer:
   413                           	opt stack 0
   414  000005                     ___lldiv@divisor:
   415                           	opt stack 0
   416  000005                     ___llmod@divisor:
   417                           	opt stack 0
   418                           
   419                           ; 4 bytes @ 0x4
   420  000005                     	ds	1
   421  000006                     ??___ftpack:
   422  000006                     ___awmod@sign:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x5
   426  000006                     	ds	1
   427  000007                     ??__tdiv_to_l_:
   428  000007                     ??___ftge:
   429  000007                     ?___awdiv:
   430                           	opt stack 0
   431  000007                     Lcd_Out2@y:
   432                           	opt stack 0
   433  000007                     ___awdiv@dividend:
   434                           	opt stack 0
   435  000007                     __div_to_l_@quot:
   436                           	opt stack 0
   437                           
   438                           ; 4 bytes @ 0x6
   439  000007                     	ds	1
   440  000008                     Lcd_Out2@data:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x7
   444  000008                     	ds	1
   445  000009                     ?___awtoft:
   446                           	opt stack 0
   447  000009                     ?___lltoft:
   448                           	opt stack 0
   449  000009                     ___llmod@counter:
   450                           	opt stack 0
   451  000009                     ___awdiv@divisor:
   452                           	opt stack 0
   453  000009                     ___awtoft@c:
   454                           	opt stack 0
   455  000009                     ___lldiv@quotient:
   456                           	opt stack 0
   457  000009                     ___lltoft@c:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0x8
   461  000009                     	ds	1
   462  00000A                     __tdiv_to_l_@quot:
   463                           	opt stack 0
   464                           
   465                           ; 4 bytes @ 0x9
   466  00000A                     	ds	1
   467  00000B                     ___awdiv@counter:
   468                           	opt stack 0
   469  00000B                     __div_to_l_@cntr:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0xA
   473  00000B                     	ds	1
   474  00000C                     ___awdiv@sign:
   475                           	opt stack 0
   476  00000C                     ___awtoft@sign:
   477                           	opt stack 0
   478  00000C                     __div_to_l_@exp1:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0xB
   482  00000C                     	ds	1
   483  00000D                     ??___lltoft:
   484  00000D                     ___lldiv@counter:
   485                           	opt stack 0
   486  00000D                     ___awdiv@quotient:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0xC
   490  00000D                     	ds	1
   491  00000E                     __tdiv_to_l_@cntr:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0xD
   495  00000E                     	ds	1
   496  00000F                     ?___wmul:
   497                           	opt stack 0
   498  00000F                     __tdiv_to_l_@exp1:
   499                           	opt stack 0
   500  00000F                     ___wmul@multiplier:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0xE
   504  00000F                     	ds	2
   505  000011                     ___lltoft@exp:
   506                           	opt stack 0
   507  000011                     ___wmul@multiplicand:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x10
   511  000011                     	ds	2
   512  000013                     ___wmul@product:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x12
   516  000013                     	ds	2
   517  000015                     ?___ftmul:
   518                           	opt stack 0
   519  000015                     ___ftmul@f1:
   520                           	opt stack 0
   521                           
   522                           ; 3 bytes @ 0x14
   523  000015                     	ds	3
   524  000018                     ___ftmul@f2:
   525                           	opt stack 0
   526                           
   527                           ; 3 bytes @ 0x17
   528  000018                     	ds	3
   529  00001B                     ??___ftmul:
   530                           
   531                           ; 1 bytes @ 0x1A
   532  00001B                     	ds	3
   533  00001E                     ___ftmul@exp:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x1D
   537  00001E                     	ds	1
   538  00001F                     ___ftmul@f3_as_product:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x1E
   542  00001F                     	ds	3
   543  000022                     ___ftmul@cntr:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x21
   547  000022                     	ds	1
   548  000023                     ___ftmul@sign:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x22
   552  000023                     	ds	1
   553  000024                     ?_fround:
   554                           	opt stack 0
   555  000024                     ?_scale:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x23
   559  000024                     	ds	3
   560  000027                     _fround$704:
   561                           	opt stack 0
   562  000027                     _scale$705:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x26
   566  000027                     	ds	3
   567  00002A                     scale@scl:
   568                           	opt stack 0
   569  00002A                     _fround$703:
   570                           	opt stack 0
   571                           
   572                           ; 3 bytes @ 0x29
   573  00002A                     	ds	1
   574  00002B                     ?___fttol:
   575                           	opt stack 0
   576  00002B                     ___fttol@f1:
   577                           	opt stack 0
   578                           
   579                           ; 3 bytes @ 0x2A
   580  00002B                     	ds	2
   581  00002D                     fround@prec:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x2C
   585  00002D                     	ds	1
   586  00002E                     ?___ftadd:
   587                           	opt stack 0
   588  00002E                     ___ftadd@f1:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x2D
   592  00002E                     	ds	1
   593  00002F                     ??___fttol:
   594                           
   595                           ; 1 bytes @ 0x2E
   596  00002F                     	ds	2
   597  000031                     ___ftadd@f2:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x30
   601  000031                     	ds	3
   602  000034                     ??___ftadd:
   603  000034                     ___fttol@sign1:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x33
   607  000034                     	ds	1
   608  000035                     ___fttol@lval:
   609                           	opt stack 0
   610                           
   611                           ; 4 bytes @ 0x34
   612  000035                     	ds	2
   613  000037                     ___ftadd@sign:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x36
   617  000037                     	ds	1
   618  000038                     ___ftadd@exp2:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x37
   622  000038                     	ds	1
   623  000039                     ___ftadd@exp1:
   624                           	opt stack 0
   625  000039                     ___fttol@exp1:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x38
   629  000039                     	ds	1
   630  00003A                     ?___ftsub:
   631                           	opt stack 0
   632  00003A                     ___ftsub@f1:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x39
   636  00003A                     	ds	3
   637  00003D                     ___ftsub@f2:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0x3C
   641  00003D                     	ds	3
   642  000040                     ?_sprintf:
   643                           	opt stack 0
   644  000040                     sprintf@sp:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x3F
   648  000040                     	ds	2
   649  000042                     sprintf@f:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x41
   653  000042                     	ds	5
   654  000047                     ??_sprintf:
   655                           
   656                           ; 1 bytes @ 0x46
   657  000047                     	ds	6
   658  00004D                     ??_main:
   659                           
   660                           ; 1 bytes @ 0x4C
   661  00004D                     	ds	2
   662                           tblptru	equ	0xFF8
   663                           
   664 ;;
   665 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   666 ;;
   667 ;; *************** function _main *****************
   668 ;; Defined at:
   669 ;;		line 33 in file "Robot.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  temp           20   25[BANK0 ] unsigned char [20]
   674 ;;  temperatura     3   45[BANK0 ] float 
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   684 ;;      Params:         0       0       0       0       0       0       0       0       0
   685 ;;      Locals:         0      23       0       0       0       0       0       0       0
   686 ;;      Temps:          2       0       0       0       0       0       0       0       0
   687 ;;      Totals:         2      23       0       0       0       0       0       0       0
   688 ;;Total ram usage:       25 bytes
   689 ;; Hardware stack levels required when called:    4
   690 ;; This function calls:
   691 ;;		_Lcd_Cmd
   692 ;;		_Lcd_Init
   693 ;;		_Lcd_Out2
   694 ;;		___awtoft
   695 ;;		___ftge
   696 ;;		___ftmul
   697 ;;		_getCad
   698 ;;		_sprintf
   699 ;; This function is called by:
   700 ;;		Startup code after reset
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           	psect	text0
   705  001B58                     __ptext0:
   706                           	opt stack 0
   707  001B58                     _main:
   708                           	opt stack 27
   709                           
   710                           ;Robot.c: 34: TRISC0 = 0;
   711                           
   712                           ;incstack = 0
   713  001B58  9094               	bcf	3988,0,c	;volatile
   714                           
   715                           ;Robot.c: 35: TRISA2 = 1;
   716  001B5A  8492               	bsf	3986,2,c	;volatile
   717                           
   718                           ;Robot.c: 36: OSCCON = 0b01110010;
   719  001B5C  0E72               	movlw	114
   720  001B5E  6ED3               	movwf	4051,c	;volatile
   721                           
   722                           ;Robot.c: 37: float temperatura;
   723                           ;Robot.c: 39: TRISA = 0xff;
   724  001B60  6892               	setf	3986,c	;volatile
   725                           
   726                           ;Robot.c: 40: TRISD = 0;
   727  001B62  0E00               	movlw	0
   728  001B64  6E95               	movwf	3989,c	;volatile
   729                           
   730                           ;Robot.c: 41: TRISB = 0x00;
   731  001B66  0E00               	movlw	0
   732  001B68  6E93               	movwf	3987,c	;volatile
   733                           
   734                           ;Robot.c: 42: char temp[20];
   735                           ;Robot.c: 44: Lcd_Init();
   736  001B6A  ECD6  F00E         	call	_Lcd_Init	;wreg free
   737                           
   738                           ;Robot.c: 45: Lcd_Cmd(1);
   739  001B6E  0E01               	movlw	1
   740  001B70  ECD4  F010         	call	_Lcd_Cmd
   741                           
   742                           ;Robot.c: 46: Lcd_Cmd(12);
   743  001B74  0E0C               	movlw	12
   744  001B76  ECD4  F010         	call	_Lcd_Cmd
   745  001B7A                     l2932:
   746                           
   747                           ;Robot.c: 51: temperatura = (getCad(0)*0.02*100);
   748  001B7A  0E00               	movlw	0
   749  001B7C  EC9F  F013         	call	_getCad
   750  001B80  C001  F009         	movff	?_getCad,___awtoft@c
   751  001B84  C002  F00A         	movff	?_getCad+1,___awtoft@c+1
   752  001B88  EC70  F013         	call	___awtoft	;wreg free
   753  001B8C  C009  F015         	movff	?___awtoft,___ftmul@f1
   754  001B90  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
   755  001B94  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
   756  001B98  0E00               	movlw	0
   757  001B9A  6E18               	movwf	___ftmul@f2,c
   758  001B9C  0E00               	movlw	0
   759  001B9E  6E19               	movwf	___ftmul@f2+1,c
   760  001BA0  0E40               	movlw	64
   761  001BA2  6E1A               	movwf	___ftmul@f2+2,c
   762  001BA4  ECE0  F00F         	call	___ftmul	;wreg free
   763  001BA8  C015  F08D         	movff	?___ftmul,main@temperatura
   764  001BAC  C016  F08E         	movff	?___ftmul+1,main@temperatura+1
   765  001BB0  C017  F08F         	movff	?___ftmul+2,main@temperatura+2
   766                           
   767                           ;Robot.c: 52: sprintf(temp, "%2.2f C", temperatura);
   768  001BB4  0E79               	movlw	low main@temp
   769  001BB6  6E40               	movwf	sprintf@sp,c
   770  001BB8  0E00               	movlw	high main@temp
   771  001BBA  6E41               	movwf	sprintf@sp+1,c
   772  001BBC  0E77               	movlw	low STR_1
   773  001BBE  6E42               	movwf	sprintf@f,c
   774  001BC0  0E08               	movlw	high STR_1
   775  001BC2  6E43               	movwf	sprintf@f+1,c
   776  001BC4  C08D  F044         	movff	main@temperatura,?_sprintf+4
   777  001BC8  C08E  F045         	movff	main@temperatura+1,?_sprintf+5
   778  001BCC  C08F  F046         	movff	main@temperatura+2,?_sprintf+6
   779  001BD0  EC4B  F004         	call	_sprintf	;wreg free
   780                           
   781                           ;Robot.c: 53: Lcd_Out2(1, 4, temp);
   782  001BD4  0E04               	movlw	4
   783  001BD6  6E04               	movwf	Lcd_Out2@x,c
   784  001BD8  0E79               	movlw	low main@temp
   785  001BDA  6E05               	movwf	Lcd_Out2@buffer,c
   786  001BDC  0E00               	movlw	high main@temp
   787  001BDE  6E06               	movwf	Lcd_Out2@buffer+1,c
   788  001BE0  0E01               	movlw	1
   789  001BE2  ECEC  F011         	call	_Lcd_Out2
   790                           
   791                           ;Robot.c: 54: _delay((unsigned long)((200)*(8000000/4000.0)));
   792  001BE6  0E03               	movlw	3
   793  001BE8  6E4E               	movwf	(??_main+1)& (0+255),c
   794  001BEA  0E08               	movlw	8
   795  001BEC  6E4D               	movwf	??_main& (0+255),c
   796  001BEE  0E77               	movlw	119
   797  001BF0                     u3717:
   798  001BF0  2EE8               	decfsz	wreg,f,c
   799  001BF2  D7FE               	bra	u3717
   800  001BF4  2E4D               	decfsz	??_main& (0+255),f,c
   801  001BF6  D7FC               	bra	u3717
   802  001BF8  2E4E               	decfsz	(??_main+1)& (0+255),f,c
   803  001BFA  D7FA               	bra	u3717
   804  001BFC  F000               	nop	
   805                           
   806                           ;Robot.c: 55: if(temperatura>100){
   807  001BFE  0E00               	movlw	0
   808  001C00  6E01               	movwf	___ftge@ff1,c
   809  001C02  0EC8               	movlw	200
   810  001C04  6E02               	movwf	___ftge@ff1+1,c
   811  001C06  0E42               	movlw	66
   812  001C08  6E03               	movwf	___ftge@ff1+2,c
   813  001C0A  C08D  F004         	movff	main@temperatura,___ftge@ff2
   814  001C0E  C08E  F005         	movff	main@temperatura+1,___ftge@ff2+1
   815  001C12  C08F  F006         	movff	main@temperatura+2,___ftge@ff2+2
   816  001C16  ECA4  F011         	call	___ftge	;wreg free
   817  001C1A  B0D8               	btfsc	status,0,c
   818  001C1C  D00A               	goto	l2944
   819                           
   820                           ;Robot.c: 56: Lcd_Out2(2, 4, "T Alta");
   821  001C1E  0E04               	movlw	4
   822  001C20  6E04               	movwf	Lcd_Out2@x,c
   823  001C22  0E8E               	movlw	low STR_2
   824  001C24  6E05               	movwf	Lcd_Out2@buffer,c
   825  001C26  0E08               	movlw	high STR_2
   826  001C28  6E06               	movwf	Lcd_Out2@buffer+1,c
   827  001C2A  0E02               	movlw	2
   828  001C2C  ECEC  F011         	call	_Lcd_Out2
   829                           
   830                           ;Robot.c: 57: }
   831  001C30  D023               	goto	l2950
   832  001C32                     l2944:
   833                           
   834                           ;Robot.c: 58: else{
   835                           ;Robot.c: 59: if(temperatura>30){
   836  001C32  0E00               	movlw	0
   837  001C34  6E01               	movwf	___ftge@ff1,c
   838  001C36  0EF0               	movlw	240
   839  001C38  6E02               	movwf	___ftge@ff1+1,c
   840  001C3A  0E41               	movlw	65
   841  001C3C  6E03               	movwf	___ftge@ff1+2,c
   842  001C3E  C08D  F004         	movff	main@temperatura,___ftge@ff2
   843  001C42  C08E  F005         	movff	main@temperatura+1,___ftge@ff2+1
   844  001C46  C08F  F006         	movff	main@temperatura+2,___ftge@ff2+2
   845  001C4A  ECA4  F011         	call	___ftge	;wreg free
   846  001C4E  B0D8               	btfsc	status,0,c
   847  001C50  D00A               	goto	l2948
   848                           
   849                           ;Robot.c: 60: Lcd_Out2(2, 4, "T Media");
   850  001C52  0E04               	movlw	4
   851  001C54  6E04               	movwf	Lcd_Out2@x,c
   852  001C56  0E7F               	movlw	low STR_3
   853  001C58  6E05               	movwf	Lcd_Out2@buffer,c
   854  001C5A  0E08               	movlw	high STR_3
   855  001C5C  6E06               	movwf	Lcd_Out2@buffer+1,c
   856  001C5E  0E02               	movlw	2
   857  001C60  ECEC  F011         	call	_Lcd_Out2
   858                           
   859                           ;Robot.c: 61: }
   860  001C64  D009               	goto	l2950
   861  001C66                     l2948:
   862                           
   863                           ;Robot.c: 62: else{
   864                           ;Robot.c: 63: Lcd_Out2(2, 4, "T Baja");
   865  001C66  0E04               	movlw	4
   866  001C68  6E04               	movwf	Lcd_Out2@x,c
   867  001C6A  0E87               	movlw	low STR_4
   868  001C6C  6E05               	movwf	Lcd_Out2@buffer,c
   869  001C6E  0E08               	movlw	high STR_4
   870  001C70  6E06               	movwf	Lcd_Out2@buffer+1,c
   871  001C72  0E02               	movlw	2
   872  001C74  ECEC  F011         	call	_Lcd_Out2
   873  001C78                     l2950:
   874                           
   875                           ;Robot.c: 64: }
   876                           ;Robot.c: 65: }
   877                           ;Robot.c: 66: if(RA2 == 1){
   878  001C78  A480               	btfss	3968,2,c	;volatile
   879  001C7A  D002               	goto	l111
   880                           
   881                           ;Robot.c: 67: RC0 = 1;
   882  001C7C  8082               	bsf	3970,0,c	;volatile
   883                           
   884                           ;Robot.c: 68: }
   885  001C7E  D77D               	goto	l2932
   886  001C80                     l111:
   887                           
   888                           ;Robot.c: 69: else{
   889                           ;Robot.c: 70: RC0 = 0;
   890  001C80  9082               	bcf	3970,0,c	;volatile
   891  001C82  D77B               	goto	l2932
   892  001C84                     __end_of_main:
   893                           	opt stack 0
   894                           tblptru	equ	0xFF8
   895                           wreg	equ	0xFE8
   896                           status	equ	0xFD8
   897                           
   898 ;; *************** function _sprintf *****************
   899 ;; Defined at:
   900 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  sp              2   63[COMRAM] PTR unsigned char 
   903 ;;		 -> main@temp(20), 
   904 ;;  f               2   65[COMRAM] PTR const unsigned char 
   905 ;;		 -> STR_1(8), 
   906 ;; Auto vars:     Size  Location     Type
   907 ;;  tmpval          4   13[BANK0 ] struct .
   908 ;;  val             4    5[BANK0 ] unsigned long 
   909 ;;  fval            3   19[BANK0 ] unsigned long 
   910 ;;  cp              3    0        PTR const unsigned char 
   911 ;;  prec            2   22[BANK0 ] int 
   912 ;;  exp             2   17[BANK0 ] int 
   913 ;;  width           2   11[BANK0 ] int 
   914 ;;  flag            2    9[BANK0 ] unsigned short 
   915 ;;  ap              2    3[BANK0 ] PTR void [1]
   916 ;;		 -> ?_sprintf(2), 
   917 ;;  len             2    0        unsigned int 
   918 ;;  c               1   24[BANK0 ] char 
   919 ;;  d               1    0        unsigned char 
   920 ;; Return value:  Size  Location     Type
   921 ;;                  2   63[COMRAM] int 
   922 ;; Registers used:
   923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   929 ;;      Params:         7       0       0       0       0       0       0       0       0
   930 ;;      Locals:         0      25       0       0       0       0       0       0       0
   931 ;;      Temps:          6       0       0       0       0       0       0       0       0
   932 ;;      Totals:        13      25       0       0       0       0       0       0       0
   933 ;;Total ram usage:       38 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    3
   936 ;; This function calls:
   937 ;;		___awdiv
   938 ;;		___ftadd
   939 ;;		___ftge
   940 ;;		___ftmul
   941 ;;		___ftneg
   942 ;;		___ftsub
   943 ;;		___fttol
   944 ;;		___lldiv
   945 ;;		___llmod
   946 ;;		___lltoft
   947 ;;		___wmul
   948 ;;		__div_to_l_
   949 ;;		__tdiv_to_l_
   950 ;;		_fround
   951 ;;		_isdigit
   952 ;;		_scale
   953 ;; This function is called by:
   954 ;;		_main
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text1
   959  000896                     __ptext1:
   960                           	opt stack 0
   961  000896                     _sprintf:
   962                           	opt stack 27
   963                           
   964                           ;doprnt.c: 494: va_list ap;
   965                           ;doprnt.c: 499: signed char c;
   966                           ;doprnt.c: 501: int width;
   967                           ;doprnt.c: 504: int prec;
   968                           ;doprnt.c: 508: unsigned short flag;
   969                           ;doprnt.c: 515: char d;
   970                           ;doprnt.c: 516: double fval;
   971                           ;doprnt.c: 517: int exp;
   972                           ;doprnt.c: 523: union {
   973                           ;doprnt.c: 524: unsigned long vd;
   974                           ;doprnt.c: 525: double integ;
   975                           ;doprnt.c: 526: } tmpval;
   976                           ;doprnt.c: 528: unsigned long val;
   977                           ;doprnt.c: 529: unsigned len;
   978                           ;doprnt.c: 530: const char * cp;
   979                           ;doprnt.c: 533: *ap = __va_start();
   980                           
   981                           ;incstack = 0
   982  000896  0E44               	movlw	low (?_sprintf+4)
   983  000898  0100               	movlb	0	; () banked
   984  00089A  6F63               	movwf	sprintf@ap& (0+255),b
   985  00089C  0E00               	movlw	high (?_sprintf+4)
   986  00089E  0100               	movlb	0	; () banked
   987  0008A0  6F64               	movwf	(sprintf@ap+1)& (0+255),b
   988                           
   989                           ;doprnt.c: 536: while(c = *f++) {
   990  0008A2  EF0D  F009         	goto	l2880
   991  0008A6                     l2626:
   992                           
   993                           ; BSR set to: 0
   994                           ;doprnt.c: 538: if(c != '%')
   995  0008A6  0E25               	movlw	37
   996  0008A8  0100               	movlb	0	; () banked
   997  0008AA  1978               	xorwf	sprintf@c& (0+255),w,b
   998  0008AC  B4D8               	btfsc	status,2,c
   999  0008AE  D008               	goto	l2632
  1000                           
  1001                           ; BSR set to: 0
  1002                           ;doprnt.c: 540: {
  1003                           ;doprnt.c: 541: ((*sp++ = (c)));
  1004  0008B0  C040  FFD9         	movff	sprintf@sp,fsr2l
  1005  0008B4  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1006  0008B8  C078  FFDF         	movff	sprintf@c,indf2
  1007  0008BC  EF0B  F009         	goto	l2878
  1008  0008C0                     l2632:
  1009                           
  1010                           ; BSR set to: 0
  1011                           ;doprnt.c: 543: }
  1012                           ;doprnt.c: 546: width = 0;
  1013  0008C0  0E00               	movlw	0
  1014  0008C2  0100               	movlb	0	; () banked
  1015  0008C4  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1016  0008C6  0E00               	movlw	0
  1017  0008C8  6F6B               	movwf	sprintf@width& (0+255),b
  1018                           
  1019                           ;doprnt.c: 548: flag = 0;
  1020  0008CA  0E00               	movlw	0
  1021  0008CC  0100               	movlb	0	; () banked
  1022  0008CE  6F6A               	movwf	(sprintf@flag+1)& (0+255),b
  1023  0008D0  0E00               	movlw	0
  1024  0008D2  6F69               	movwf	sprintf@flag& (0+255),b
  1025                           
  1026                           ; BSR set to: 0
  1027                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1028  0008D4  C042  FFF6         	movff	sprintf@f,tblptrl
  1029  0008D8  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1030  0008DC                     	if	0	;tblptru may be non-zero
  1031  0008DC                     	endif
  1032  0008DC                     	if	0	;tblptru may be non-zero
  1033  0008DC                     	endif
  1034  0008DC  0008               	tblrd		*
  1035  0008DE  50F5               	movf	tablat,w,c
  1036  0008E0  ECC4  F013         	call	_isdigit
  1037  0008E4  A0D8               	btfss	status,0,c
  1038  0008E6  D035               	goto	l2646
  1039                           
  1040                           ;doprnt.c: 598: width = 0;
  1041  0008E8  0E00               	movlw	0
  1042  0008EA  0100               	movlb	0	; () banked
  1043  0008EC  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1044  0008EE  0E00               	movlw	0
  1045  0008F0  6F6B               	movwf	sprintf@width& (0+255),b
  1046  0008F2                     l2638:
  1047                           
  1048                           ;doprnt.c: 600: width *= 10;
  1049  0008F2  C06B  F00F         	movff	sprintf@width,___wmul@multiplier
  1050  0008F6  C06C  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  1051  0008FA  0E00               	movlw	0
  1052  0008FC  6E12               	movwf	___wmul@multiplicand+1,c
  1053  0008FE  0E0A               	movlw	10
  1054  000900  6E11               	movwf	___wmul@multiplicand,c
  1055  000902  EC8C  F013         	call	___wmul	;wreg free
  1056  000906  C00F  F06B         	movff	?___wmul,sprintf@width
  1057  00090A  C010  F06C         	movff	?___wmul+1,sprintf@width+1
  1058                           
  1059                           ;doprnt.c: 601: width += *f++ - '0';
  1060  00090E  0ED0               	movlw	208
  1061  000910  6E47               	movwf	??_sprintf& (0+255),c
  1062  000912  0EFF               	movlw	255
  1063  000914  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1064  000916  C042  FFF6         	movff	sprintf@f,tblptrl
  1065  00091A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1066  00091E                     	if	0	;tblptru may be non-zero
  1067  00091E                     	endif
  1068  00091E                     	if	0	;tblptru may be non-zero
  1069  00091E                     	endif
  1070  00091E  0008               	tblrd		*
  1071  000920  50F5               	movf	tablat,w,c
  1072  000922  6E49               	movwf	(??_sprintf+2)& (0+255),c
  1073  000924  6A4A               	clrf	(??_sprintf+3)& (0+255),c
  1074  000926  5047               	movf	??_sprintf,w,c
  1075  000928  2649               	addwf	??_sprintf+2,f,c
  1076  00092A  5048               	movf	??_sprintf+1,w,c
  1077  00092C  224A               	addwfc	??_sprintf+3,f,c
  1078  00092E  5049               	movf	??_sprintf+2,w,c
  1079  000930  0100               	movlb	0	; () banked
  1080  000932  276B               	addwf	sprintf@width& (0+255),f,b
  1081  000934  504A               	movf	??_sprintf+3,w,c
  1082  000936  0100               	movlb	0	; () banked
  1083  000938  236C               	addwfc	(sprintf@width+1)& (0+255),f,b
  1084                           
  1085                           ; BSR set to: 0
  1086  00093A  4A42               	infsnz	sprintf@f,f,c
  1087  00093C  2A43               	incf	sprintf@f+1,f,c
  1088                           
  1089                           ; BSR set to: 0
  1090                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1091  00093E  C042  FFF6         	movff	sprintf@f,tblptrl
  1092  000942  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1093  000946                     	if	0	;tblptru may be non-zero
  1094  000946                     	endif
  1095  000946                     	if	0	;tblptru may be non-zero
  1096  000946                     	endif
  1097  000946  0008               	tblrd		*
  1098  000948  50F5               	movf	tablat,w,c
  1099  00094A  ECC4  F013         	call	_isdigit
  1100  00094E  B0D8               	btfsc	status,0,c
  1101  000950  D7D0               	goto	l2638
  1102  000952                     l2646:
  1103                           
  1104                           ;doprnt.c: 608: }
  1105                           ;doprnt.c: 611: if(*f == '.') {
  1106  000952  C042  FFF6         	movff	sprintf@f,tblptrl
  1107  000956  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1108  00095A                     	if	0	;tblptru may be non-zero
  1109  00095A                     	endif
  1110  00095A                     	if	0	;tblptru may be non-zero
  1111  00095A                     	endif
  1112  00095A  0008               	tblrd		*
  1113  00095C  50F5               	movf	tablat,w,c
  1114  00095E  0A2E               	xorlw	46
  1115  000960  A4D8               	btfss	status,2,c
  1116  000962  D032               	goto	l2658
  1117                           
  1118                           ;doprnt.c: 612: flag |= 0x4000;
  1119  000964  0100               	movlb	0	; () banked
  1120  000966  8D6A               	bsf	(sprintf@flag+1)& (0+255),6,b
  1121                           
  1122                           ;doprnt.c: 613: f++;
  1123  000968  4A42               	infsnz	sprintf@f,f,c
  1124  00096A  2A43               	incf	sprintf@f+1,f,c
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;doprnt.c: 620: {
  1128                           ;doprnt.c: 621: prec = 0;
  1129  00096C  0E00               	movlw	0
  1130  00096E  0100               	movlb	0	; () banked
  1131  000970  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1132  000972  0E00               	movlw	0
  1133  000974  6F76               	movwf	sprintf@prec& (0+255),b
  1134                           
  1135                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1136  000976  D01D               	goto	l2656
  1137  000978                     l2652:
  1138                           
  1139                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1140  000978  C076  F00F         	movff	sprintf@prec,___wmul@multiplier
  1141  00097C  C077  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1142  000980  0E00               	movlw	0
  1143  000982  6E12               	movwf	___wmul@multiplicand+1,c
  1144  000984  0E0A               	movlw	10
  1145  000986  6E11               	movwf	___wmul@multiplicand,c
  1146  000988  EC8C  F013         	call	___wmul	;wreg free
  1147  00098C  C042  FFF6         	movff	sprintf@f,tblptrl
  1148  000990  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1149  000994                     	if	0	;tblptru may be non-zero
  1150  000994                     	endif
  1151  000994                     	if	0	;tblptru may be non-zero
  1152  000994                     	endif
  1153  000994  0008               	tblrd		*
  1154  000996  50F5               	movf	tablat,w,c
  1155  000998  260F               	addwf	?___wmul,f,c
  1156  00099A  0E00               	movlw	0
  1157  00099C  2210               	addwfc	?___wmul+1,f,c
  1158  00099E  0ED0               	movlw	208
  1159  0009A0  240F               	addwf	?___wmul,w,c
  1160  0009A2  0100               	movlb	0	; () banked
  1161  0009A4  6F76               	movwf	sprintf@prec& (0+255),b
  1162  0009A6  0EFF               	movlw	255
  1163  0009A8  2010               	addwfc	?___wmul+1,w,c
  1164  0009AA  0100               	movlb	0	; () banked
  1165  0009AC  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1166                           
  1167                           ; BSR set to: 0
  1168  0009AE  4A42               	infsnz	sprintf@f,f,c
  1169  0009B0  2A43               	incf	sprintf@f+1,f,c
  1170  0009B2                     l2656:
  1171                           
  1172                           ; BSR set to: 0
  1173  0009B2  C042  FFF6         	movff	sprintf@f,tblptrl
  1174  0009B6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1175  0009BA                     	if	0	;tblptru may be non-zero
  1176  0009BA                     	endif
  1177  0009BA                     	if	0	;tblptru may be non-zero
  1178  0009BA                     	endif
  1179  0009BA  0008               	tblrd		*
  1180  0009BC  50F5               	movf	tablat,w,c
  1181  0009BE  ECC4  F013         	call	_isdigit
  1182  0009C2  A0D8               	btfss	status,0,c
  1183  0009C4  D00C               	goto	l2666
  1184  0009C6  D7D8               	goto	l2652
  1185  0009C8                     l2658:
  1186                           
  1187                           ;doprnt.c: 626: prec = 0;
  1188  0009C8  0E00               	movlw	0
  1189  0009CA  0100               	movlb	0	; () banked
  1190  0009CC  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1191  0009CE  0E00               	movlw	0
  1192  0009D0  6F76               	movwf	sprintf@prec& (0+255),b
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;doprnt.c: 628: flag |= 0x1000;
  1196  0009D2  0100               	movlb	0	; () banked
  1197  0009D4  896A               	bsf	(sprintf@flag+1)& (0+255),4,b
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;doprnt.c: 630: }
  1201                           ;doprnt.c: 635: switch(c = *f++) {
  1202  0009D6  D003               	goto	l2666
  1203  0009D8                     l2662:
  1204                           
  1205                           ; BSR set to: 0
  1206                           ;doprnt.c: 663: flag |= 0x400;
  1207  0009D8  0100               	movlb	0	; () banked
  1208  0009DA  856A               	bsf	(sprintf@flag+1)& (0+255),2,b
  1209                           
  1210                           ;doprnt.c: 664: break;
  1211  0009DC  D014               	goto	l2668
  1212  0009DE                     l2666:
  1213  0009DE  C042  FFF6         	movff	sprintf@f,tblptrl
  1214  0009E2  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1215  0009E6  4A42               	infsnz	sprintf@f,f,c
  1216  0009E8  2A43               	incf	sprintf@f+1,f,c
  1217  0009EA                     	if	0	;tblptru may be non-zero
  1218  0009EA                     	endif
  1219  0009EA                     	if	0	;tblptru may be non-zero
  1220  0009EA                     	endif
  1221  0009EA  0008               	tblrd		*
  1222  0009EC  CFF5 F078          	movff	tablat,sprintf@c
  1223  0009F0  0100               	movlb	0	; () banked
  1224  0009F2  5178               	movf	sprintf@c& (0+255),w,b
  1225                           
  1226                           ; Switch size 1, requested type "space"
  1227                           ; Number of cases is 2, Range of values is 0 to 102
  1228                           ; switch strategies available:
  1229                           ; Name         Instructions Cycles
  1230                           ; simple_byte            7     4 (average)
  1231                           ;	Chosen strategy is simple_byte
  1232  0009F4  0A00               	xorlw	0	; case 0
  1233  0009F6  B4D8               	btfsc	status,2,c
  1234  0009F8  EF1B  F009         	goto	l2882
  1235  0009FC  0A66               	xorlw	102	; case 102
  1236  0009FE  B4D8               	btfsc	status,2,c
  1237  000A00  D7EB               	goto	l2662
  1238  000A02  EF0D  F009         	goto	l2880
  1239  000A06                     l2668:
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;doprnt.c: 825: if(flag & (0x700)) {
  1243  000A06  0E07               	movlw	7
  1244  000A08  0100               	movlb	0	; () banked
  1245  000A0A  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  1246  000A0C  B4D8               	btfsc	status,2,c
  1247  000A0E  D34A               	goto	l2832
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;doprnt.c: 827: if(flag & 0x1000)
  1251  000A10  0100               	movlb	0	; () banked
  1252  000A12  A96A               	btfss	(sprintf@flag+1)& (0+255),4,b
  1253  000A14  D005               	goto	l2674
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;doprnt.c: 829: prec = 6;
  1257  000A16  0E00               	movlw	0
  1258  000A18  0100               	movlb	0	; () banked
  1259  000A1A  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1260  000A1C  0E06               	movlw	6
  1261  000A1E  6F76               	movwf	sprintf@prec& (0+255),b
  1262  000A20                     l2674:
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1266  000A20  C063  FFD9         	movff	sprintf@ap,fsr2l
  1267  000A24  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1268  000A28  CFDE F073          	movff	postinc2,sprintf@fval
  1269  000A2C  CFDE F074          	movff	postinc2,sprintf@fval+1
  1270  000A30  CFDD F075          	movff	postdec2,sprintf@fval+2
  1271                           
  1272                           ; BSR set to: 0
  1273  000A34  0E03               	movlw	3
  1274  000A36  0100               	movlb	0	; () banked
  1275  000A38  2763               	addwf	sprintf@ap& (0+255),f,b
  1276  000A3A  0E00               	movlw	0
  1277  000A3C  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;doprnt.c: 831: if(fval < 0.0) {
  1281  000A3E  0100               	movlb	0	; () banked
  1282  000A40  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1283  000A42  D011               	goto	l2684
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;doprnt.c: 832: fval = -fval;
  1287  000A44  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1288  000A48  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1289  000A4C  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1290  000A50  ECB2  F013         	call	___ftneg	;wreg free
  1291  000A54  C001  F073         	movff	?___ftneg,sprintf@fval
  1292  000A58  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1293  000A5C  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1294                           
  1295                           ;doprnt.c: 833: flag |= 0x03;
  1296  000A60  0E03               	movlw	3
  1297  000A62  0100               	movlb	0	; () banked
  1298  000A64  1369               	iorwf	sprintf@flag& (0+255),f,b
  1299  000A66                     l2684:
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;doprnt.c: 834: }
  1303                           ;doprnt.c: 835: exp = 0;
  1304  000A66  0E00               	movlw	0
  1305  000A68  0100               	movlb	0	; () banked
  1306  000A6A  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  1307  000A6C  0E00               	movlw	0
  1308  000A6E  6F71               	movwf	sprintf@exp& (0+255),b
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;doprnt.c: 836: if( fval!=0) {
  1312  000A70  0100               	movlb	0	; () banked
  1313  000A72  5173               	movf	sprintf@fval& (0+255),w,b
  1314  000A74  0100               	movlb	0	; () banked
  1315  000A76  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1316  000A78  0100               	movlb	0	; () banked
  1317  000A7A  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1318  000A7C  B4D8               	btfsc	status,2,c
  1319  000A7E  D08B               	goto	l2712
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1323  000A80  0E82               	movlw	130
  1324  000A82  6E47               	movwf	??_sprintf& (0+255),c
  1325  000A84  0EFF               	movlw	255
  1326  000A86  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1327  000A88  C073  F049         	movff	sprintf@fval,??_sprintf+2
  1328  000A8C  C074  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1329  000A90  C075  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1330  000A94  C076  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1331  000A98  0E10               	movlw	16
  1332  000A9A  D005               	goto	u3300
  1333  000A9C                     u3305:
  1334  000A9C  90D8               	bcf	status,0,c
  1335  000A9E  324C               	rrcf	??_sprintf+5,f,c
  1336  000AA0  324B               	rrcf	??_sprintf+4,f,c
  1337  000AA2  324A               	rrcf	??_sprintf+3,f,c
  1338  000AA4  3249               	rrcf	??_sprintf+2,f,c
  1339  000AA6                     u3300:
  1340  000AA6  2EE8               	decfsz	wreg,f,c
  1341  000AA8  D7F9               	goto	u3305
  1342  000AAA  5049               	movf	??_sprintf+2,w,c
  1343  000AAC  2447               	addwf	??_sprintf,w,c
  1344  000AAE  0100               	movlb	0	; () banked
  1345  000AB0  6F71               	movwf	sprintf@exp& (0+255),b
  1346  000AB2  0E00               	movlw	0
  1347  000AB4  2048               	addwfc	??_sprintf+1,w,c
  1348  000AB6  0100               	movlb	0	; () banked
  1349  000AB8  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;doprnt.c: 838: exp--;
  1353  000ABA  0100               	movlb	0	; () banked
  1354  000ABC  0771               	decf	sprintf@exp& (0+255),f,b
  1355  000ABE  A0D8               	btfss	status,0,c
  1356  000AC0  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;doprnt.c: 839: exp *= 3;
  1360  000AC2  C071  F00F         	movff	sprintf@exp,___wmul@multiplier
  1361  000AC6  C072  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1362  000ACA  0E00               	movlw	0
  1363  000ACC  6E12               	movwf	___wmul@multiplicand+1,c
  1364  000ACE  0E03               	movlw	3
  1365  000AD0  6E11               	movwf	___wmul@multiplicand,c
  1366  000AD2  EC8C  F013         	call	___wmul	;wreg free
  1367  000AD6  C00F  F071         	movff	?___wmul,sprintf@exp
  1368  000ADA  C010  F072         	movff	?___wmul+1,sprintf@exp+1
  1369                           
  1370                           ;doprnt.c: 840: exp /= 10;
  1371  000ADE  C071  F007         	movff	sprintf@exp,___awdiv@dividend
  1372  000AE2  C072  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1373  000AE6  0E00               	movlw	0
  1374  000AE8  6E0A               	movwf	___awdiv@divisor+1,c
  1375  000AEA  0E0A               	movlw	10
  1376  000AEC  6E09               	movwf	___awdiv@divisor,c
  1377  000AEE  EC34  F012         	call	___awdiv	;wreg free
  1378  000AF2  C007  F071         	movff	?___awdiv,sprintf@exp
  1379  000AF6  C008  F072         	movff	?___awdiv+1,sprintf@exp+1
  1380                           
  1381                           ;doprnt.c: 841: if(exp < 0)
  1382  000AFA  0100               	movlb	0	; () banked
  1383  000AFC  AF72               	btfss	(sprintf@exp+1)& (0+255),7,b
  1384  000AFE  D004               	goto	l2700
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;doprnt.c: 842: exp--;
  1388  000B00  0100               	movlb	0	; () banked
  1389  000B02  0771               	decf	sprintf@exp& (0+255),f,b
  1390  000B04  A0D8               	btfss	status,0,c
  1391  000B06  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1392  000B08                     l2700:
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1396  000B08  0100               	movlb	0	; () banked
  1397  000B0A  5171               	movf	sprintf@exp& (0+255),w,b
  1398  000B0C  0800               	sublw	0
  1399  000B0E  EC22  F009         	call	_scale
  1400  000B12  C024  F06D         	movff	?_scale,sprintf@tmpval
  1401  000B16  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1402  000B1A  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1403                           
  1404                           ;doprnt.c: 847: tmpval.integ *= fval;
  1405  000B1E  C06D  F015         	movff	sprintf@tmpval,___ftmul@f1
  1406  000B22  C06E  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1407  000B26  C06F  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1408  000B2A  C073  F018         	movff	sprintf@fval,___ftmul@f2
  1409  000B2E  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1410  000B32  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1411  000B36  ECE0  F00F         	call	___ftmul	;wreg free
  1412  000B3A  C015  F06D         	movff	?___ftmul,sprintf@tmpval
  1413  000B3E  C016  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  1414  000B42  C017  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  1415                           
  1416                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1417  000B46  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1418  000B4A  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1419  000B4E  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1420  000B52  0E00               	movlw	0
  1421  000B54  6E04               	movwf	___ftge@ff2,c
  1422  000B56  0E80               	movlw	128
  1423  000B58  6E05               	movwf	___ftge@ff2+1,c
  1424  000B5A  0E3F               	movlw	63
  1425  000B5C  6E06               	movwf	___ftge@ff2+2,c
  1426  000B5E  ECA4  F011         	call	___ftge	;wreg free
  1427  000B62  B0D8               	btfsc	status,0,c
  1428  000B64  D005               	goto	l2708
  1429                           
  1430                           ;doprnt.c: 849: exp--;
  1431  000B66  0100               	movlb	0	; () banked
  1432  000B68  0771               	decf	sprintf@exp& (0+255),f,b
  1433  000B6A  A0D8               	btfss	status,0,c
  1434  000B6C  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1435  000B6E  D013               	goto	l2712
  1436  000B70                     l2708:
  1437                           
  1438                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1439  000B70  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1440  000B74  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1441  000B78  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1442  000B7C  0E00               	movlw	0
  1443  000B7E  6E04               	movwf	___ftge@ff2,c
  1444  000B80  0E20               	movlw	32
  1445  000B82  6E05               	movwf	___ftge@ff2+1,c
  1446  000B84  0E41               	movlw	65
  1447  000B86  6E06               	movwf	___ftge@ff2+2,c
  1448  000B88  ECA4  F011         	call	___ftge	;wreg free
  1449  000B8C  A0D8               	btfss	status,0,c
  1450  000B8E  D003               	goto	l2712
  1451                           
  1452                           ;doprnt.c: 851: exp++;
  1453  000B90  0100               	movlb	0	; () banked
  1454  000B92  4B71               	infsnz	sprintf@exp& (0+255),f,b
  1455  000B94  2B72               	incf	(sprintf@exp+1)& (0+255),f,b
  1456  000B96                     l2712:
  1457                           
  1458                           ;doprnt.c: 852: }
  1459                           ;doprnt.c: 1112: if(prec <= 12)
  1460  000B96  0100               	movlb	0	; () banked
  1461  000B98  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1462  000B9A  D008               	goto	l2714
  1463  000B9C  0100               	movlb	0	; () banked
  1464  000B9E  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  1465  000BA0  E11D               	bnz	l2716
  1466  000BA2  0E0D               	movlw	13
  1467  000BA4  0100               	movlb	0	; () banked
  1468  000BA6  5D76               	subwf	sprintf@prec& (0+255),w,b
  1469  000BA8  B0D8               	btfsc	status,0,c
  1470  000BAA  D018               	goto	l2716
  1471  000BAC                     l2714:
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;doprnt.c: 1113: fval += fround(prec);
  1475  000BAC  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  1476  000BB0  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1477  000BB4  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1478  000BB8  0100               	movlb	0	; () banked
  1479  000BBA  5176               	movf	sprintf@prec& (0+255),w,b
  1480  000BBC  EC1A  F00B         	call	_fround
  1481  000BC0  C024  F031         	movff	?_fround,___ftadd@f2
  1482  000BC4  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1483  000BC8  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1484  000BCC  EC3D  F00C         	call	___ftadd	;wreg free
  1485  000BD0  C02E  F073         	movff	?___ftadd,sprintf@fval
  1486  000BD4  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  1487  000BD8  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  1488  000BDC                     l2716:
  1489                           
  1490                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1491  000BDC  0100               	movlb	0	; () banked
  1492  000BDE  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1493  000BE0  D008               	goto	l2718
  1494  000BE2  0100               	movlb	0	; () banked
  1495  000BE4  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1496  000BE6  E126               	bnz	l2724
  1497  000BE8  0E0A               	movlw	10
  1498  000BEA  0100               	movlb	0	; () banked
  1499  000BEC  5D71               	subwf	sprintf@exp& (0+255),w,b
  1500  000BEE  B0D8               	btfsc	status,0,c
  1501  000BF0  D021               	goto	l2724
  1502  000BF2                     l2718:
  1503                           
  1504                           ; BSR set to: 0
  1505  000BF2  0100               	movlb	0	; () banked
  1506  000BF4  5173               	movf	sprintf@fval& (0+255),w,b
  1507  000BF6  0100               	movlb	0	; () banked
  1508  000BF8  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1509  000BFA  0100               	movlb	0	; () banked
  1510  000BFC  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1511  000BFE  B4D8               	btfsc	status,2,c
  1512  000C00  D05B               	goto	l2738
  1513                           
  1514                           ; BSR set to: 0
  1515  000C02  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1516  000C06  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1517  000C0A  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1518  000C0E  EC5A  F010         	call	___fttol	;wreg free
  1519  000C12  502B               	movf	?___fttol,w,c
  1520  000C14  102C               	iorwf	?___fttol+1,w,c
  1521  000C16  102D               	iorwf	?___fttol+2,w,c
  1522  000C18  102E               	iorwf	?___fttol+3,w,c
  1523  000C1A  A4D8               	btfss	status,2,c
  1524  000C1C  D04D               	goto	l2738
  1525  000C1E  0100               	movlb	0	; () banked
  1526  000C20  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1527  000C22  D04A               	goto	l2738
  1528  000C24  0100               	movlb	0	; () banked
  1529  000C26  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1530  000C28  E105               	bnz	l2724
  1531  000C2A  0E02               	movlw	2
  1532  000C2C  0100               	movlb	0	; () banked
  1533  000C2E  5D71               	subwf	sprintf@exp& (0+255),w,b
  1534  000C30  A0D8               	btfss	status,0,c
  1535  000C32  D042               	goto	l2738
  1536  000C34                     l2724:
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1540  000C34  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1541  000C38  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1542  000C3C  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1543  000C40  0E70               	movlw	112
  1544  000C42  6E04               	movwf	___ftge@ff2,c
  1545  000C44  0E89               	movlw	137
  1546  000C46  6E05               	movwf	___ftge@ff2+1,c
  1547  000C48  0E40               	movlw	64
  1548  000C4A  6E06               	movwf	___ftge@ff2+2,c
  1549  000C4C  ECA4  F011         	call	___ftge	;wreg free
  1550  000C50  B0D8               	btfsc	status,0,c
  1551  000C52  D003               	goto	l2728
  1552                           
  1553                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1554  000C54  0100               	movlb	0	; () banked
  1555  000C56  0EF7               	movlw	247
  1556  000C58  D002               	goto	L1
  1557  000C5A                     l2728:
  1558                           
  1559                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1560  000C5A  0100               	movlb	0	; () banked
  1561  000C5C  0EF8               	movlw	248
  1562  000C5E                     L1:
  1563  000C5E  2771               	addwf	sprintf@exp& (0+255),f,b
  1564  000C60  0EFF               	movlw	255
  1565  000C62  2372               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;doprnt.c: 1124: }
  1569                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1570                           
  1571                           ; BSR set to: 0
  1572  000C64  0100               	movlb	0	; () banked
  1573  000C66  5171               	movf	sprintf@exp& (0+255),w,b
  1574  000C68  EC22  F009         	call	_scale
  1575  000C6C  C024  F06D         	movff	?_scale,sprintf@tmpval
  1576  000C70  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1577  000C74  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1578                           
  1579                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1580  000C78  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1581  000C7C  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1582  000C80  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1583  000C84  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1584  000C88  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1585  000C8C  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1586  000C90  EC13  F00D         	call	__tdiv_to_l_	;wreg free
  1587  000C94  C001  F065         	movff	?__tdiv_to_l_,sprintf@val
  1588  000C98  C002  F066         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1589  000C9C  C003  F067         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1590  000CA0  C004  F068         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1591                           
  1592                           ;doprnt.c: 1129: fval = 0.0;
  1593  000CA4  0E00               	movlw	0
  1594  000CA6  0100               	movlb	0	; () banked
  1595  000CA8  6F73               	movwf	sprintf@fval& (0+255),b
  1596  000CAA  0E00               	movlw	0
  1597  000CAC  0100               	movlb	0	; () banked
  1598  000CAE  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  1599  000CB0  0E00               	movlw	0
  1600  000CB2  0100               	movlb	0	; () banked
  1601  000CB4  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  1602                           
  1603                           ;doprnt.c: 1130: } else {
  1604  000CB6  D033               	goto	l2742
  1605  000CB8                     l2738:
  1606                           
  1607                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1608  000CB8  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1609  000CBC  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1610  000CC0  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1611  000CC4  EC5A  F010         	call	___fttol	;wreg free
  1612  000CC8  C02B  F065         	movff	?___fttol,sprintf@val
  1613  000CCC  C02C  F066         	movff	?___fttol+1,sprintf@val+1
  1614  000CD0  C02D  F067         	movff	?___fttol+2,sprintf@val+2
  1615  000CD4  C02E  F068         	movff	?___fttol+3,sprintf@val+3
  1616                           
  1617                           ;doprnt.c: 1132: fval -= (double)val;
  1618  000CD8  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  1619  000CDC  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1620  000CE0  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1621  000CE4  C065  F009         	movff	sprintf@val,___lltoft@c
  1622  000CE8  C066  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1623  000CEC  C067  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1624  000CF0  C068  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1625  000CF4  EC22  F013         	call	___lltoft	;wreg free
  1626  000CF8  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1627  000CFC  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1628  000D00  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1629  000D04  EC50  F013         	call	___ftsub	;wreg free
  1630  000D08  C03A  F073         	movff	?___ftsub,sprintf@fval
  1631  000D0C  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  1632  000D10  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  1633                           
  1634                           ;doprnt.c: 1133: exp = 0;
  1635  000D14  0E00               	movlw	0
  1636  000D16  0100               	movlb	0	; () banked
  1637  000D18  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  1638  000D1A  0E00               	movlw	0
  1639  000D1C  6F71               	movwf	sprintf@exp& (0+255),b
  1640  000D1E                     l2742:
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;doprnt.c: 1134: }
  1644                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1645  000D1E  0E01               	movlw	1
  1646  000D20  0100               	movlb	0	; () banked
  1647  000D22  6F78               	movwf	sprintf@c& (0+255),b
  1648  000D24                     l2744:
  1649                           
  1650                           ; BSR set to: 0
  1651  000D24  0E0A               	movlw	10
  1652  000D26  0100               	movlb	0	; () banked
  1653  000D28  1978               	xorwf	sprintf@c& (0+255),w,b
  1654  000D2A  B4D8               	btfsc	status,2,c
  1655  000D2C  D01E               	goto	l2756
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;doprnt.c: 1137: if(val < dpowers[c])
  1659                           
  1660                           ; BSR set to: 0
  1661                           
  1662                           ; BSR set to: 0
  1663  000D2E  0100               	movlb	0	; () banked
  1664  000D30  5178               	movf	sprintf@c& (0+255),w,b
  1665  000D32  0D04               	mullw	4
  1666  000D34  0E01               	movlw	low _dpowers
  1667  000D36  24F3               	addwf	prodl,w,c
  1668  000D38  6EF6               	movwf	tblptrl,c
  1669  000D3A  0E08               	movlw	high _dpowers
  1670  000D3C  20F4               	addwfc	prodh,w,c
  1671  000D3E  6EF7               	movwf	tblptrh,c
  1672  000D40                     	if	0	;There are less than 3 active tblptr bytes
  1673  000D40                     	endif
  1674  000D40  0009               	tblrd		*+
  1675  000D42  50F5               	movf	tablat,w,c
  1676  000D44  0100               	movlb	0	; () banked
  1677  000D46  5D65               	subwf	sprintf@val& (0+255),w,b
  1678  000D48  0009               	tblrd		*+
  1679  000D4A  50F5               	movf	tablat,w,c
  1680  000D4C  0100               	movlb	0	; () banked
  1681  000D4E  5966               	subwfb	(sprintf@val+1)& (0+255),w,b
  1682  000D50  0009               	tblrd		*+
  1683  000D52  50F5               	movf	tablat,w,c
  1684  000D54  0100               	movlb	0	; () banked
  1685  000D56  5967               	subwfb	(sprintf@val+2)& (0+255),w,b
  1686  000D58  0009               	tblrd		*+
  1687  000D5A  50F5               	movf	tablat,w,c
  1688  000D5C  0100               	movlb	0	; () banked
  1689  000D5E  5968               	subwfb	(sprintf@val+3)& (0+255),w,b
  1690  000D60  A0D8               	btfss	status,0,c
  1691  000D62  D003               	goto	l2756
  1692                           
  1693                           ; BSR set to: 0
  1694                           
  1695                           ; BSR set to: 0
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;doprnt.c: 1138: break;
  1699  000D64  0100               	movlb	0	; () banked
  1700  000D66  2B78               	incf	sprintf@c& (0+255),f,b
  1701  000D68  D7DD               	goto	l2744
  1702  000D6A                     l2756:
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;doprnt.c: 1142: width -= prec + c + exp;
  1706  000D6A  C078  F047         	movff	sprintf@c,??_sprintf
  1707  000D6E  6A48               	clrf	(??_sprintf+1)& (0+255),c
  1708  000D70  BE47               	btfsc	??_sprintf& (0+255),7,c
  1709  000D72  0648               	decf	(??_sprintf+1)& (0+255),f,c
  1710  000D74  0100               	movlb	0	; () banked
  1711  000D76  5176               	movf	sprintf@prec& (0+255),w,b
  1712  000D78  2647               	addwf	??_sprintf,f,c
  1713  000D7A  0100               	movlb	0	; () banked
  1714  000D7C  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  1715  000D7E  2248               	addwfc	??_sprintf+1,f,c
  1716  000D80  0100               	movlb	0	; () banked
  1717  000D82  5171               	movf	sprintf@exp& (0+255),w,b
  1718  000D84  2647               	addwf	??_sprintf,f,c
  1719  000D86  0100               	movlb	0	; () banked
  1720  000D88  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1721  000D8A  2248               	addwfc	??_sprintf+1,f,c
  1722  000D8C  5047               	movf	??_sprintf,w,c
  1723  000D8E  0100               	movlb	0	; () banked
  1724  000D90  5F6B               	subwf	sprintf@width& (0+255),f,b
  1725  000D92  5048               	movf	??_sprintf+1,w,c
  1726  000D94  0100               	movlb	0	; () banked
  1727  000D96  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  1728                           
  1729                           ;doprnt.c: 1143: if(
  1730                           ;doprnt.c: 1147: prec)
  1731  000D98  0100               	movlb	0	; () banked
  1732  000D9A  5176               	movf	sprintf@prec& (0+255),w,b
  1733  000D9C  0100               	movlb	0	; () banked
  1734  000D9E  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1735  000DA0  B4D8               	btfsc	status,2,c
  1736  000DA2  D004               	goto	l2760
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;doprnt.c: 1148: width--;
  1740  000DA4  0100               	movlb	0	; () banked
  1741  000DA6  076B               	decf	sprintf@width& (0+255),f,b
  1742  000DA8  A0D8               	btfss	status,0,c
  1743  000DAA  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1744  000DAC                     l2760:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;doprnt.c: 1149: if(flag & 0x03)
  1748  000DAC  0E03               	movlw	3
  1749  000DAE  0100               	movlb	0	; () banked
  1750  000DB0  1569               	andwf	sprintf@flag& (0+255),w,b
  1751  000DB2  6E47               	movwf	??_sprintf& (0+255),c
  1752  000DB4  0E00               	movlw	0
  1753  000DB6  0100               	movlb	0	; () banked
  1754  000DB8  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  1755  000DBA  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1756  000DBC  5047               	movf	??_sprintf,w,c
  1757  000DBE  1048               	iorwf	??_sprintf+1,w,c
  1758  000DC0  B4D8               	btfsc	status,2,c
  1759  000DC2  D00D               	goto	l2770
  1760  000DC4  D008               	goto	l2768
  1761  000DC6                     l2764:
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  1765  000DC6  C040  FFD9         	movff	sprintf@sp,fsr2l
  1766  000DCA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1767  000DCE  0E20               	movlw	32
  1768  000DD0  6EDF               	movwf	indf2,c
  1769                           
  1770                           ; BSR set to: 0
  1771  000DD2  4A40               	infsnz	sprintf@sp,f,c
  1772  000DD4  2A41               	incf	sprintf@sp+1,f,c
  1773  000DD6                     l2768:
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;doprnt.c: 1182: width--;
  1777  000DD6  0100               	movlb	0	; () banked
  1778  000DD8  076B               	decf	sprintf@width& (0+255),f,b
  1779  000DDA  A0D8               	btfss	status,0,c
  1780  000DDC  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1781  000DDE                     l2770:
  1782                           
  1783                           ; BSR set to: 0
  1784  000DDE  0100               	movlb	0	; () banked
  1785  000DE0  BF6C               	btfsc	(sprintf@width+1)& (0+255),7,b
  1786  000DE2  D007               	goto	l2772
  1787  000DE4  0100               	movlb	0	; () banked
  1788  000DE6  516C               	movf	(sprintf@width+1)& (0+255),w,b
  1789  000DE8  E1EE               	bnz	l2764
  1790  000DEA  0100               	movlb	0	; () banked
  1791  000DEC  056B               	decf	sprintf@width& (0+255),w,b
  1792  000DEE  B0D8               	btfsc	status,0,c
  1793  000DF0  D7EA               	goto	l2764
  1794  000DF2                     l2772:
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;doprnt.c: 1183: }
  1798                           ;doprnt.c: 1188: if(flag & 0x03)
  1799  000DF2  0E03               	movlw	3
  1800  000DF4  0100               	movlb	0	; () banked
  1801  000DF6  1569               	andwf	sprintf@flag& (0+255),w,b
  1802  000DF8  6E47               	movwf	??_sprintf& (0+255),c
  1803  000DFA  0E00               	movlw	0
  1804  000DFC  0100               	movlb	0	; () banked
  1805  000DFE  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  1806  000E00  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1807  000E02  5047               	movf	??_sprintf,w,c
  1808  000E04  1048               	iorwf	??_sprintf+1,w,c
  1809  000E06  B4D8               	btfsc	status,2,c
  1810  000E08  D053               	goto	l2786
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1814  000E0A  C040  FFD9         	movff	sprintf@sp,fsr2l
  1815  000E0E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1816  000E12  0E2D               	movlw	45
  1817  000E14  D04B               	goto	L2
  1818  000E16                     l2776:
  1819                           
  1820                           ; BSR set to: 0
  1821  000E16  4A40               	infsnz	sprintf@sp,f,c
  1822  000E18  2A41               	incf	sprintf@sp+1,f,c
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;doprnt.c: 1195: }
  1826                           ;doprnt.c: 1196: while(c--) {
  1827  000E1A  D04A               	goto	l2786
  1828  000E1C                     l2778:
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;doprnt.c: 1200: {
  1832                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1833  000E1C  C065  F001         	movff	sprintf@val,___lldiv@dividend
  1834  000E20  C066  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1835  000E24  C067  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1836  000E28  C068  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1837  000E2C  0100               	movlb	0	; () banked
  1838  000E2E  5178               	movf	sprintf@c& (0+255),w,b
  1839  000E30  0D04               	mullw	4
  1840  000E32  0E01               	movlw	low _dpowers
  1841  000E34  24F3               	addwf	prodl,w,c
  1842  000E36  6EF6               	movwf	tblptrl,c
  1843  000E38  0E08               	movlw	high _dpowers
  1844  000E3A  20F4               	addwfc	prodh,w,c
  1845  000E3C  6EF7               	movwf	tblptrh,c
  1846  000E3E                     	if	0	;There are less than 3 active tblptr bytes
  1847  000E3E                     	endif
  1848  000E3E  0009               	tblrd		*+
  1849  000E40  CFF5 F005          	movff	tablat,___lldiv@divisor
  1850  000E44  0009               	tblrd		*+
  1851  000E46  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1852  000E4A  0009               	tblrd		*+
  1853  000E4C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1854  000E50  000A               	tblrd		*-
  1855  000E52  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1856  000E56  EC76  F012         	call	___lldiv	;wreg free
  1857  000E5A  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  1858  000E5E  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  1859  000E62  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  1860  000E66  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  1861                           
  1862                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1863  000E6A  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  1864  000E6E  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1865  000E72  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1866  000E76  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1867  000E7A  0E0A               	movlw	10
  1868  000E7C  6E05               	movwf	___llmod@divisor,c
  1869  000E7E  0E00               	movlw	0
  1870  000E80  6E06               	movwf	___llmod@divisor+1,c
  1871  000E82  0E00               	movlw	0
  1872  000E84  6E07               	movwf	___llmod@divisor+2,c
  1873  000E86  0E00               	movlw	0
  1874  000E88  6E08               	movwf	___llmod@divisor+3,c
  1875  000E8A  ECEF  F012         	call	___llmod	;wreg free
  1876  000E8E  C001  F06D         	movff	?___llmod,sprintf@tmpval
  1877  000E92  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  1878  000E96  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  1879  000E9A  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  1880                           
  1881                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1882  000E9E  0100               	movlb	0	; () banked
  1883  000EA0  516D               	movf	sprintf@tmpval& (0+255),w,b
  1884  000EA2  0F30               	addlw	48
  1885  000EA4  C040  FFD9         	movff	sprintf@sp,fsr2l
  1886  000EA8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1887  000EAC                     L2:
  1888  000EAC  6EDF               	movwf	indf2,c
  1889  000EAE  D7B3               	goto	l2776
  1890  000EB0                     l2786:
  1891                           
  1892                           ; BSR set to: 0
  1893  000EB0  0100               	movlb	0	; () banked
  1894  000EB2  0778               	decf	sprintf@c& (0+255),f,b
  1895  000EB4  0100               	movlb	0	; () banked
  1896  000EB6  2978               	incf	sprintf@c& (0+255),w,b
  1897  000EB8  B4D8               	btfsc	status,2,c
  1898  000EBA  D00D               	goto	l2794
  1899  000EBC  D7AF               	goto	l2778
  1900  000EBE                     l2788:
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1904  000EBE  C040  FFD9         	movff	sprintf@sp,fsr2l
  1905  000EC2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1906  000EC6  0E30               	movlw	48
  1907  000EC8  6EDF               	movwf	indf2,c
  1908                           
  1909                           ; BSR set to: 0
  1910  000ECA  4A40               	infsnz	sprintf@sp,f,c
  1911  000ECC  2A41               	incf	sprintf@sp+1,f,c
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;doprnt.c: 1209: exp--;
  1915  000ECE  0100               	movlb	0	; () banked
  1916  000ED0  0771               	decf	sprintf@exp& (0+255),f,b
  1917  000ED2  A0D8               	btfss	status,0,c
  1918  000ED4  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1919  000ED6                     l2794:
  1920                           
  1921                           ; BSR set to: 0
  1922  000ED6  0100               	movlb	0	; () banked
  1923  000ED8  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1924  000EDA  D007               	goto	l2796
  1925  000EDC  0100               	movlb	0	; () banked
  1926  000EDE  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1927  000EE0  E1EE               	bnz	l2788
  1928  000EE2  0100               	movlb	0	; () banked
  1929  000EE4  0571               	decf	sprintf@exp& (0+255),w,b
  1930  000EE6  B0D8               	btfsc	status,0,c
  1931  000EE8  D7EA               	goto	l2788
  1932  000EEA                     l2796:
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;doprnt.c: 1210: }
  1936                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1937  000EEA  0100               	movlb	0	; () banked
  1938  000EEC  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1939  000EEE  D00C               	goto	l201
  1940  000EF0  0100               	movlb	0	; () banked
  1941  000EF2  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  1942  000EF4  E105               	bnz	u3490
  1943  000EF6  0E09               	movlw	9
  1944  000EF8  0100               	movlb	0	; () banked
  1945  000EFA  5D76               	subwf	sprintf@prec& (0+255),w,b
  1946  000EFC  A0D8               	btfss	status,0,c
  1947  000EFE  D004               	goto	l201
  1948  000F00                     u3490:
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1952  000F00  0E08               	movlw	8
  1953  000F02  0100               	movlb	0	; () banked
  1954  000F04  6F78               	movwf	sprintf@c& (0+255),b
  1955  000F06  D002               	goto	l2800
  1956  000F08                     l201:
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;doprnt.c: 1213: else
  1960                           ;doprnt.c: 1214: c = prec;
  1961  000F08  C076  F078         	movff	sprintf@prec,sprintf@c
  1962  000F0C                     l2800:
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;doprnt.c: 1215: prec -= c;
  1966  000F0C  0100               	movlb	0	; () banked
  1967  000F0E  5178               	movf	sprintf@c& (0+255),w,b
  1968  000F10  0100               	movlb	0	; () banked
  1969  000F12  5F76               	subwf	sprintf@prec& (0+255),f,b
  1970  000F14  0E00               	movlw	0
  1971  000F16  0100               	movlb	0	; () banked
  1972  000F18  BF78               	btfsc	sprintf@c& (0+255),7,b
  1973  000F1A  0EFF               	movlw	255
  1974  000F1C  0100               	movlb	0	; () banked
  1975  000F1E  5B77               	subwfb	(sprintf@prec+1)& (0+255),f,b
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;doprnt.c: 1219: if(c)
  1979  000F20  0100               	movlb	0	; () banked
  1980  000F22  5178               	movf	sprintf@c& (0+255),w,b
  1981  000F24  0100               	movlb	0	; () banked
  1982  000F26  B4D8               	btfsc	status,2,c
  1983  000F28  D008               	goto	l2808
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  1987  000F2A  C040  FFD9         	movff	sprintf@sp,fsr2l
  1988  000F2E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1989  000F32  0E2E               	movlw	46
  1990  000F34  6EDF               	movwf	indf2,c
  1991                           
  1992                           ; BSR set to: 0
  1993  000F36  4A40               	infsnz	sprintf@sp,f,c
  1994  000F38  2A41               	incf	sprintf@sp+1,f,c
  1995  000F3A                     l2808:
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1999  000F3A  0100               	movlb	0	; () banked
  2000  000F3C  5178               	movf	sprintf@c& (0+255),w,b
  2001  000F3E  EC22  F009         	call	_scale
  2002  000F42  C024  F060         	movff	?_scale,_sprintf$706
  2003  000F46  C025  F061         	movff	?_scale+1,_sprintf$706+1
  2004  000F4A  C026  F062         	movff	?_scale+2,_sprintf$706+2
  2005                           
  2006                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2007  000F4E  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2008  000F52  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2009  000F56  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2010  000F5A  C060  F015         	movff	_sprintf$706,___ftmul@f1
  2011  000F5E  C061  F016         	movff	_sprintf$706+1,___ftmul@f1+1
  2012  000F62  C062  F017         	movff	_sprintf$706+2,___ftmul@f1+2
  2013  000F66  ECE0  F00F         	call	___ftmul	;wreg free
  2014  000F6A  C015  F02B         	movff	?___ftmul,___fttol@f1
  2015  000F6E  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2016  000F72  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2017  000F76  EC5A  F010         	call	___fttol	;wreg free
  2018  000F7A  C02B  F065         	movff	?___fttol,sprintf@val
  2019  000F7E  C02C  F066         	movff	?___fttol+1,sprintf@val+1
  2020  000F82  C02D  F067         	movff	?___fttol+2,sprintf@val+2
  2021  000F86  C02E  F068         	movff	?___fttol+3,sprintf@val+3
  2022                           
  2023                           ;doprnt.c: 1228: while(c--) {
  2024  000F8A  D072               	goto	l2822
  2025  000F8C                     l2812:
  2026                           
  2027                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2028  000F8C  C065  F001         	movff	sprintf@val,___lldiv@dividend
  2029  000F90  C066  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2030  000F94  C067  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2031  000F98  C068  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2032  000F9C  0100               	movlb	0	; () banked
  2033  000F9E  5178               	movf	sprintf@c& (0+255),w,b
  2034  000FA0  0D04               	mullw	4
  2035  000FA2  0E01               	movlw	low _dpowers
  2036  000FA4  24F3               	addwf	prodl,w,c
  2037  000FA6  6EF6               	movwf	tblptrl,c
  2038  000FA8  0E08               	movlw	high _dpowers
  2039  000FAA  20F4               	addwfc	prodh,w,c
  2040  000FAC  6EF7               	movwf	tblptrh,c
  2041  000FAE                     	if	0	;There are less than 3 active tblptr bytes
  2042  000FAE                     	endif
  2043  000FAE  0009               	tblrd		*+
  2044  000FB0  CFF5 F005          	movff	tablat,___lldiv@divisor
  2045  000FB4  0009               	tblrd		*+
  2046  000FB6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2047  000FBA  0009               	tblrd		*+
  2048  000FBC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2049  000FC0  000A               	tblrd		*-
  2050  000FC2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2051  000FC6  EC76  F012         	call	___lldiv	;wreg free
  2052  000FCA  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2053  000FCE  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2054  000FD2  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2055  000FD6  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2056                           
  2057                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2058  000FDA  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2059  000FDE  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2060  000FE2  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2061  000FE6  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2062  000FEA  0E0A               	movlw	10
  2063  000FEC  6E05               	movwf	___llmod@divisor,c
  2064  000FEE  0E00               	movlw	0
  2065  000FF0  6E06               	movwf	___llmod@divisor+1,c
  2066  000FF2  0E00               	movlw	0
  2067  000FF4  6E07               	movwf	___llmod@divisor+2,c
  2068  000FF6  0E00               	movlw	0
  2069  000FF8  6E08               	movwf	___llmod@divisor+3,c
  2070  000FFA  ECEF  F012         	call	___llmod	;wreg free
  2071  000FFE  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2072  001002  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2073  001006  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2074  00100A  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2075                           
  2076                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2077  00100E  0100               	movlb	0	; () banked
  2078  001010  516D               	movf	sprintf@tmpval& (0+255),w,b
  2079  001012  0F30               	addlw	48
  2080  001014  C040  FFD9         	movff	sprintf@sp,fsr2l
  2081  001018  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2082  00101C  6EDF               	movwf	indf2,c
  2083                           
  2084                           ; BSR set to: 0
  2085  00101E  4A40               	infsnz	sprintf@sp,f,c
  2086  001020  2A41               	incf	sprintf@sp+1,f,c
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;doprnt.c: 1232: val %= dpowers[c];
  2090  001022  C065  F001         	movff	sprintf@val,___llmod@dividend
  2091  001026  C066  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2092  00102A  C067  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2093  00102E  C068  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2094  001032  0100               	movlb	0	; () banked
  2095  001034  5178               	movf	sprintf@c& (0+255),w,b
  2096  001036  0D04               	mullw	4
  2097  001038  0E01               	movlw	low _dpowers
  2098  00103A  24F3               	addwf	prodl,w,c
  2099  00103C  6EF6               	movwf	tblptrl,c
  2100  00103E  0E08               	movlw	high _dpowers
  2101  001040  20F4               	addwfc	prodh,w,c
  2102  001042  6EF7               	movwf	tblptrh,c
  2103  001044                     	if	0	;There are less than 3 active tblptr bytes
  2104  001044                     	endif
  2105  001044  0009               	tblrd		*+
  2106  001046  CFF5 F005          	movff	tablat,___llmod@divisor
  2107  00104A  0009               	tblrd		*+
  2108  00104C  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2109  001050  0009               	tblrd		*+
  2110  001052  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2111  001056  000A               	tblrd		*-
  2112  001058  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2113  00105C  ECEF  F012         	call	___llmod	;wreg free
  2114  001060  C001  F065         	movff	?___llmod,sprintf@val
  2115  001064  C002  F066         	movff	?___llmod+1,sprintf@val+1
  2116  001068  C003  F067         	movff	?___llmod+2,sprintf@val+2
  2117  00106C  C004  F068         	movff	?___llmod+3,sprintf@val+3
  2118  001070                     l2822:
  2119  001070  0100               	movlb	0	; () banked
  2120  001072  0778               	decf	sprintf@c& (0+255),f,b
  2121  001074  0100               	movlb	0	; () banked
  2122  001076  2978               	incf	sprintf@c& (0+255),w,b
  2123  001078  B4D8               	btfsc	status,2,c
  2124  00107A  D00D               	goto	l2830
  2125  00107C  D787               	goto	l2812
  2126  00107E                     l2824:
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2130  00107E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2131  001082  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2132  001086  0E30               	movlw	48
  2133  001088  6EDF               	movwf	indf2,c
  2134                           
  2135                           ; BSR set to: 0
  2136  00108A  4A40               	infsnz	sprintf@sp,f,c
  2137  00108C  2A41               	incf	sprintf@sp+1,f,c
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;doprnt.c: 1237: prec--;
  2141  00108E  0100               	movlb	0	; () banked
  2142  001090  0776               	decf	sprintf@prec& (0+255),f,b
  2143  001092  A0D8               	btfss	status,0,c
  2144  001094  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  2145  001096                     l2830:
  2146                           
  2147                           ; BSR set to: 0
  2148  001096  0100               	movlb	0	; () banked
  2149  001098  5176               	movf	sprintf@prec& (0+255),w,b
  2150  00109A  0100               	movlb	0	; () banked
  2151  00109C  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2152  00109E  B4D8               	btfsc	status,2,c
  2153  0010A0  D0BC               	goto	l2880
  2154  0010A2  D7ED               	goto	l2824
  2155  0010A4                     l2832:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;doprnt.c: 1246: }
  2159                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2160  0010A4  0100               	movlb	0	; () banked
  2161  0010A6  5176               	movf	sprintf@prec& (0+255),w,b
  2162  0010A8  0100               	movlb	0	; () banked
  2163  0010AA  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2164  0010AC  A4D8               	btfss	status,2,c
  2165  0010AE  D00D               	goto	l2838
  2166                           
  2167                           ; BSR set to: 0
  2168  0010B0  0100               	movlb	0	; () banked
  2169  0010B2  5165               	movf	sprintf@val& (0+255),w,b
  2170  0010B4  0100               	movlb	0	; () banked
  2171  0010B6  1166               	iorwf	(sprintf@val+1)& (0+255),w,b
  2172  0010B8  0100               	movlb	0	; () banked
  2173  0010BA  1167               	iorwf	(sprintf@val+2)& (0+255),w,b
  2174  0010BC  0100               	movlb	0	; () banked
  2175  0010BE  1168               	iorwf	(sprintf@val+3)& (0+255),w,b
  2176  0010C0  A4D8               	btfss	status,2,c
  2177  0010C2  D003               	goto	l2838
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;doprnt.c: 1291: prec++;
  2181  0010C4  0100               	movlb	0	; () banked
  2182  0010C6  4B76               	infsnz	sprintf@prec& (0+255),f,b
  2183  0010C8  2B77               	incf	(sprintf@prec+1)& (0+255),f,b
  2184  0010CA                     l2838:
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;doprnt.c: 1339: if(c < prec)
  2188  0010CA  0E80               	movlw	128
  2189  0010CC  0100               	movlb	0	; () banked
  2190  0010CE  BF78               	btfsc	sprintf@c& (0+255),7,b
  2191  0010D0  0E7F               	movlw	127
  2192  0010D2  6E47               	movwf	??_sprintf& (0+255),c
  2193  0010D4  0100               	movlb	0	; () banked
  2194  0010D6  5176               	movf	sprintf@prec& (0+255),w,b
  2195  0010D8  0100               	movlb	0	; () banked
  2196  0010DA  5D78               	subwf	sprintf@c& (0+255),w,b
  2197  0010DC  0100               	movlb	0	; () banked
  2198  0010DE  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2199  0010E0  0A80               	xorlw	128
  2200  0010E2  5847               	subwfb	??_sprintf& (0+255),w,c
  2201  0010E4  B0D8               	btfsc	status,0,c
  2202  0010E6  D003               	goto	l2842
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;doprnt.c: 1340: c = prec;
  2206  0010E8  C076  F078         	movff	sprintf@prec,sprintf@c
  2207  0010EC  D016               	goto	l2846
  2208  0010EE                     l2842:
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;doprnt.c: 1341: else if(prec < c)
  2212  0010EE  0100               	movlb	0	; () banked
  2213  0010F0  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2214  0010F2  0A80               	xorlw	128
  2215  0010F4  6E47               	movwf	??_sprintf& (0+255),c
  2216  0010F6  0100               	movlb	0	; () banked
  2217  0010F8  5178               	movf	sprintf@c& (0+255),w,b
  2218  0010FA  0100               	movlb	0	; () banked
  2219  0010FC  5D76               	subwf	sprintf@prec& (0+255),w,b
  2220  0010FE  0E80               	movlw	128
  2221  001100  0100               	movlb	0	; () banked
  2222  001102  BF78               	btfsc	sprintf@c& (0+255),7,b
  2223  001104  0E7F               	movlw	127
  2224  001106  5847               	subwfb	??_sprintf& (0+255),w,c
  2225  001108  B0D8               	btfsc	status,0,c
  2226  00110A  D007               	goto	l2846
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;doprnt.c: 1342: prec = c;
  2230  00110C  0100               	movlb	0	; () banked
  2231  00110E  5178               	movf	sprintf@c& (0+255),w,b
  2232  001110  0100               	movlb	0	; () banked
  2233  001112  6F76               	movwf	sprintf@prec& (0+255),b
  2234  001114  6B77               	clrf	(sprintf@prec+1)& (0+255),b
  2235  001116  BF76               	btfsc	sprintf@prec& (0+255),7,b
  2236  001118  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  2237  00111A                     l2846:
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2241  00111A  0100               	movlb	0	; () banked
  2242  00111C  516B               	movf	sprintf@width& (0+255),w,b
  2243  00111E  0100               	movlb	0	; () banked
  2244  001120  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  2245  001122  B4D8               	btfsc	status,2,c
  2246  001124  D010               	goto	l2852
  2247                           
  2248                           ; BSR set to: 0
  2249  001126  0E03               	movlw	3
  2250  001128  0100               	movlb	0	; () banked
  2251  00112A  1569               	andwf	sprintf@flag& (0+255),w,b
  2252  00112C  6E47               	movwf	??_sprintf& (0+255),c
  2253  00112E  0E00               	movlw	0
  2254  001130  0100               	movlb	0	; () banked
  2255  001132  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  2256  001134  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2257  001136  5047               	movf	??_sprintf,w,c
  2258  001138  1048               	iorwf	??_sprintf+1,w,c
  2259  00113A  B4D8               	btfsc	status,2,c
  2260  00113C  D004               	goto	l2852
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;doprnt.c: 1346: width--;
  2264  00113E  0100               	movlb	0	; () banked
  2265  001140  076B               	decf	sprintf@width& (0+255),f,b
  2266  001142  A0D8               	btfss	status,0,c
  2267  001144  076C               	decf	(sprintf@width+1)& (0+255),f,b
  2268  001146                     l2852:
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2272  001146  0100               	movlb	0	; () banked
  2273  001148  AD6A               	btfss	(sprintf@flag+1)& (0+255),6,b
  2274  00114A  D01C               	goto	l2860
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;doprnt.c: 1349: if(width > prec)
  2278  00114C  0100               	movlb	0	; () banked
  2279  00114E  516B               	movf	sprintf@width& (0+255),w,b
  2280  001150  0100               	movlb	0	; () banked
  2281  001152  5D76               	subwf	sprintf@prec& (0+255),w,b
  2282  001154  0100               	movlb	0	; () banked
  2283  001156  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2284  001158  0A80               	xorlw	128
  2285  00115A  6E47               	movwf	??_sprintf& (0+255),c
  2286  00115C  0100               	movlb	0	; () banked
  2287  00115E  516C               	movf	(sprintf@width+1)& (0+255),w,b
  2288  001160  0A80               	xorlw	128
  2289  001162  5847               	subwfb	??_sprintf& (0+255),w,c
  2290  001164  B0D8               	btfsc	status,0,c
  2291  001166  D009               	goto	l2858
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;doprnt.c: 1350: width -= prec;
  2295  001168  0100               	movlb	0	; () banked
  2296  00116A  5176               	movf	sprintf@prec& (0+255),w,b
  2297  00116C  0100               	movlb	0	; () banked
  2298  00116E  5F6B               	subwf	sprintf@width& (0+255),f,b
  2299  001170  0100               	movlb	0	; () banked
  2300  001172  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2301  001174  0100               	movlb	0	; () banked
  2302  001176  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  2303  001178  D005               	goto	l2860
  2304  00117A                     l2858:
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;doprnt.c: 1351: else
  2308                           ;doprnt.c: 1352: width = 0;
  2309  00117A  0E00               	movlw	0
  2310  00117C  0100               	movlb	0	; () banked
  2311  00117E  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  2312  001180  0E00               	movlw	0
  2313  001182  6F6B               	movwf	sprintf@width& (0+255),b
  2314  001184                     l2860:
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;doprnt.c: 1353: }
  2318                           ;doprnt.c: 1381: if(width > c)
  2319  001184  0E80               	movlw	128
  2320  001186  0100               	movlb	0	; () banked
  2321  001188  BF78               	btfsc	sprintf@c& (0+255),7,b
  2322  00118A  0E7F               	movlw	127
  2323  00118C  6E47               	movwf	??_sprintf& (0+255),c
  2324  00118E  0100               	movlb	0	; () banked
  2325  001190  516B               	movf	sprintf@width& (0+255),w,b
  2326  001192  0100               	movlb	0	; () banked
  2327  001194  5D78               	subwf	sprintf@c& (0+255),w,b
  2328  001196  0100               	movlb	0	; () banked
  2329  001198  516C               	movf	(sprintf@width+1)& (0+255),w,b
  2330  00119A  0A80               	xorlw	128
  2331  00119C  5847               	subwfb	??_sprintf& (0+255),w,c
  2332  00119E  B0D8               	btfsc	status,0,c
  2333  0011A0  D00B               	goto	l2864
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;doprnt.c: 1382: width -= c;
  2337  0011A2  0100               	movlb	0	; () banked
  2338  0011A4  5178               	movf	sprintf@c& (0+255),w,b
  2339  0011A6  0100               	movlb	0	; () banked
  2340  0011A8  5F6B               	subwf	sprintf@width& (0+255),f,b
  2341  0011AA  0E00               	movlw	0
  2342  0011AC  0100               	movlb	0	; () banked
  2343  0011AE  BF78               	btfsc	sprintf@c& (0+255),7,b
  2344  0011B0  0EFF               	movlw	255
  2345  0011B2  0100               	movlb	0	; () banked
  2346  0011B4  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  2347  0011B6  D005               	goto	l2866
  2348  0011B8                     l2864:
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;doprnt.c: 1383: else
  2352                           ;doprnt.c: 1384: width = 0;
  2353  0011B8  0E00               	movlw	0
  2354  0011BA  0100               	movlb	0	; () banked
  2355  0011BC  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  2356  0011BE  0E00               	movlw	0
  2357  0011C0  6F6B               	movwf	sprintf@width& (0+255),b
  2358  0011C2                     l2866:
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;doprnt.c: 1422: {
  2362                           ;doprnt.c: 1424: if(width
  2363                           ;doprnt.c: 1428: )
  2364  0011C2  0100               	movlb	0	; () banked
  2365  0011C4  516B               	movf	sprintf@width& (0+255),w,b
  2366  0011C6  0100               	movlb	0	; () banked
  2367  0011C8  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  2368  0011CA  B4D8               	btfsc	status,2,c
  2369  0011CC  D012               	goto	l2874
  2370  0011CE                     l2868:
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2374  0011CE  C040  FFD9         	movff	sprintf@sp,fsr2l
  2375  0011D2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2376  0011D6  0E20               	movlw	32
  2377  0011D8  6EDF               	movwf	indf2,c
  2378                           
  2379                           ; BSR set to: 0
  2380  0011DA  4A40               	infsnz	sprintf@sp,f,c
  2381  0011DC  2A41               	incf	sprintf@sp+1,f,c
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;doprnt.c: 1431: while(--width);
  2385  0011DE  0100               	movlb	0	; () banked
  2386  0011E0  076B               	decf	sprintf@width& (0+255),f,b
  2387  0011E2  A0D8               	btfss	status,0,c
  2388  0011E4  076C               	decf	(sprintf@width+1)& (0+255),f,b
  2389  0011E6  0100               	movlb	0	; () banked
  2390  0011E8  516B               	movf	sprintf@width& (0+255),w,b
  2391  0011EA  0100               	movlb	0	; () banked
  2392  0011EC  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  2393  0011EE  A4D8               	btfss	status,2,c
  2394  0011F0  D7EE               	goto	l2868
  2395  0011F2                     l2874:
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;doprnt.c: 1438: if(flag & 0x03)
  2399  0011F2  0E03               	movlw	3
  2400  0011F4  0100               	movlb	0	; () banked
  2401  0011F6  1569               	andwf	sprintf@flag& (0+255),w,b
  2402  0011F8  6E47               	movwf	??_sprintf& (0+255),c
  2403  0011FA  0E00               	movlw	0
  2404  0011FC  0100               	movlb	0	; () banked
  2405  0011FE  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  2406  001200  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2407  001202  5047               	movf	??_sprintf,w,c
  2408  001204  1048               	iorwf	??_sprintf+1,w,c
  2409  001206  B4D8               	btfsc	status,2,c
  2410  001208  D008               	goto	l2880
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2414  00120A  C040  FFD9         	movff	sprintf@sp,fsr2l
  2415  00120E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2416  001212  0E2D               	movlw	45
  2417  001214  6EDF               	movwf	indf2,c
  2418  001216                     l2878:
  2419                           
  2420                           ; BSR set to: 0
  2421  001216  4A40               	infsnz	sprintf@sp,f,c
  2422  001218  2A41               	incf	sprintf@sp+1,f,c
  2423  00121A                     l2880:
  2424                           
  2425                           ; BSR set to: 0
  2426  00121A  C042  FFF6         	movff	sprintf@f,tblptrl
  2427  00121E  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2428  001222  4A42               	infsnz	sprintf@f,f,c
  2429  001224  2A43               	incf	sprintf@f+1,f,c
  2430  001226                     	if	0	;tblptru may be non-zero
  2431  001226                     	endif
  2432  001226                     	if	0	;tblptru may be non-zero
  2433  001226                     	endif
  2434  001226  0008               	tblrd		*
  2435  001228  CFF5 F078          	movff	tablat,sprintf@c
  2436  00122C  0100               	movlb	0	; () banked
  2437  00122E  5178               	movf	sprintf@c& (0+255),w,b
  2438  001230  A4D8               	btfss	status,2,c
  2439  001232  EF53  F004         	goto	l2626
  2440  001236                     l2882:
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;doprnt.c: 1538: *sp = 0;
  2444  001236  C040  FFD9         	movff	sprintf@sp,fsr2l
  2445  00123A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2446  00123E  0E00               	movlw	0
  2447  001240  6EDF               	movwf	indf2,c
  2448  001242  0012               	return	
  2449  001244                     __end_of_sprintf:
  2450                           	opt stack 0
  2451                           tblptru	equ	0xFF8
  2452                           tblptrh	equ	0xFF7
  2453                           tblptrl	equ	0xFF6
  2454                           tablat	equ	0xFF5
  2455                           prodh	equ	0xFF4
  2456                           prodl	equ	0xFF3
  2457                           wreg	equ	0xFE8
  2458                           indf2	equ	0xFDF
  2459                           postinc2	equ	0xFDE
  2460                           postdec2	equ	0xFDD
  2461                           fsr2h	equ	0xFDA
  2462                           fsr2l	equ	0xFD9
  2463                           status	equ	0xFD8
  2464                           
  2465 ;; *************** function _scale *****************
  2466 ;; Defined at:
  2467 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2468 ;; Parameters:    Size  Location     Type
  2469 ;;  scl             1    wreg     char 
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;  scl             1   41[COMRAM] char 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  3   35[COMRAM] char 
  2474 ;; Registers used:
  2475 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2481 ;;      Params:         3       0       0       0       0       0       0       0       0
  2482 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2483 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2484 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2485 ;;Total ram usage:        7 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    2
  2488 ;; This function calls:
  2489 ;;		___awdiv
  2490 ;;		___awmod
  2491 ;;		___ftmul
  2492 ;;		___wmul
  2493 ;; This function is called by:
  2494 ;;		_sprintf
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           	psect	text2
  2499  001244                     __ptext2:
  2500                           	opt stack 0
  2501  001244                     _scale:
  2502                           	opt stack 27
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;incstack = 0
  2506                           ;scale@scl stored from wreg
  2507  001244  6E2A               	movwf	scale@scl,c
  2508                           
  2509                           ;doprnt.c: 428: if(scl < 0) {
  2510  001246  AE2A               	btfss	scale@scl,7,c
  2511  001248  D0FB               	goto	l2258
  2512                           
  2513                           ;doprnt.c: 429: scl = -scl;
  2514  00124A  6C2A               	negf	scale@scl,c
  2515                           
  2516                           ;doprnt.c: 430: if(scl>=110)
  2517  00124C  502A               	movf	scale@scl,w,c
  2518  00124E  0A80               	xorlw	128
  2519  001250  0F12               	addlw	-238
  2520  001252  A0D8               	btfss	status,0,c
  2521  001254  D091               	goto	l2248
  2522                           
  2523                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2524  001256  0E00               	movlw	0
  2525  001258  6E12               	movwf	___wmul@multiplicand+1,c
  2526  00125A  0E03               	movlw	3
  2527  00125C  6E11               	movwf	___wmul@multiplicand,c
  2528  00125E  0E00               	movlw	0
  2529  001260  6E0A               	movwf	___awdiv@divisor+1,c
  2530  001262  0E0A               	movlw	10
  2531  001264  6E09               	movwf	___awdiv@divisor,c
  2532  001266  0E00               	movlw	0
  2533  001268  6E04               	movwf	___awmod@divisor+1,c
  2534  00126A  0E64               	movlw	100
  2535  00126C  6E03               	movwf	___awmod@divisor,c
  2536  00126E  502A               	movf	scale@scl,w,c
  2537  001270  6E01               	movwf	___awmod@dividend,c
  2538  001272  6A02               	clrf	___awmod@dividend+1,c
  2539  001274  BE01               	btfsc	___awmod@dividend,7,c
  2540  001276  0602               	decf	___awmod@dividend+1,f,c
  2541  001278  ECB7  F012         	call	___awmod	;wreg free
  2542  00127C  C001  F007         	movff	?___awmod,___awdiv@dividend
  2543  001280  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2544  001284  EC34  F012         	call	___awdiv	;wreg free
  2545  001288  0E09               	movlw	9
  2546  00128A  2407               	addwf	?___awdiv,w,c
  2547  00128C  6E0F               	movwf	___wmul@multiplier,c
  2548  00128E  0E00               	movlw	0
  2549  001290  2008               	addwfc	?___awdiv+1,w,c
  2550  001292  6E10               	movwf	___wmul@multiplier+1,c
  2551  001294  EC8C  F013         	call	___wmul	;wreg free
  2552  001298  0E50               	movlw	low __npowers_
  2553  00129A  240F               	addwf	?___wmul,w,c
  2554  00129C  6EF6               	movwf	tblptrl,c
  2555  00129E  0E08               	movlw	high __npowers_
  2556  0012A0  2010               	addwfc	?___wmul+1,w,c
  2557  0012A2  6EF7               	movwf	tblptrh,c
  2558  0012A4                     	if	0	;There are less than 3 active tblptr bytes
  2559  0012A4                     	endif
  2560  0012A4  0009               	tblrd		*+
  2561  0012A6  CFF5 F018          	movff	tablat,___ftmul@f2
  2562  0012AA  0009               	tblrd		*+
  2563  0012AC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2564  0012B0  000A               	tblrd		*-
  2565  0012B2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2566  0012B6  0E00               	movlw	0
  2567  0012B8  6E0A               	movwf	___awdiv@divisor+1,c
  2568  0012BA  0E64               	movlw	100
  2569  0012BC  6E09               	movwf	___awdiv@divisor,c
  2570  0012BE  502A               	movf	scale@scl,w,c
  2571  0012C0  6E07               	movwf	___awdiv@dividend,c
  2572  0012C2  6A08               	clrf	___awdiv@dividend+1,c
  2573  0012C4  BE07               	btfsc	___awdiv@dividend,7,c
  2574  0012C6  0608               	decf	___awdiv@dividend+1,f,c
  2575  0012C8  EC34  F012         	call	___awdiv	;wreg free
  2576  0012CC  0E12               	movlw	18
  2577  0012CE  2407               	addwf	?___awdiv,w,c
  2578  0012D0  6E0F               	movwf	___wmul@multiplier,c
  2579  0012D2  0E00               	movlw	0
  2580  0012D4  2008               	addwfc	?___awdiv+1,w,c
  2581  0012D6  6E10               	movwf	___wmul@multiplier+1,c
  2582  0012D8  0E00               	movlw	0
  2583  0012DA  6E12               	movwf	___wmul@multiplicand+1,c
  2584  0012DC  0E03               	movlw	3
  2585  0012DE  6E11               	movwf	___wmul@multiplicand,c
  2586  0012E0  EC8C  F013         	call	___wmul	;wreg free
  2587  0012E4  0E50               	movlw	low __npowers_
  2588  0012E6  240F               	addwf	?___wmul,w,c
  2589  0012E8  6EF6               	movwf	tblptrl,c
  2590  0012EA  0E08               	movlw	high __npowers_
  2591  0012EC  2010               	addwfc	?___wmul+1,w,c
  2592  0012EE  6EF7               	movwf	tblptrh,c
  2593  0012F0                     	if	0	;There are less than 3 active tblptr bytes
  2594  0012F0                     	endif
  2595  0012F0  0009               	tblrd		*+
  2596  0012F2  CFF5 F015          	movff	tablat,___ftmul@f1
  2597  0012F6  0009               	tblrd		*+
  2598  0012F8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2599  0012FC  000A               	tblrd		*-
  2600  0012FE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2601  001302  ECE0  F00F         	call	___ftmul	;wreg free
  2602  001306  C015  F027         	movff	?___ftmul,_scale$705
  2603  00130A  C016  F028         	movff	?___ftmul+1,_scale$705+1
  2604  00130E  C017  F029         	movff	?___ftmul+2,_scale$705+2
  2605                           
  2606                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2607  001312  C027  F015         	movff	_scale$705,___ftmul@f1
  2608  001316  C028  F016         	movff	_scale$705+1,___ftmul@f1+1
  2609  00131A  C029  F017         	movff	_scale$705+2,___ftmul@f1+2
  2610  00131E  0E00               	movlw	0
  2611  001320  6E12               	movwf	___wmul@multiplicand+1,c
  2612  001322  0E03               	movlw	3
  2613  001324  6E11               	movwf	___wmul@multiplicand,c
  2614  001326  0E00               	movlw	0
  2615  001328  6E04               	movwf	___awmod@divisor+1,c
  2616  00132A  0E0A               	movlw	10
  2617  00132C  6E03               	movwf	___awmod@divisor,c
  2618  00132E  502A               	movf	scale@scl,w,c
  2619  001330  6E01               	movwf	___awmod@dividend,c
  2620  001332  6A02               	clrf	___awmod@dividend+1,c
  2621  001334  BE01               	btfsc	___awmod@dividend,7,c
  2622  001336  0602               	decf	___awmod@dividend+1,f,c
  2623  001338  ECB7  F012         	call	___awmod	;wreg free
  2624  00133C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2625  001340  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2626  001344  EC8C  F013         	call	___wmul	;wreg free
  2627  001348  0E50               	movlw	low __npowers_
  2628  00134A  240F               	addwf	?___wmul,w,c
  2629  00134C  6EF6               	movwf	tblptrl,c
  2630  00134E  0E08               	movlw	high __npowers_
  2631  001350  2010               	addwfc	?___wmul+1,w,c
  2632  001352  6EF7               	movwf	tblptrh,c
  2633  001354                     	if	0	;There are less than 3 active tblptr bytes
  2634  001354                     	endif
  2635  001354  0009               	tblrd		*+
  2636  001356  CFF5 F018          	movff	tablat,___ftmul@f2
  2637  00135A  0009               	tblrd		*+
  2638  00135C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2639  001360  000A               	tblrd		*-
  2640  001362  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2641  001366  ECE0  F00F         	call	___ftmul	;wreg free
  2642  00136A  C015  F024         	movff	?___ftmul,?_scale
  2643  00136E  C016  F025         	movff	?___ftmul+1,?_scale+1
  2644  001372  C017  F026         	movff	?___ftmul+2,?_scale+2
  2645  001376  0012               	return	
  2646  001378                     l2248:
  2647                           
  2648                           ;doprnt.c: 432: else if(scl > 10)
  2649  001378  502A               	movf	scale@scl,w,c
  2650  00137A  0A80               	xorlw	128
  2651  00137C  0F75               	addlw	-139
  2652  00137E  A0D8               	btfss	status,0,c
  2653  001380  D04D               	goto	l2254
  2654                           
  2655                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2656  001382  0E00               	movlw	0
  2657  001384  6E0A               	movwf	___awdiv@divisor+1,c
  2658  001386  0E0A               	movlw	10
  2659  001388  6E09               	movwf	___awdiv@divisor,c
  2660  00138A  502A               	movf	scale@scl,w,c
  2661  00138C  6E07               	movwf	___awdiv@dividend,c
  2662  00138E  6A08               	clrf	___awdiv@dividend+1,c
  2663  001390  BE07               	btfsc	___awdiv@dividend,7,c
  2664  001392  0608               	decf	___awdiv@dividend+1,f,c
  2665  001394  EC34  F012         	call	___awdiv	;wreg free
  2666  001398  0E09               	movlw	9
  2667  00139A  2407               	addwf	?___awdiv,w,c
  2668  00139C  6E0F               	movwf	___wmul@multiplier,c
  2669  00139E  0E00               	movlw	0
  2670  0013A0  2008               	addwfc	?___awdiv+1,w,c
  2671  0013A2  6E10               	movwf	___wmul@multiplier+1,c
  2672  0013A4  0E00               	movlw	0
  2673  0013A6  6E12               	movwf	___wmul@multiplicand+1,c
  2674  0013A8  0E03               	movlw	3
  2675  0013AA  6E11               	movwf	___wmul@multiplicand,c
  2676  0013AC  EC8C  F013         	call	___wmul	;wreg free
  2677  0013B0  0E50               	movlw	low __npowers_
  2678  0013B2  240F               	addwf	?___wmul,w,c
  2679  0013B4  6EF6               	movwf	tblptrl,c
  2680  0013B6  0E08               	movlw	high __npowers_
  2681  0013B8  2010               	addwfc	?___wmul+1,w,c
  2682  0013BA  6EF7               	movwf	tblptrh,c
  2683  0013BC                     	if	0	;There are less than 3 active tblptr bytes
  2684  0013BC                     	endif
  2685  0013BC  0009               	tblrd		*+
  2686  0013BE  CFF5 F015          	movff	tablat,___ftmul@f1
  2687  0013C2  0009               	tblrd		*+
  2688  0013C4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2689  0013C8  000A               	tblrd		*-
  2690  0013CA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2691  0013CE  0E00               	movlw	0
  2692  0013D0  6E12               	movwf	___wmul@multiplicand+1,c
  2693  0013D2  0E03               	movlw	3
  2694  0013D4  6E11               	movwf	___wmul@multiplicand,c
  2695  0013D6  0E00               	movlw	0
  2696  0013D8  6E04               	movwf	___awmod@divisor+1,c
  2697  0013DA  0E0A               	movlw	10
  2698  0013DC  6E03               	movwf	___awmod@divisor,c
  2699  0013DE  502A               	movf	scale@scl,w,c
  2700  0013E0  6E01               	movwf	___awmod@dividend,c
  2701  0013E2  6A02               	clrf	___awmod@dividend+1,c
  2702  0013E4  BE01               	btfsc	___awmod@dividend,7,c
  2703  0013E6  0602               	decf	___awmod@dividend+1,f,c
  2704  0013E8  ECB7  F012         	call	___awmod	;wreg free
  2705  0013EC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2706  0013F0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2707  0013F4  EC8C  F013         	call	___wmul	;wreg free
  2708  0013F8  0E50               	movlw	low __npowers_
  2709  0013FA  240F               	addwf	?___wmul,w,c
  2710  0013FC  6EF6               	movwf	tblptrl,c
  2711  0013FE  0E08               	movlw	high __npowers_
  2712  001400  2010               	addwfc	?___wmul+1,w,c
  2713  001402  6EF7               	movwf	tblptrh,c
  2714  001404                     	if	0	;There are less than 3 active tblptr bytes
  2715  001404                     	endif
  2716  001404  0009               	tblrd		*+
  2717  001406  CFF5 F018          	movff	tablat,___ftmul@f2
  2718  00140A  0009               	tblrd		*+
  2719  00140C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2720  001410  000A               	tblrd		*-
  2721  001412  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2722  001416  ECE0  F00F         	call	___ftmul	;wreg free
  2723  00141A  D7A7               	goto	L3
  2724  00141C                     l2254:
  2725                           
  2726                           ;doprnt.c: 434: return _npowers_[scl];
  2727  00141C  502A               	movf	scale@scl,w,c
  2728  00141E  0D03               	mullw	3
  2729  001420  0E50               	movlw	low __npowers_
  2730  001422  24F3               	addwf	prodl,w,c
  2731  001424  6EF6               	movwf	tblptrl,c
  2732  001426  0E08               	movlw	high __npowers_
  2733  001428  20F4               	addwfc	prodh,w,c
  2734  00142A  6EF7               	movwf	tblptrh,c
  2735  00142C                     	if	0	;There are less than 3 active tblptr bytes
  2736  00142C                     	endif
  2737  00142C  0009               	tblrd		*+
  2738  00142E  CFF5 F024          	movff	tablat,?_scale
  2739  001432  0009               	tblrd		*+
  2740  001434  CFF5 F025          	movff	tablat,?_scale+1
  2741  001438  000A               	tblrd		*-
  2742  00143A  CFF5 F026          	movff	tablat,?_scale+2
  2743  00143E  0012               	return	
  2744  001440                     l2258:
  2745                           
  2746                           ;doprnt.c: 435: }
  2747                           ;doprnt.c: 436: if(scl>=110)
  2748  001440  502A               	movf	scale@scl,w,c
  2749  001442  0A80               	xorlw	128
  2750  001444  0F12               	addlw	-238
  2751  001446  A0D8               	btfss	status,0,c
  2752  001448  D091               	goto	l2266
  2753                           
  2754                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2755  00144A  0E00               	movlw	0
  2756  00144C  6E12               	movwf	___wmul@multiplicand+1,c
  2757  00144E  0E03               	movlw	3
  2758  001450  6E11               	movwf	___wmul@multiplicand,c
  2759  001452  0E00               	movlw	0
  2760  001454  6E0A               	movwf	___awdiv@divisor+1,c
  2761  001456  0E0A               	movlw	10
  2762  001458  6E09               	movwf	___awdiv@divisor,c
  2763  00145A  0E00               	movlw	0
  2764  00145C  6E04               	movwf	___awmod@divisor+1,c
  2765  00145E  0E64               	movlw	100
  2766  001460  6E03               	movwf	___awmod@divisor,c
  2767  001462  502A               	movf	scale@scl,w,c
  2768  001464  6E01               	movwf	___awmod@dividend,c
  2769  001466  6A02               	clrf	___awmod@dividend+1,c
  2770  001468  BE01               	btfsc	___awmod@dividend,7,c
  2771  00146A  0602               	decf	___awmod@dividend+1,f,c
  2772  00146C  ECB7  F012         	call	___awmod	;wreg free
  2773  001470  C001  F007         	movff	?___awmod,___awdiv@dividend
  2774  001474  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2775  001478  EC34  F012         	call	___awdiv	;wreg free
  2776  00147C  0E09               	movlw	9
  2777  00147E  2407               	addwf	?___awdiv,w,c
  2778  001480  6E0F               	movwf	___wmul@multiplier,c
  2779  001482  0E00               	movlw	0
  2780  001484  2008               	addwfc	?___awdiv+1,w,c
  2781  001486  6E10               	movwf	___wmul@multiplier+1,c
  2782  001488  EC8C  F013         	call	___wmul	;wreg free
  2783  00148C  0E29               	movlw	low __powers_
  2784  00148E  240F               	addwf	?___wmul,w,c
  2785  001490  6EF6               	movwf	tblptrl,c
  2786  001492  0E08               	movlw	high __powers_
  2787  001494  2010               	addwfc	?___wmul+1,w,c
  2788  001496  6EF7               	movwf	tblptrh,c
  2789  001498                     	if	0	;There are less than 3 active tblptr bytes
  2790  001498                     	endif
  2791  001498  0009               	tblrd		*+
  2792  00149A  CFF5 F018          	movff	tablat,___ftmul@f2
  2793  00149E  0009               	tblrd		*+
  2794  0014A0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2795  0014A4  000A               	tblrd		*-
  2796  0014A6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2797  0014AA  0E00               	movlw	0
  2798  0014AC  6E0A               	movwf	___awdiv@divisor+1,c
  2799  0014AE  0E64               	movlw	100
  2800  0014B0  6E09               	movwf	___awdiv@divisor,c
  2801  0014B2  502A               	movf	scale@scl,w,c
  2802  0014B4  6E07               	movwf	___awdiv@dividend,c
  2803  0014B6  6A08               	clrf	___awdiv@dividend+1,c
  2804  0014B8  BE07               	btfsc	___awdiv@dividend,7,c
  2805  0014BA  0608               	decf	___awdiv@dividend+1,f,c
  2806  0014BC  EC34  F012         	call	___awdiv	;wreg free
  2807  0014C0  0E12               	movlw	18
  2808  0014C2  2407               	addwf	?___awdiv,w,c
  2809  0014C4  6E0F               	movwf	___wmul@multiplier,c
  2810  0014C6  0E00               	movlw	0
  2811  0014C8  2008               	addwfc	?___awdiv+1,w,c
  2812  0014CA  6E10               	movwf	___wmul@multiplier+1,c
  2813  0014CC  0E00               	movlw	0
  2814  0014CE  6E12               	movwf	___wmul@multiplicand+1,c
  2815  0014D0  0E03               	movlw	3
  2816  0014D2  6E11               	movwf	___wmul@multiplicand,c
  2817  0014D4  EC8C  F013         	call	___wmul	;wreg free
  2818  0014D8  0E29               	movlw	low __powers_
  2819  0014DA  240F               	addwf	?___wmul,w,c
  2820  0014DC  6EF6               	movwf	tblptrl,c
  2821  0014DE  0E08               	movlw	high __powers_
  2822  0014E0  2010               	addwfc	?___wmul+1,w,c
  2823  0014E2  6EF7               	movwf	tblptrh,c
  2824  0014E4                     	if	0	;There are less than 3 active tblptr bytes
  2825  0014E4                     	endif
  2826  0014E4  0009               	tblrd		*+
  2827  0014E6  CFF5 F015          	movff	tablat,___ftmul@f1
  2828  0014EA  0009               	tblrd		*+
  2829  0014EC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2830  0014F0  000A               	tblrd		*-
  2831  0014F2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2832  0014F6  ECE0  F00F         	call	___ftmul	;wreg free
  2833  0014FA  C015  F027         	movff	?___ftmul,_scale$705
  2834  0014FE  C016  F028         	movff	?___ftmul+1,_scale$705+1
  2835  001502  C017  F029         	movff	?___ftmul+2,_scale$705+2
  2836                           
  2837                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2838  001506  C027  F015         	movff	_scale$705,___ftmul@f1
  2839  00150A  C028  F016         	movff	_scale$705+1,___ftmul@f1+1
  2840  00150E  C029  F017         	movff	_scale$705+2,___ftmul@f1+2
  2841  001512  0E00               	movlw	0
  2842  001514  6E12               	movwf	___wmul@multiplicand+1,c
  2843  001516  0E03               	movlw	3
  2844  001518  6E11               	movwf	___wmul@multiplicand,c
  2845  00151A  0E00               	movlw	0
  2846  00151C  6E04               	movwf	___awmod@divisor+1,c
  2847  00151E  0E0A               	movlw	10
  2848  001520  6E03               	movwf	___awmod@divisor,c
  2849  001522  502A               	movf	scale@scl,w,c
  2850  001524  6E01               	movwf	___awmod@dividend,c
  2851  001526  6A02               	clrf	___awmod@dividend+1,c
  2852  001528  BE01               	btfsc	___awmod@dividend,7,c
  2853  00152A  0602               	decf	___awmod@dividend+1,f,c
  2854  00152C  ECB7  F012         	call	___awmod	;wreg free
  2855  001530  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2856  001534  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2857  001538  EC8C  F013         	call	___wmul	;wreg free
  2858  00153C  0E29               	movlw	low __powers_
  2859  00153E  240F               	addwf	?___wmul,w,c
  2860  001540  6EF6               	movwf	tblptrl,c
  2861  001542  0E08               	movlw	high __powers_
  2862  001544  2010               	addwfc	?___wmul+1,w,c
  2863  001546  6EF7               	movwf	tblptrh,c
  2864  001548                     	if	0	;There are less than 3 active tblptr bytes
  2865  001548                     	endif
  2866  001548  0009               	tblrd		*+
  2867  00154A  CFF5 F018          	movff	tablat,___ftmul@f2
  2868  00154E  0009               	tblrd		*+
  2869  001550  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2870  001554  000A               	tblrd		*-
  2871  001556  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2872  00155A  ECE0  F00F         	call	___ftmul	;wreg free
  2873  00155E  C015  F024         	movff	?___ftmul,?_scale
  2874  001562  C016  F025         	movff	?___ftmul+1,?_scale+1
  2875  001566  C017  F026         	movff	?___ftmul+2,?_scale+2
  2876  00156A  0012               	return	
  2877  00156C                     l2266:
  2878                           
  2879                           ;doprnt.c: 438: else if(scl > 10)
  2880  00156C  502A               	movf	scale@scl,w,c
  2881  00156E  0A80               	xorlw	128
  2882  001570  0F75               	addlw	-139
  2883  001572  A0D8               	btfss	status,0,c
  2884  001574  D04D               	goto	l2272
  2885                           
  2886                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2887  001576  0E00               	movlw	0
  2888  001578  6E0A               	movwf	___awdiv@divisor+1,c
  2889  00157A  0E0A               	movlw	10
  2890  00157C  6E09               	movwf	___awdiv@divisor,c
  2891  00157E  502A               	movf	scale@scl,w,c
  2892  001580  6E07               	movwf	___awdiv@dividend,c
  2893  001582  6A08               	clrf	___awdiv@dividend+1,c
  2894  001584  BE07               	btfsc	___awdiv@dividend,7,c
  2895  001586  0608               	decf	___awdiv@dividend+1,f,c
  2896  001588  EC34  F012         	call	___awdiv	;wreg free
  2897  00158C  0E09               	movlw	9
  2898  00158E  2407               	addwf	?___awdiv,w,c
  2899  001590  6E0F               	movwf	___wmul@multiplier,c
  2900  001592  0E00               	movlw	0
  2901  001594  2008               	addwfc	?___awdiv+1,w,c
  2902  001596  6E10               	movwf	___wmul@multiplier+1,c
  2903  001598  0E00               	movlw	0
  2904  00159A  6E12               	movwf	___wmul@multiplicand+1,c
  2905  00159C  0E03               	movlw	3
  2906  00159E  6E11               	movwf	___wmul@multiplicand,c
  2907  0015A0  EC8C  F013         	call	___wmul	;wreg free
  2908  0015A4  0E29               	movlw	low __powers_
  2909  0015A6  240F               	addwf	?___wmul,w,c
  2910  0015A8  6EF6               	movwf	tblptrl,c
  2911  0015AA  0E08               	movlw	high __powers_
  2912  0015AC  2010               	addwfc	?___wmul+1,w,c
  2913  0015AE  6EF7               	movwf	tblptrh,c
  2914  0015B0                     	if	0	;There are less than 3 active tblptr bytes
  2915  0015B0                     	endif
  2916  0015B0  0009               	tblrd		*+
  2917  0015B2  CFF5 F015          	movff	tablat,___ftmul@f1
  2918  0015B6  0009               	tblrd		*+
  2919  0015B8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2920  0015BC  000A               	tblrd		*-
  2921  0015BE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2922  0015C2  0E00               	movlw	0
  2923  0015C4  6E12               	movwf	___wmul@multiplicand+1,c
  2924  0015C6  0E03               	movlw	3
  2925  0015C8  6E11               	movwf	___wmul@multiplicand,c
  2926  0015CA  0E00               	movlw	0
  2927  0015CC  6E04               	movwf	___awmod@divisor+1,c
  2928  0015CE  0E0A               	movlw	10
  2929  0015D0  6E03               	movwf	___awmod@divisor,c
  2930  0015D2  502A               	movf	scale@scl,w,c
  2931  0015D4  6E01               	movwf	___awmod@dividend,c
  2932  0015D6  6A02               	clrf	___awmod@dividend+1,c
  2933  0015D8  BE01               	btfsc	___awmod@dividend,7,c
  2934  0015DA  0602               	decf	___awmod@dividend+1,f,c
  2935  0015DC  ECB7  F012         	call	___awmod	;wreg free
  2936  0015E0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2937  0015E4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2938  0015E8  EC8C  F013         	call	___wmul	;wreg free
  2939  0015EC  0E29               	movlw	low __powers_
  2940  0015EE  240F               	addwf	?___wmul,w,c
  2941  0015F0  6EF6               	movwf	tblptrl,c
  2942  0015F2  0E08               	movlw	high __powers_
  2943  0015F4  2010               	addwfc	?___wmul+1,w,c
  2944  0015F6  6EF7               	movwf	tblptrh,c
  2945  0015F8                     	if	0	;There are less than 3 active tblptr bytes
  2946  0015F8                     	endif
  2947  0015F8  0009               	tblrd		*+
  2948  0015FA  CFF5 F018          	movff	tablat,___ftmul@f2
  2949  0015FE  0009               	tblrd		*+
  2950  001600  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2951  001604  000A               	tblrd		*-
  2952  001606  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2953  00160A  ECE0  F00F         	call	___ftmul	;wreg free
  2954  00160E  D7A7               	goto	L4
  2955  001610                     l2272:
  2956                           
  2957                           ;doprnt.c: 440: return _powers_[scl];
  2958  001610  502A               	movf	scale@scl,w,c
  2959  001612  0D03               	mullw	3
  2960  001614  0E29               	movlw	low __powers_
  2961  001616  24F3               	addwf	prodl,w,c
  2962  001618  6EF6               	movwf	tblptrl,c
  2963  00161A  0E08               	movlw	high __powers_
  2964  00161C  20F4               	addwfc	prodh,w,c
  2965  00161E  6EF7               	movwf	tblptrh,c
  2966  001620                     	if	0	;There are less than 3 active tblptr bytes
  2967  001620                     	endif
  2968  001620  0009               	tblrd		*+
  2969  001622  CFF5 F024          	movff	tablat,?_scale
  2970  001626  0009               	tblrd		*+
  2971  001628  CFF5 F025          	movff	tablat,?_scale+1
  2972  00162C  000A               	tblrd		*-
  2973  00162E  CFF5 F026          	movff	tablat,?_scale+2
  2974  001632  0012               	return	
  2975  001634                     __end_of_scale:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           wreg	equ	0xFE8
  2984                           indf2	equ	0xFDF
  2985                           postinc2	equ	0xFDE
  2986                           postdec2	equ	0xFDD
  2987                           fsr2h	equ	0xFDA
  2988                           fsr2l	equ	0xFD9
  2989                           status	equ	0xFD8
  2990                           
  2991 ;; *************** function _isdigit *****************
  2992 ;; Defined at:
  2993 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  c               1    wreg     unsigned char 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;  c               1    2[COMRAM] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;		None               void
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3007 ;;      Params:         0       0       0       0       0       0       0       0       0
  3008 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3009 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3010 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3011 ;;Total ram usage:        3 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; This function calls:
  3014 ;;		Nothing
  3015 ;; This function is called by:
  3016 ;;		_sprintf
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text3
  3021  002788                     __ptext3:
  3022                           	opt stack 0
  3023  002788                     _isdigit:
  3024                           	opt stack 29
  3025                           
  3026                           ;incstack = 0
  3027                           ;isdigit@c stored from wreg
  3028  002788  6E03               	movwf	isdigit@c,c
  3029  00278A  0E00               	movlw	0
  3030  00278C  6E02               	movwf	_isdigit$377,c
  3031  00278E  0E3A               	movlw	58
  3032  002790  6003               	cpfslt	isdigit@c,c
  3033  002792  D005               	goto	l2284
  3034  002794  0E2F               	movlw	47
  3035  002796  6403               	cpfsgt	isdigit@c,c
  3036  002798  D002               	goto	l2284
  3037  00279A  0E01               	movlw	1
  3038  00279C  6E02               	movwf	_isdigit$377,c
  3039  00279E                     l2284:
  3040  00279E  C002  F001         	movff	_isdigit$377,??_isdigit
  3041  0027A2  3001               	rrcf	??_isdigit,w,c
  3042  0027A4  0012               	return	
  3043  0027A6                     __end_of_isdigit:
  3044                           	opt stack 0
  3045                           tblptru	equ	0xFF8
  3046                           tblptrh	equ	0xFF7
  3047                           tblptrl	equ	0xFF6
  3048                           tablat	equ	0xFF5
  3049                           prodh	equ	0xFF4
  3050                           prodl	equ	0xFF3
  3051                           wreg	equ	0xFE8
  3052                           indf2	equ	0xFDF
  3053                           postinc2	equ	0xFDE
  3054                           postdec2	equ	0xFDD
  3055                           fsr2h	equ	0xFDA
  3056                           fsr2l	equ	0xFD9
  3057                           status	equ	0xFD8
  3058                           
  3059 ;; *************** function _fround *****************
  3060 ;; Defined at:
  3061 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;  prec            1    wreg     unsigned char 
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;  prec            1   44[COMRAM] unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  3   35[COMRAM] unsigned char 
  3068 ;; Registers used:
  3069 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3075 ;;      Params:         3       0       0       0       0       0       0       0       0
  3076 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3077 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3078 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3079 ;;Total ram usage:       10 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    2
  3082 ;; This function calls:
  3083 ;;		___awdiv
  3084 ;;		___awmod
  3085 ;;		___ftmul
  3086 ;;		___wmul
  3087 ;; This function is called by:
  3088 ;;		_sprintf
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text4
  3093  001634                     __ptext4:
  3094                           	opt stack 0
  3095  001634                     _fround:
  3096                           	opt stack 27
  3097                           
  3098                           ;incstack = 0
  3099                           ;fround@prec stored from wreg
  3100  001634  6E2D               	movwf	fround@prec,c
  3101                           
  3102                           ;doprnt.c: 413: if(prec>=110)
  3103  001636  0E6D               	movlw	109
  3104  001638  642D               	cpfsgt	fround@prec,c
  3105  00163A  D09F               	goto	l2226
  3106                           
  3107                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3108  00163C  0E00               	movlw	0
  3109  00163E  6E12               	movwf	___wmul@multiplicand+1,c
  3110  001640  0E03               	movlw	3
  3111  001642  6E11               	movwf	___wmul@multiplicand,c
  3112  001644  0E00               	movlw	0
  3113  001646  6E0A               	movwf	___awdiv@divisor+1,c
  3114  001648  0E0A               	movlw	10
  3115  00164A  6E09               	movwf	___awdiv@divisor,c
  3116  00164C  0E00               	movlw	0
  3117  00164E  6E04               	movwf	___awmod@divisor+1,c
  3118  001650  0E64               	movlw	100
  3119  001652  6E03               	movwf	___awmod@divisor,c
  3120  001654  C02D  F001         	movff	fround@prec,___awmod@dividend
  3121  001658  6A02               	clrf	___awmod@dividend+1,c
  3122  00165A  ECB7  F012         	call	___awmod	;wreg free
  3123  00165E  C001  F007         	movff	?___awmod,___awdiv@dividend
  3124  001662  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3125  001666  EC34  F012         	call	___awdiv	;wreg free
  3126  00166A  0E09               	movlw	9
  3127  00166C  2407               	addwf	?___awdiv,w,c
  3128  00166E  6E0F               	movwf	___wmul@multiplier,c
  3129  001670  0E00               	movlw	0
  3130  001672  2008               	addwfc	?___awdiv+1,w,c
  3131  001674  6E10               	movwf	___wmul@multiplier+1,c
  3132  001676  EC8C  F013         	call	___wmul	;wreg free
  3133  00167A  0E50               	movlw	low __npowers_
  3134  00167C  240F               	addwf	?___wmul,w,c
  3135  00167E  6EF6               	movwf	tblptrl,c
  3136  001680  0E08               	movlw	high __npowers_
  3137  001682  2010               	addwfc	?___wmul+1,w,c
  3138  001684  6EF7               	movwf	tblptrh,c
  3139  001686                     	if	0	;There are less than 3 active tblptr bytes
  3140  001686                     	endif
  3141  001686  0009               	tblrd		*+
  3142  001688  CFF5 F018          	movff	tablat,___ftmul@f2
  3143  00168C  0009               	tblrd		*+
  3144  00168E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3145  001692  000A               	tblrd		*-
  3146  001694  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3147  001698  0E00               	movlw	0
  3148  00169A  6E0A               	movwf	___awdiv@divisor+1,c
  3149  00169C  0E64               	movlw	100
  3150  00169E  6E09               	movwf	___awdiv@divisor,c
  3151  0016A0  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3152  0016A4  6A08               	clrf	___awdiv@dividend+1,c
  3153  0016A6  EC34  F012         	call	___awdiv	;wreg free
  3154  0016AA  0E12               	movlw	18
  3155  0016AC  2407               	addwf	?___awdiv,w,c
  3156  0016AE  6E0F               	movwf	___wmul@multiplier,c
  3157  0016B0  0E00               	movlw	0
  3158  0016B2  2008               	addwfc	?___awdiv+1,w,c
  3159  0016B4  6E10               	movwf	___wmul@multiplier+1,c
  3160  0016B6  0E00               	movlw	0
  3161  0016B8  6E12               	movwf	___wmul@multiplicand+1,c
  3162  0016BA  0E03               	movlw	3
  3163  0016BC  6E11               	movwf	___wmul@multiplicand,c
  3164  0016BE  EC8C  F013         	call	___wmul	;wreg free
  3165  0016C2  0E50               	movlw	low __npowers_
  3166  0016C4  240F               	addwf	?___wmul,w,c
  3167  0016C6  6EF6               	movwf	tblptrl,c
  3168  0016C8  0E08               	movlw	high __npowers_
  3169  0016CA  2010               	addwfc	?___wmul+1,w,c
  3170  0016CC  6EF7               	movwf	tblptrh,c
  3171  0016CE                     	if	0	;There are less than 3 active tblptr bytes
  3172  0016CE                     	endif
  3173  0016CE  0009               	tblrd		*+
  3174  0016D0  CFF5 F015          	movff	tablat,___ftmul@f1
  3175  0016D4  0009               	tblrd		*+
  3176  0016D6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3177  0016DA  000A               	tblrd		*-
  3178  0016DC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3179  0016E0  ECE0  F00F         	call	___ftmul	;wreg free
  3180  0016E4  C015  F02A         	movff	?___ftmul,_fround$703
  3181  0016E8  C016  F02B         	movff	?___ftmul+1,_fround$703+1
  3182  0016EC  C017  F02C         	movff	?___ftmul+2,_fround$703+2
  3183                           
  3184                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3185  0016F0  0E00               	movlw	0
  3186  0016F2  6E12               	movwf	___wmul@multiplicand+1,c
  3187  0016F4  0E03               	movlw	3
  3188  0016F6  6E11               	movwf	___wmul@multiplicand,c
  3189  0016F8  0E00               	movlw	0
  3190  0016FA  6E04               	movwf	___awmod@divisor+1,c
  3191  0016FC  0E0A               	movlw	10
  3192  0016FE  6E03               	movwf	___awmod@divisor,c
  3193  001700  C02D  F001         	movff	fround@prec,___awmod@dividend
  3194  001704  6A02               	clrf	___awmod@dividend+1,c
  3195  001706  ECB7  F012         	call	___awmod	;wreg free
  3196  00170A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3197  00170E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3198  001712  EC8C  F013         	call	___wmul	;wreg free
  3199  001716  0E50               	movlw	low __npowers_
  3200  001718  240F               	addwf	?___wmul,w,c
  3201  00171A  6EF6               	movwf	tblptrl,c
  3202  00171C  0E08               	movlw	high __npowers_
  3203  00171E  2010               	addwfc	?___wmul+1,w,c
  3204  001720  6EF7               	movwf	tblptrh,c
  3205  001722                     	if	0	;There are less than 3 active tblptr bytes
  3206  001722                     	endif
  3207  001722  0009               	tblrd		*+
  3208  001724  CFF5 F018          	movff	tablat,___ftmul@f2
  3209  001728  0009               	tblrd		*+
  3210  00172A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3211  00172E  000A               	tblrd		*-
  3212  001730  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3213  001734  C02A  F015         	movff	_fround$703,___ftmul@f1
  3214  001738  C02B  F016         	movff	_fround$703+1,___ftmul@f1+1
  3215  00173C  C02C  F017         	movff	_fround$703+2,___ftmul@f1+2
  3216  001740  ECE0  F00F         	call	___ftmul	;wreg free
  3217  001744  C015  F027         	movff	?___ftmul,_fround$704
  3218  001748  C016  F028         	movff	?___ftmul+1,_fround$704+1
  3219  00174C  C017  F029         	movff	?___ftmul+2,_fround$704+2
  3220                           
  3221                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3222  001750  C027  F015         	movff	_fround$704,___ftmul@f1
  3223  001754  C028  F016         	movff	_fround$704+1,___ftmul@f1+1
  3224  001758  C029  F017         	movff	_fround$704+2,___ftmul@f1+2
  3225  00175C  0E00               	movlw	0
  3226  00175E  6E18               	movwf	___ftmul@f2,c
  3227  001760  0E00               	movlw	0
  3228  001762  6E19               	movwf	___ftmul@f2+1,c
  3229  001764  0E3F               	movlw	63
  3230  001766  6E1A               	movwf	___ftmul@f2+2,c
  3231  001768  ECE0  F00F         	call	___ftmul	;wreg free
  3232  00176C  C015  F024         	movff	?___ftmul,?_fround
  3233  001770  C016  F025         	movff	?___ftmul+1,?_fround+1
  3234  001774  C017  F026         	movff	?___ftmul+2,?_fround+2
  3235  001778  0012               	return	
  3236  00177A                     l2226:
  3237                           
  3238                           ;doprnt.c: 415: else if(prec > 10)
  3239  00177A  0E0A               	movlw	10
  3240  00177C  642D               	cpfsgt	fround@prec,c
  3241  00177E  D05D               	goto	l2234
  3242                           
  3243                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3244  001780  0E00               	movlw	0
  3245  001782  6E12               	movwf	___wmul@multiplicand+1,c
  3246  001784  0E03               	movlw	3
  3247  001786  6E11               	movwf	___wmul@multiplicand,c
  3248  001788  0E00               	movlw	0
  3249  00178A  6E04               	movwf	___awmod@divisor+1,c
  3250  00178C  0E0A               	movlw	10
  3251  00178E  6E03               	movwf	___awmod@divisor,c
  3252  001790  C02D  F001         	movff	fround@prec,___awmod@dividend
  3253  001794  6A02               	clrf	___awmod@dividend+1,c
  3254  001796  ECB7  F012         	call	___awmod	;wreg free
  3255  00179A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3256  00179E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3257  0017A2  EC8C  F013         	call	___wmul	;wreg free
  3258  0017A6  0E50               	movlw	low __npowers_
  3259  0017A8  240F               	addwf	?___wmul,w,c
  3260  0017AA  6EF6               	movwf	tblptrl,c
  3261  0017AC  0E08               	movlw	high __npowers_
  3262  0017AE  2010               	addwfc	?___wmul+1,w,c
  3263  0017B0  6EF7               	movwf	tblptrh,c
  3264  0017B2                     	if	0	;There are less than 3 active tblptr bytes
  3265  0017B2                     	endif
  3266  0017B2  0009               	tblrd		*+
  3267  0017B4  CFF5 F018          	movff	tablat,___ftmul@f2
  3268  0017B8  0009               	tblrd		*+
  3269  0017BA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3270  0017BE  000A               	tblrd		*-
  3271  0017C0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3272  0017C4  0E00               	movlw	0
  3273  0017C6  6E0A               	movwf	___awdiv@divisor+1,c
  3274  0017C8  0E0A               	movlw	10
  3275  0017CA  6E09               	movwf	___awdiv@divisor,c
  3276  0017CC  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3277  0017D0  6A08               	clrf	___awdiv@dividend+1,c
  3278  0017D2  EC34  F012         	call	___awdiv	;wreg free
  3279  0017D6  0E09               	movlw	9
  3280  0017D8  2407               	addwf	?___awdiv,w,c
  3281  0017DA  6E0F               	movwf	___wmul@multiplier,c
  3282  0017DC  0E00               	movlw	0
  3283  0017DE  2008               	addwfc	?___awdiv+1,w,c
  3284  0017E0  6E10               	movwf	___wmul@multiplier+1,c
  3285  0017E2  0E00               	movlw	0
  3286  0017E4  6E12               	movwf	___wmul@multiplicand+1,c
  3287  0017E6  0E03               	movlw	3
  3288  0017E8  6E11               	movwf	___wmul@multiplicand,c
  3289  0017EA  EC8C  F013         	call	___wmul	;wreg free
  3290  0017EE  0E50               	movlw	low __npowers_
  3291  0017F0  240F               	addwf	?___wmul,w,c
  3292  0017F2  6EF6               	movwf	tblptrl,c
  3293  0017F4  0E08               	movlw	high __npowers_
  3294  0017F6  2010               	addwfc	?___wmul+1,w,c
  3295  0017F8  6EF7               	movwf	tblptrh,c
  3296  0017FA                     	if	0	;There are less than 3 active tblptr bytes
  3297  0017FA                     	endif
  3298  0017FA  0009               	tblrd		*+
  3299  0017FC  CFF5 F015          	movff	tablat,___ftmul@f1
  3300  001800  0009               	tblrd		*+
  3301  001802  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3302  001806  000A               	tblrd		*-
  3303  001808  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3304  00180C  ECE0  F00F         	call	___ftmul	;wreg free
  3305  001810  C015  F02A         	movff	?___ftmul,_fround$703
  3306  001814  C016  F02B         	movff	?___ftmul+1,_fround$703+1
  3307  001818  C017  F02C         	movff	?___ftmul+2,_fround$703+2
  3308                           
  3309                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3310  00181C  C02A  F015         	movff	_fround$703,___ftmul@f1
  3311  001820  C02B  F016         	movff	_fround$703+1,___ftmul@f1+1
  3312  001824  C02C  F017         	movff	_fround$703+2,___ftmul@f1+2
  3313  001828  0E00               	movlw	0
  3314  00182A  6E18               	movwf	___ftmul@f2,c
  3315  00182C  0E00               	movlw	0
  3316  00182E  6E19               	movwf	___ftmul@f2+1,c
  3317  001830  0E3F               	movlw	63
  3318  001832  6E1A               	movwf	___ftmul@f2+2,c
  3319  001834  ECE0  F00F         	call	___ftmul	;wreg free
  3320  001838  D799               	goto	L5
  3321  00183A                     l2234:
  3322                           
  3323                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3324  00183A  502D               	movf	fround@prec,w,c
  3325  00183C  0D03               	mullw	3
  3326  00183E  0E50               	movlw	low __npowers_
  3327  001840  24F3               	addwf	prodl,w,c
  3328  001842  6EF6               	movwf	tblptrl,c
  3329  001844  0E08               	movlw	high __npowers_
  3330  001846  20F4               	addwfc	prodh,w,c
  3331  001848  6EF7               	movwf	tblptrh,c
  3332  00184A                     	if	0	;There are less than 3 active tblptr bytes
  3333  00184A                     	endif
  3334  00184A  0009               	tblrd		*+
  3335  00184C  CFF5 F015          	movff	tablat,___ftmul@f1
  3336  001850  0009               	tblrd		*+
  3337  001852  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3338  001856  000A               	tblrd		*-
  3339  001858  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3340  00185C  0E00               	movlw	0
  3341  00185E  6E18               	movwf	___ftmul@f2,c
  3342  001860  0E00               	movlw	0
  3343  001862  6E19               	movwf	___ftmul@f2+1,c
  3344  001864  0E3F               	movlw	63
  3345  001866  6E1A               	movwf	___ftmul@f2+2,c
  3346  001868  ECE0  F00F         	call	___ftmul	;wreg free
  3347  00186C  C015  F024         	movff	?___ftmul,?_fround
  3348  001870  C016  F025         	movff	?___ftmul+1,?_fround+1
  3349  001874  C017  F026         	movff	?___ftmul+2,?_fround+2
  3350  001878  0012               	return	
  3351  00187A                     __end_of_fround:
  3352                           	opt stack 0
  3353                           tblptru	equ	0xFF8
  3354                           tblptrh	equ	0xFF7
  3355                           tblptrl	equ	0xFF6
  3356                           tablat	equ	0xFF5
  3357                           prodh	equ	0xFF4
  3358                           prodl	equ	0xFF3
  3359                           wreg	equ	0xFE8
  3360                           indf2	equ	0xFDF
  3361                           postinc2	equ	0xFDE
  3362                           postdec2	equ	0xFDD
  3363                           fsr2h	equ	0xFDA
  3364                           fsr2l	equ	0xFD9
  3365                           status	equ	0xFD8
  3366                           
  3367 ;; *************** function ___wmul *****************
  3368 ;; Defined at:
  3369 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;  multiplier      2   14[COMRAM] unsigned int 
  3372 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;  product         2   18[COMRAM] unsigned int 
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  2   14[COMRAM] unsigned int 
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0, prodl, prodh
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3384 ;;      Params:         4       0       0       0       0       0       0       0       0
  3385 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3386 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3387 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3388 ;;Total ram usage:        6 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; This function calls:
  3391 ;;		Nothing
  3392 ;; This function is called by:
  3393 ;;		_fround
  3394 ;;		_scale
  3395 ;;		_sprintf
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	text5
  3400  002718                     __ptext5:
  3401                           	opt stack 0
  3402  002718                     ___wmul:
  3403                           	opt stack 28
  3404                           
  3405                           ;incstack = 0
  3406  002718  500F               	movf	___wmul@multiplier,w,c
  3407  00271A  0211               	mulwf	___wmul@multiplicand,c
  3408  00271C  CFF3 F013          	movff	prodl,___wmul@product
  3409  002720  CFF4 F014          	movff	prodh,___wmul@product+1
  3410  002724  500F               	movf	___wmul@multiplier,w,c
  3411  002726  0212               	mulwf	___wmul@multiplicand+1,c
  3412  002728  50F3               	movf	prodl,w,c
  3413  00272A  2614               	addwf	___wmul@product+1,f,c
  3414  00272C  5010               	movf	___wmul@multiplier+1,w,c
  3415  00272E  0211               	mulwf	___wmul@multiplicand,c
  3416  002730  50F3               	movf	prodl,w,c
  3417  002732  2614               	addwf	___wmul@product+1,f,c
  3418  002734  C013  F00F         	movff	___wmul@product,?___wmul
  3419  002738  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3420  00273C  0012               	return	
  3421  00273E                     __end_of___wmul:
  3422                           	opt stack 0
  3423                           tblptru	equ	0xFF8
  3424                           tblptrh	equ	0xFF7
  3425                           tblptrl	equ	0xFF6
  3426                           tablat	equ	0xFF5
  3427                           prodh	equ	0xFF4
  3428                           prodl	equ	0xFF3
  3429                           wreg	equ	0xFE8
  3430                           indf2	equ	0xFDF
  3431                           postinc2	equ	0xFDE
  3432                           postdec2	equ	0xFDD
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function ___ftmul *****************
  3438 ;; Defined at:
  3439 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  f1              3   20[COMRAM] float 
  3442 ;;  f2              3   23[COMRAM] float 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3445 ;;  sign            1   34[COMRAM] unsigned char 
  3446 ;;  cntr            1   33[COMRAM] unsigned char 
  3447 ;;  exp             1   29[COMRAM] unsigned char 
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  3   20[COMRAM] float 
  3450 ;; Registers used:
  3451 ;;		wreg, status,2, status,0, cstack
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3457 ;;      Params:         6       0       0       0       0       0       0       0       0
  3458 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3459 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3460 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3461 ;;Total ram usage:       15 bytes
  3462 ;; Hardware stack levels used:    1
  3463 ;; Hardware stack levels required when called:    1
  3464 ;; This function calls:
  3465 ;;		___ftpack
  3466 ;; This function is called by:
  3467 ;;		_main
  3468 ;;		_fround
  3469 ;;		_scale
  3470 ;;		_sprintf
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text6
  3475  001FC0                     __ptext6:
  3476                           	opt stack 0
  3477  001FC0                     ___ftmul:
  3478                           	opt stack 27
  3479                           
  3480                           ;incstack = 0
  3481  001FC0  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3482  001FC4  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3483  001FC6  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3484  001FC8  3416               	rlcf	___ftmul@f1+1,w,c
  3485  001FCA  361B               	rlcf	??___ftmul& (0+255),f,c
  3486  001FCC  E301               	bnc	u2151
  3487  001FCE  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3488  001FD0                     u2151:
  3489  001FD0  501B               	movf	??___ftmul,w,c
  3490  001FD2  6E1E               	movwf	___ftmul@exp,c
  3491  001FD4  501E               	movf	___ftmul@exp,w,c
  3492  001FD6  A4D8               	btfss	status,2,c
  3493  001FD8  D007               	goto	l2044
  3494  001FDA  0E00               	movlw	0
  3495  001FDC  6E15               	movwf	?___ftmul,c
  3496  001FDE  0E00               	movlw	0
  3497  001FE0  6E16               	movwf	?___ftmul+1,c
  3498  001FE2  0E00               	movlw	0
  3499  001FE4  6E17               	movwf	?___ftmul+2,c
  3500  001FE6  0012               	return	
  3501  001FE8                     l2044:
  3502  001FE8  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3503  001FEC  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3504  001FEE  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3505  001FF0  3419               	rlcf	___ftmul@f2+1,w,c
  3506  001FF2  361B               	rlcf	??___ftmul& (0+255),f,c
  3507  001FF4  E301               	bnc	u2171
  3508  001FF6  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3509  001FF8                     u2171:
  3510  001FF8  501B               	movf	??___ftmul,w,c
  3511  001FFA  6E23               	movwf	___ftmul@sign,c
  3512  001FFC  5023               	movf	___ftmul@sign,w,c
  3513  001FFE  A4D8               	btfss	status,2,c
  3514  002000  D007               	goto	l2050
  3515  002002  0E00               	movlw	0
  3516  002004  6E15               	movwf	?___ftmul,c
  3517  002006  0E00               	movlw	0
  3518  002008  6E16               	movwf	?___ftmul+1,c
  3519  00200A  0E00               	movlw	0
  3520  00200C  6E17               	movwf	?___ftmul+2,c
  3521  00200E  0012               	return	
  3522  002010                     l2050:
  3523  002010  5023               	movf	___ftmul@sign,w,c
  3524  002012  0F7B               	addlw	123
  3525  002014  261E               	addwf	___ftmul@exp,f,c
  3526  002016  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3527  00201A  501A               	movf	___ftmul@f2+2,w,c
  3528  00201C  1A23               	xorwf	___ftmul@sign,f,c
  3529  00201E  0E80               	movlw	128
  3530  002020  1623               	andwf	___ftmul@sign,f,c
  3531  002022  8E16               	bsf	___ftmul@f1+1,7,c
  3532  002024  8E19               	bsf	___ftmul@f2+1,7,c
  3533  002026  0EFF               	movlw	255
  3534  002028  1618               	andwf	___ftmul@f2,f,c
  3535  00202A  0EFF               	movlw	255
  3536  00202C  1619               	andwf	___ftmul@f2+1,f,c
  3537  00202E  0E00               	movlw	0
  3538  002030  161A               	andwf	___ftmul@f2+2,f,c
  3539  002032  0E00               	movlw	0
  3540  002034  6E1F               	movwf	___ftmul@f3_as_product,c
  3541  002036  0E00               	movlw	0
  3542  002038  6E20               	movwf	___ftmul@f3_as_product+1,c
  3543  00203A  0E00               	movlw	0
  3544  00203C  6E21               	movwf	___ftmul@f3_as_product+2,c
  3545  00203E  0E07               	movlw	7
  3546  002040  6E22               	movwf	___ftmul@cntr,c
  3547  002042                     l2064:
  3548  002042  A015               	btfss	___ftmul@f1,0,c
  3549  002044  D006               	goto	l2068
  3550  002046  5018               	movf	___ftmul@f2,w,c
  3551  002048  261F               	addwf	___ftmul@f3_as_product,f,c
  3552  00204A  5019               	movf	___ftmul@f2+1,w,c
  3553  00204C  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3554  00204E  501A               	movf	___ftmul@f2+2,w,c
  3555  002050  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3556  002052                     l2068:
  3557  002052  90D8               	bcf	status,0,c
  3558  002054  3217               	rrcf	___ftmul@f1+2,f,c
  3559  002056  3216               	rrcf	___ftmul@f1+1,f,c
  3560  002058  3215               	rrcf	___ftmul@f1,f,c
  3561  00205A  90D8               	bcf	status,0,c
  3562  00205C  3618               	rlcf	___ftmul@f2,f,c
  3563  00205E  3619               	rlcf	___ftmul@f2+1,f,c
  3564  002060  361A               	rlcf	___ftmul@f2+2,f,c
  3565  002062  2E22               	decfsz	___ftmul@cntr,f,c
  3566  002064  D7EE               	goto	l2064
  3567  002066  0E09               	movlw	9
  3568  002068  6E22               	movwf	___ftmul@cntr,c
  3569  00206A                     l2074:
  3570  00206A  A015               	btfss	___ftmul@f1,0,c
  3571  00206C  D006               	goto	l2078
  3572  00206E  5018               	movf	___ftmul@f2,w,c
  3573  002070  261F               	addwf	___ftmul@f3_as_product,f,c
  3574  002072  5019               	movf	___ftmul@f2+1,w,c
  3575  002074  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3576  002076  501A               	movf	___ftmul@f2+2,w,c
  3577  002078  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3578  00207A                     l2078:
  3579  00207A  90D8               	bcf	status,0,c
  3580  00207C  3217               	rrcf	___ftmul@f1+2,f,c
  3581  00207E  3216               	rrcf	___ftmul@f1+1,f,c
  3582  002080  3215               	rrcf	___ftmul@f1,f,c
  3583  002082  90D8               	bcf	status,0,c
  3584  002084  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3585  002086  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3586  002088  321F               	rrcf	___ftmul@f3_as_product,f,c
  3587  00208A  2E22               	decfsz	___ftmul@cntr,f,c
  3588  00208C  D7EE               	goto	l2074
  3589  00208E  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3590  002092  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3591  002096  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3592  00209A  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3593  00209E  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3594  0020A2  EC4D  F011         	call	___ftpack	;wreg free
  3595  0020A6  C001  F015         	movff	?___ftpack,?___ftmul
  3596  0020AA  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3597  0020AE  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3598  0020B2  0012               	return	
  3599  0020B4                     __end_of___ftmul:
  3600                           	opt stack 0
  3601                           tblptru	equ	0xFF8
  3602                           tblptrh	equ	0xFF7
  3603                           tblptrl	equ	0xFF6
  3604                           tablat	equ	0xFF5
  3605                           prodh	equ	0xFF4
  3606                           prodl	equ	0xFF3
  3607                           wreg	equ	0xFE8
  3608                           indf2	equ	0xFDF
  3609                           postinc2	equ	0xFDE
  3610                           postdec2	equ	0xFDD
  3611                           fsr2h	equ	0xFDA
  3612                           fsr2l	equ	0xFD9
  3613                           status	equ	0xFD8
  3614                           
  3615 ;; *************** function ___awmod *****************
  3616 ;; Defined at:
  3617 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  3618 ;; Parameters:    Size  Location     Type
  3619 ;;  dividend        2    0[COMRAM] int 
  3620 ;;  divisor         2    2[COMRAM] int 
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;  sign            1    5[COMRAM] unsigned char 
  3623 ;;  counter         1    4[COMRAM] unsigned char 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  2    0[COMRAM] int 
  3626 ;; Registers used:
  3627 ;;		wreg, status,2, status,0
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3633 ;;      Params:         4       0       0       0       0       0       0       0       0
  3634 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3635 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3636 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3637 ;;Total ram usage:        6 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; This function calls:
  3640 ;;		Nothing
  3641 ;; This function is called by:
  3642 ;;		_fround
  3643 ;;		_scale
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           	psect	text7
  3648  00256E                     __ptext7:
  3649                           	opt stack 0
  3650  00256E                     ___awmod:
  3651                           	opt stack 28
  3652                           
  3653                           ;incstack = 0
  3654  00256E  0E00               	movlw	0
  3655  002570  6E06               	movwf	___awmod@sign,c
  3656  002572  AE02               	btfss	___awmod@dividend+1,7,c
  3657  002574  D006               	goto	l2138
  3658  002576  6C01               	negf	___awmod@dividend,c
  3659  002578  1E02               	comf	___awmod@dividend+1,f,c
  3660  00257A  B0D8               	btfsc	status,0,c
  3661  00257C  2A02               	incf	___awmod@dividend+1,f,c
  3662  00257E  0E01               	movlw	1
  3663  002580  6E06               	movwf	___awmod@sign,c
  3664  002582                     l2138:
  3665  002582  AE04               	btfss	___awmod@divisor+1,7,c
  3666  002584  D004               	goto	l2142
  3667  002586  6C03               	negf	___awmod@divisor,c
  3668  002588  1E04               	comf	___awmod@divisor+1,f,c
  3669  00258A  B0D8               	btfsc	status,0,c
  3670  00258C  2A04               	incf	___awmod@divisor+1,f,c
  3671  00258E                     l2142:
  3672  00258E  5003               	movf	___awmod@divisor,w,c
  3673  002590  1004               	iorwf	___awmod@divisor+1,w,c
  3674  002592  B4D8               	btfsc	status,2,c
  3675  002594  D018               	goto	l2158
  3676  002596  0E01               	movlw	1
  3677  002598  6E05               	movwf	___awmod@counter,c
  3678  00259A  D004               	goto	l2148
  3679  00259C                     l2146:
  3680  00259C  90D8               	bcf	status,0,c
  3681  00259E  3603               	rlcf	___awmod@divisor,f,c
  3682  0025A0  3604               	rlcf	___awmod@divisor+1,f,c
  3683  0025A2  2A05               	incf	___awmod@counter,f,c
  3684  0025A4                     l2148:
  3685  0025A4  AE04               	btfss	___awmod@divisor+1,7,c
  3686  0025A6  D7FA               	goto	l2146
  3687  0025A8                     l2150:
  3688  0025A8  5003               	movf	___awmod@divisor,w,c
  3689  0025AA  5C01               	subwf	___awmod@dividend,w,c
  3690  0025AC  5004               	movf	___awmod@divisor+1,w,c
  3691  0025AE  5802               	subwfb	___awmod@dividend+1,w,c
  3692  0025B0  A0D8               	btfss	status,0,c
  3693  0025B2  D004               	goto	l2154
  3694  0025B4  5003               	movf	___awmod@divisor,w,c
  3695  0025B6  5E01               	subwf	___awmod@dividend,f,c
  3696  0025B8  5004               	movf	___awmod@divisor+1,w,c
  3697  0025BA  5A02               	subwfb	___awmod@dividend+1,f,c
  3698  0025BC                     l2154:
  3699  0025BC  90D8               	bcf	status,0,c
  3700  0025BE  3204               	rrcf	___awmod@divisor+1,f,c
  3701  0025C0  3203               	rrcf	___awmod@divisor,f,c
  3702  0025C2  2E05               	decfsz	___awmod@counter,f,c
  3703  0025C4  D7F1               	goto	l2150
  3704  0025C6                     l2158:
  3705  0025C6  5006               	movf	___awmod@sign,w,c
  3706  0025C8  B4D8               	btfsc	status,2,c
  3707  0025CA  D004               	goto	l2162
  3708  0025CC  6C01               	negf	___awmod@dividend,c
  3709  0025CE  1E02               	comf	___awmod@dividend+1,f,c
  3710  0025D0  B0D8               	btfsc	status,0,c
  3711  0025D2  2A02               	incf	___awmod@dividend+1,f,c
  3712  0025D4                     l2162:
  3713  0025D4  C001  F001         	movff	___awmod@dividend,?___awmod
  3714  0025D8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3715  0025DC  0012               	return	
  3716  0025DE                     __end_of___awmod:
  3717                           	opt stack 0
  3718                           tblptru	equ	0xFF8
  3719                           tblptrh	equ	0xFF7
  3720                           tblptrl	equ	0xFF6
  3721                           tablat	equ	0xFF5
  3722                           prodh	equ	0xFF4
  3723                           prodl	equ	0xFF3
  3724                           wreg	equ	0xFE8
  3725                           indf2	equ	0xFDF
  3726                           postinc2	equ	0xFDE
  3727                           postdec2	equ	0xFDD
  3728                           fsr2h	equ	0xFDA
  3729                           fsr2l	equ	0xFD9
  3730                           status	equ	0xFD8
  3731                           
  3732 ;; *************** function ___awdiv *****************
  3733 ;; Defined at:
  3734 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  dividend        2    6[COMRAM] int 
  3737 ;;  divisor         2    8[COMRAM] int 
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;  quotient        2   12[COMRAM] int 
  3740 ;;  sign            1   11[COMRAM] unsigned char 
  3741 ;;  counter         1   10[COMRAM] unsigned char 
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  2    6[COMRAM] int 
  3744 ;; Registers used:
  3745 ;;		wreg, status,2, status,0
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3751 ;;      Params:         4       0       0       0       0       0       0       0       0
  3752 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3754 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3755 ;;Total ram usage:        8 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; This function calls:
  3758 ;;		Nothing
  3759 ;; This function is called by:
  3760 ;;		_fround
  3761 ;;		_scale
  3762 ;;		_sprintf
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text8
  3767  002468                     __ptext8:
  3768                           	opt stack 0
  3769  002468                     ___awdiv:
  3770                           	opt stack 28
  3771                           
  3772                           ;incstack = 0
  3773  002468  0E00               	movlw	0
  3774  00246A  6E0C               	movwf	___awdiv@sign,c
  3775  00246C  AE0A               	btfss	___awdiv@divisor+1,7,c
  3776  00246E  D006               	goto	l2094
  3777  002470  6C09               	negf	___awdiv@divisor,c
  3778  002472  1E0A               	comf	___awdiv@divisor+1,f,c
  3779  002474  B0D8               	btfsc	status,0,c
  3780  002476  2A0A               	incf	___awdiv@divisor+1,f,c
  3781  002478  0E01               	movlw	1
  3782  00247A  6E0C               	movwf	___awdiv@sign,c
  3783  00247C                     l2094:
  3784  00247C  AE08               	btfss	___awdiv@dividend+1,7,c
  3785  00247E  D006               	goto	l2100
  3786  002480  6C07               	negf	___awdiv@dividend,c
  3787  002482  1E08               	comf	___awdiv@dividend+1,f,c
  3788  002484  B0D8               	btfsc	status,0,c
  3789  002486  2A08               	incf	___awdiv@dividend+1,f,c
  3790  002488  0E01               	movlw	1
  3791  00248A  1A0C               	xorwf	___awdiv@sign,f,c
  3792  00248C                     l2100:
  3793  00248C  0E00               	movlw	0
  3794  00248E  6E0E               	movwf	___awdiv@quotient+1,c
  3795  002490  0E00               	movlw	0
  3796  002492  6E0D               	movwf	___awdiv@quotient,c
  3797  002494  5009               	movf	___awdiv@divisor,w,c
  3798  002496  100A               	iorwf	___awdiv@divisor+1,w,c
  3799  002498  B4D8               	btfsc	status,2,c
  3800  00249A  D01C               	goto	l2122
  3801  00249C  0E01               	movlw	1
  3802  00249E  6E0B               	movwf	___awdiv@counter,c
  3803  0024A0  D004               	goto	l2108
  3804  0024A2                     l2106:
  3805  0024A2  90D8               	bcf	status,0,c
  3806  0024A4  3609               	rlcf	___awdiv@divisor,f,c
  3807  0024A6  360A               	rlcf	___awdiv@divisor+1,f,c
  3808  0024A8  2A0B               	incf	___awdiv@counter,f,c
  3809  0024AA                     l2108:
  3810  0024AA  AE0A               	btfss	___awdiv@divisor+1,7,c
  3811  0024AC  D7FA               	goto	l2106
  3812  0024AE                     l2110:
  3813  0024AE  90D8               	bcf	status,0,c
  3814  0024B0  360D               	rlcf	___awdiv@quotient,f,c
  3815  0024B2  360E               	rlcf	___awdiv@quotient+1,f,c
  3816  0024B4  5009               	movf	___awdiv@divisor,w,c
  3817  0024B6  5C07               	subwf	___awdiv@dividend,w,c
  3818  0024B8  500A               	movf	___awdiv@divisor+1,w,c
  3819  0024BA  5808               	subwfb	___awdiv@dividend+1,w,c
  3820  0024BC  A0D8               	btfss	status,0,c
  3821  0024BE  D005               	goto	l2118
  3822  0024C0  5009               	movf	___awdiv@divisor,w,c
  3823  0024C2  5E07               	subwf	___awdiv@dividend,f,c
  3824  0024C4  500A               	movf	___awdiv@divisor+1,w,c
  3825  0024C6  5A08               	subwfb	___awdiv@dividend+1,f,c
  3826  0024C8  800D               	bsf	___awdiv@quotient,0,c
  3827  0024CA                     l2118:
  3828  0024CA  90D8               	bcf	status,0,c
  3829  0024CC  320A               	rrcf	___awdiv@divisor+1,f,c
  3830  0024CE  3209               	rrcf	___awdiv@divisor,f,c
  3831  0024D0  2E0B               	decfsz	___awdiv@counter,f,c
  3832  0024D2  D7ED               	goto	l2110
  3833  0024D4                     l2122:
  3834  0024D4  500C               	movf	___awdiv@sign,w,c
  3835  0024D6  B4D8               	btfsc	status,2,c
  3836  0024D8  D004               	goto	l2126
  3837  0024DA  6C0D               	negf	___awdiv@quotient,c
  3838  0024DC  1E0E               	comf	___awdiv@quotient+1,f,c
  3839  0024DE  B0D8               	btfsc	status,0,c
  3840  0024E0  2A0E               	incf	___awdiv@quotient+1,f,c
  3841  0024E2                     l2126:
  3842  0024E2  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3843  0024E6  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3844  0024EA  0012               	return	
  3845  0024EC                     __end_of___awdiv:
  3846                           	opt stack 0
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           prodh	equ	0xFF4
  3852                           prodl	equ	0xFF3
  3853                           wreg	equ	0xFE8
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function __tdiv_to_l_ *****************
  3862 ;; Defined at:
  3863 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  f1              3    0[COMRAM] float 
  3866 ;;  f2              3    3[COMRAM] float 
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  quot            4    9[COMRAM] unsigned long 
  3869 ;;  exp1            1   14[COMRAM] unsigned char 
  3870 ;;  cntr            1   13[COMRAM] unsigned char 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  4    0[COMRAM] unsigned long 
  3873 ;; Registers used:
  3874 ;;		wreg, status,2, status,0
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3880 ;;      Params:         6       0       0       0       0       0       0       0       0
  3881 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3882 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3883 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3884 ;;Total ram usage:       15 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; This function calls:
  3887 ;;		Nothing
  3888 ;; This function is called by:
  3889 ;;		_sprintf
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	text9
  3894  001A26                     __ptext9:
  3895                           	opt stack 0
  3896  001A26                     __tdiv_to_l_:
  3897                           	opt stack 29
  3898                           
  3899                           ;incstack = 0
  3900  001A26  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3901  001A2A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3902  001A2C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3903  001A2E  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3904  001A30  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3905  001A32  E301               	bnc	u2801
  3906  001A34  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3907  001A36                     u2801:
  3908  001A36  5007               	movf	??__tdiv_to_l_,w,c
  3909  001A38  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3910  001A3A  500F               	movf	__tdiv_to_l_@exp1,w,c
  3911  001A3C  A4D8               	btfss	status,2,c
  3912  001A3E  D009               	goto	l2294
  3913  001A40  0E00               	movlw	0
  3914  001A42  6E01               	movwf	?__tdiv_to_l_,c
  3915  001A44  0E00               	movlw	0
  3916  001A46  6E02               	movwf	?__tdiv_to_l_+1,c
  3917  001A48  0E00               	movlw	0
  3918  001A4A  6E03               	movwf	?__tdiv_to_l_+2,c
  3919  001A4C  0E00               	movlw	0
  3920  001A4E  6E04               	movwf	?__tdiv_to_l_+3,c
  3921  001A50  0012               	return	
  3922  001A52                     l2294:
  3923  001A52  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3924  001A56  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3925  001A58  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3926  001A5A  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3927  001A5C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3928  001A5E  E301               	bnc	u2821
  3929  001A60  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3930  001A62                     u2821:
  3931  001A62  5007               	movf	??__tdiv_to_l_,w,c
  3932  001A64  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3933  001A66  500E               	movf	__tdiv_to_l_@cntr,w,c
  3934  001A68  A4D8               	btfss	status,2,c
  3935  001A6A  D009               	goto	l2300
  3936  001A6C  0E00               	movlw	0
  3937  001A6E  6E01               	movwf	?__tdiv_to_l_,c
  3938  001A70  0E00               	movlw	0
  3939  001A72  6E02               	movwf	?__tdiv_to_l_+1,c
  3940  001A74  0E00               	movlw	0
  3941  001A76  6E03               	movwf	?__tdiv_to_l_+2,c
  3942  001A78  0E00               	movlw	0
  3943  001A7A  6E04               	movwf	?__tdiv_to_l_+3,c
  3944  001A7C  0012               	return	
  3945  001A7E                     l2300:
  3946  001A7E  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3947  001A80  0EFF               	movlw	255
  3948  001A82  1601               	andwf	__tdiv_to_l_@f1,f,c
  3949  001A84  0EFF               	movlw	255
  3950  001A86  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3951  001A88  0E00               	movlw	0
  3952  001A8A  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3953  001A8C  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3954  001A8E  0EFF               	movlw	255
  3955  001A90  1604               	andwf	__tdiv_to_l_@f2,f,c
  3956  001A92  0EFF               	movlw	255
  3957  001A94  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3958  001A96  0E00               	movlw	0
  3959  001A98  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3960  001A9A  0E00               	movlw	0
  3961  001A9C  6E0A               	movwf	__tdiv_to_l_@quot,c
  3962  001A9E  0E00               	movlw	0
  3963  001AA0  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3964  001AA2  0E00               	movlw	0
  3965  001AA4  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3966  001AA6  0E00               	movlw	0
  3967  001AA8  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3968  001AAA  0E7F               	movlw	127
  3969  001AAC  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3970  001AAE  500E               	movf	__tdiv_to_l_@cntr,w,c
  3971  001AB0  0F98               	addlw	152
  3972  001AB2  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3973  001AB4  0E18               	movlw	24
  3974  001AB6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3975  001AB8                     l532:
  3976  001AB8  90D8               	bcf	status,0,c
  3977  001ABA  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3978  001ABC  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3979  001ABE  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3980  001AC0  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3981  001AC2  5004               	movf	__tdiv_to_l_@f2,w,c
  3982  001AC4  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3983  001AC6  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3984  001AC8  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3985  001ACA  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3986  001ACC  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3987  001ACE  A0D8               	btfss	status,0,c
  3988  001AD0  D007               	goto	l533
  3989  001AD2  5004               	movf	__tdiv_to_l_@f2,w,c
  3990  001AD4  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3991  001AD6  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3992  001AD8  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3993  001ADA  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3994  001ADC  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3995  001ADE  800A               	bsf	__tdiv_to_l_@quot,0,c
  3996  001AE0                     l533:
  3997  001AE0  90D8               	bcf	status,0,c
  3998  001AE2  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3999  001AE4  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4000  001AE6  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4001  001AE8  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4002  001AEA  D7E6               	goto	l532
  4003  001AEC  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4004  001AEE  D016               	goto	l2334
  4005  001AF0  500F               	movf	__tdiv_to_l_@exp1,w,c
  4006  001AF2  0A80               	xorlw	128
  4007  001AF4  0F97               	addlw	151
  4008  001AF6  B0D8               	btfsc	status,0,c
  4009  001AF8  D009               	goto	l2330
  4010  001AFA  0E00               	movlw	0
  4011  001AFC  6E01               	movwf	?__tdiv_to_l_,c
  4012  001AFE  0E00               	movlw	0
  4013  001B00  6E02               	movwf	?__tdiv_to_l_+1,c
  4014  001B02  0E00               	movlw	0
  4015  001B04  6E03               	movwf	?__tdiv_to_l_+2,c
  4016  001B06  0E00               	movlw	0
  4017  001B08  6E04               	movwf	?__tdiv_to_l_+3,c
  4018  001B0A  0012               	return	
  4019  001B0C                     l2330:
  4020  001B0C  90D8               	bcf	status,0,c
  4021  001B0E  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4022  001B10  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4023  001B12  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4024  001B14  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4025  001B16  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4026  001B18  D7F9               	goto	l2330
  4027  001B1A  D015               	goto	l539
  4028  001B1C                     l2334:
  4029  001B1C  0E17               	movlw	23
  4030  001B1E  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4031  001B20  D00F               	goto	l2342
  4032  001B22  0E00               	movlw	0
  4033  001B24  6E01               	movwf	?__tdiv_to_l_,c
  4034  001B26  0E00               	movlw	0
  4035  001B28  6E02               	movwf	?__tdiv_to_l_+1,c
  4036  001B2A  0E00               	movlw	0
  4037  001B2C  6E03               	movwf	?__tdiv_to_l_+2,c
  4038  001B2E  0E00               	movlw	0
  4039  001B30  6E04               	movwf	?__tdiv_to_l_+3,c
  4040  001B32  0012               	return	
  4041  001B34                     l2340:
  4042  001B34  90D8               	bcf	status,0,c
  4043  001B36  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4044  001B38  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4045  001B3A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4046  001B3C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4047  001B3E  060F               	decf	__tdiv_to_l_@exp1,f,c
  4048  001B40                     l2342:
  4049  001B40  500F               	movf	__tdiv_to_l_@exp1,w,c
  4050  001B42  A4D8               	btfss	status,2,c
  4051  001B44  D7F7               	goto	l2340
  4052  001B46                     l539:
  4053  001B46  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4054  001B4A  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4055  001B4E  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4056  001B52  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4057  001B56  0012               	return		;funcret
  4058  001B58                     __end_of__tdiv_to_l_:
  4059                           	opt stack 0
  4060                           tblptru	equ	0xFF8
  4061                           tblptrh	equ	0xFF7
  4062                           tblptrl	equ	0xFF6
  4063                           tablat	equ	0xFF5
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           wreg	equ	0xFE8
  4067                           indf2	equ	0xFDF
  4068                           postinc2	equ	0xFDE
  4069                           postdec2	equ	0xFDD
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function __div_to_l_ *****************
  4075 ;; Defined at:
  4076 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  f1              3    0[COMRAM] unsigned long 
  4079 ;;  f2              3    3[COMRAM] unsigned long 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  quot            4    6[COMRAM] unsigned long 
  4082 ;;  exp1            1   11[COMRAM] unsigned char 
  4083 ;;  cntr            1   10[COMRAM] unsigned char 
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  4    0[COMRAM] unsigned long 
  4086 ;; Registers used:
  4087 ;;		wreg, status,2, status,0
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4093 ;;      Params:         6       0       0       0       0       0       0       0       0
  4094 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4095 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4096 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4097 ;;Total ram usage:       12 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; This function calls:
  4100 ;;		Nothing
  4101 ;; This function is called by:
  4102 ;;		_sprintf
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           	psect	text10
  4107  001C84                     __ptext10:
  4108                           	opt stack 0
  4109  001C84                     __div_to_l_:
  4110                           	opt stack 29
  4111                           
  4112                           ;incstack = 0
  4113  001C84  3403               	rlcf	__div_to_l_@f1+2,w,c
  4114  001C86  3404               	rlcf	__div_to_l_@f1+3,w,c
  4115  001C88  6E0C               	movwf	__div_to_l_@exp1,c
  4116  001C8A  500C               	movf	__div_to_l_@exp1,w,c
  4117  001C8C  A4D8               	btfss	status,2,c
  4118  001C8E  D009               	goto	l2350
  4119  001C90  0E00               	movlw	0
  4120  001C92  6E01               	movwf	?__div_to_l_,c
  4121  001C94  0E00               	movlw	0
  4122  001C96  6E02               	movwf	?__div_to_l_+1,c
  4123  001C98  0E00               	movlw	0
  4124  001C9A  6E03               	movwf	?__div_to_l_+2,c
  4125  001C9C  0E00               	movlw	0
  4126  001C9E  6E04               	movwf	?__div_to_l_+3,c
  4127  001CA0  0012               	return	
  4128  001CA2                     l2350:
  4129  001CA2  3406               	rlcf	__div_to_l_@f2+2,w,c
  4130  001CA4  3407               	rlcf	__div_to_l_@f2+3,w,c
  4131  001CA6  6E0B               	movwf	__div_to_l_@cntr,c
  4132  001CA8  500B               	movf	__div_to_l_@cntr,w,c
  4133  001CAA  A4D8               	btfss	status,2,c
  4134  001CAC  D009               	goto	l2356
  4135  001CAE  0E00               	movlw	0
  4136  001CB0  6E01               	movwf	?__div_to_l_,c
  4137  001CB2  0E00               	movlw	0
  4138  001CB4  6E02               	movwf	?__div_to_l_+1,c
  4139  001CB6  0E00               	movlw	0
  4140  001CB8  6E03               	movwf	?__div_to_l_+2,c
  4141  001CBA  0E00               	movlw	0
  4142  001CBC  6E04               	movwf	?__div_to_l_+3,c
  4143  001CBE  0012               	return	
  4144  001CC0                     l2356:
  4145  001CC0  8E03               	bsf	__div_to_l_@f1+2,7,c
  4146  001CC2  0EFF               	movlw	255
  4147  001CC4  1601               	andwf	__div_to_l_@f1,f,c
  4148  001CC6  0EFF               	movlw	255
  4149  001CC8  1602               	andwf	__div_to_l_@f1+1,f,c
  4150  001CCA  0EFF               	movlw	255
  4151  001CCC  1603               	andwf	__div_to_l_@f1+2,f,c
  4152  001CCE  0E00               	movlw	0
  4153  001CD0  1604               	andwf	__div_to_l_@f1+3,f,c
  4154  001CD2  8E06               	bsf	__div_to_l_@f2+2,7,c
  4155  001CD4  0EFF               	movlw	255
  4156  001CD6  1604               	andwf	__div_to_l_@f2,f,c
  4157  001CD8  0EFF               	movlw	255
  4158  001CDA  1605               	andwf	__div_to_l_@f2+1,f,c
  4159  001CDC  0EFF               	movlw	255
  4160  001CDE  1606               	andwf	__div_to_l_@f2+2,f,c
  4161  001CE0  0E00               	movlw	0
  4162  001CE2  1607               	andwf	__div_to_l_@f2+3,f,c
  4163  001CE4  0E00               	movlw	0
  4164  001CE6  6E07               	movwf	__div_to_l_@quot,c
  4165  001CE8  0E00               	movlw	0
  4166  001CEA  6E08               	movwf	__div_to_l_@quot+1,c
  4167  001CEC  0E00               	movlw	0
  4168  001CEE  6E09               	movwf	__div_to_l_@quot+2,c
  4169  001CF0  0E00               	movlw	0
  4170  001CF2  6E0A               	movwf	__div_to_l_@quot+3,c
  4171  001CF4  0E7F               	movlw	127
  4172  001CF6  5E0C               	subwf	__div_to_l_@exp1,f,c
  4173  001CF8  500B               	movf	__div_to_l_@cntr,w,c
  4174  001CFA  0FA0               	addlw	160
  4175  001CFC  5E0C               	subwf	__div_to_l_@exp1,f,c
  4176  001CFE  0E20               	movlw	32
  4177  001D00  6E0B               	movwf	__div_to_l_@cntr,c
  4178  001D02                     l2370:
  4179  001D02  90D8               	bcf	status,0,c
  4180  001D04  3607               	rlcf	__div_to_l_@quot,f,c
  4181  001D06  3608               	rlcf	__div_to_l_@quot+1,f,c
  4182  001D08  3609               	rlcf	__div_to_l_@quot+2,f,c
  4183  001D0A  360A               	rlcf	__div_to_l_@quot+3,f,c
  4184  001D0C  5004               	movf	__div_to_l_@f2,w,c
  4185  001D0E  5C01               	subwf	__div_to_l_@f1,w,c
  4186  001D10  5005               	movf	__div_to_l_@f2+1,w,c
  4187  001D12  5802               	subwfb	__div_to_l_@f1+1,w,c
  4188  001D14  5006               	movf	__div_to_l_@f2+2,w,c
  4189  001D16  5803               	subwfb	__div_to_l_@f1+2,w,c
  4190  001D18  5007               	movf	__div_to_l_@f2+3,w,c
  4191  001D1A  5804               	subwfb	__div_to_l_@f1+3,w,c
  4192  001D1C  A0D8               	btfss	status,0,c
  4193  001D1E  D009               	goto	l2378
  4194  001D20  5004               	movf	__div_to_l_@f2,w,c
  4195  001D22  5E01               	subwf	__div_to_l_@f1,f,c
  4196  001D24  5005               	movf	__div_to_l_@f2+1,w,c
  4197  001D26  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4198  001D28  5006               	movf	__div_to_l_@f2+2,w,c
  4199  001D2A  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4200  001D2C  5007               	movf	__div_to_l_@f2+3,w,c
  4201  001D2E  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4202  001D30  8007               	bsf	__div_to_l_@quot,0,c
  4203  001D32                     l2378:
  4204  001D32  90D8               	bcf	status,0,c
  4205  001D34  3601               	rlcf	__div_to_l_@f1,f,c
  4206  001D36  3602               	rlcf	__div_to_l_@f1+1,f,c
  4207  001D38  3603               	rlcf	__div_to_l_@f1+2,f,c
  4208  001D3A  3604               	rlcf	__div_to_l_@f1+3,f,c
  4209  001D3C  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4210  001D3E  D7E1               	goto	l2370
  4211  001D40  AE0C               	btfss	__div_to_l_@exp1,7,c
  4212  001D42  D016               	goto	l2394
  4213  001D44  500C               	movf	__div_to_l_@exp1,w,c
  4214  001D46  0A80               	xorlw	128
  4215  001D48  0F9F               	addlw	159
  4216  001D4A  B0D8               	btfsc	status,0,c
  4217  001D4C  D009               	goto	l2390
  4218  001D4E  0E00               	movlw	0
  4219  001D50  6E01               	movwf	?__div_to_l_,c
  4220  001D52  0E00               	movlw	0
  4221  001D54  6E02               	movwf	?__div_to_l_+1,c
  4222  001D56  0E00               	movlw	0
  4223  001D58  6E03               	movwf	?__div_to_l_+2,c
  4224  001D5A  0E00               	movlw	0
  4225  001D5C  6E04               	movwf	?__div_to_l_+3,c
  4226  001D5E  0012               	return	
  4227  001D60                     l2390:
  4228  001D60  90D8               	bcf	status,0,c
  4229  001D62  320A               	rrcf	__div_to_l_@quot+3,f,c
  4230  001D64  3209               	rrcf	__div_to_l_@quot+2,f,c
  4231  001D66  3208               	rrcf	__div_to_l_@quot+1,f,c
  4232  001D68  3207               	rrcf	__div_to_l_@quot,f,c
  4233  001D6A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4234  001D6C  D7F9               	goto	l2390
  4235  001D6E  D015               	goto	l435
  4236  001D70                     l2394:
  4237  001D70  0E1F               	movlw	31
  4238  001D72  640C               	cpfsgt	__div_to_l_@exp1,c
  4239  001D74  D00F               	goto	l2402
  4240  001D76  0E00               	movlw	0
  4241  001D78  6E01               	movwf	?__div_to_l_,c
  4242  001D7A  0E00               	movlw	0
  4243  001D7C  6E02               	movwf	?__div_to_l_+1,c
  4244  001D7E  0E00               	movlw	0
  4245  001D80  6E03               	movwf	?__div_to_l_+2,c
  4246  001D82  0E00               	movlw	0
  4247  001D84  6E04               	movwf	?__div_to_l_+3,c
  4248  001D86  0012               	return	
  4249  001D88                     l2400:
  4250  001D88  90D8               	bcf	status,0,c
  4251  001D8A  3607               	rlcf	__div_to_l_@quot,f,c
  4252  001D8C  3608               	rlcf	__div_to_l_@quot+1,f,c
  4253  001D8E  3609               	rlcf	__div_to_l_@quot+2,f,c
  4254  001D90  360A               	rlcf	__div_to_l_@quot+3,f,c
  4255  001D92  060C               	decf	__div_to_l_@exp1,f,c
  4256  001D94                     l2402:
  4257  001D94  500C               	movf	__div_to_l_@exp1,w,c
  4258  001D96  A4D8               	btfss	status,2,c
  4259  001D98  D7F7               	goto	l2400
  4260  001D9A                     l435:
  4261  001D9A  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4262  001D9E  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4263  001DA2  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4264  001DA6  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4265  001DAA  0012               	return		;funcret
  4266  001DAC                     __end_of__div_to_l_:
  4267                           	opt stack 0
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           prodh	equ	0xFF4
  4273                           prodl	equ	0xFF3
  4274                           wreg	equ	0xFE8
  4275                           indf2	equ	0xFDF
  4276                           postinc2	equ	0xFDE
  4277                           postdec2	equ	0xFDD
  4278                           fsr2h	equ	0xFDA
  4279                           fsr2l	equ	0xFD9
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function ___lltoft *****************
  4283 ;; Defined at:
  4284 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  c               4    8[COMRAM] unsigned long 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  exp             1   16[COMRAM] unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  3    8[COMRAM] float 
  4291 ;; Registers used:
  4292 ;;		wreg, status,2, status,0, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4298 ;;      Params:         4       0       0       0       0       0       0       0       0
  4299 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4300 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4301 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4302 ;;Total ram usage:        9 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    1
  4305 ;; This function calls:
  4306 ;;		___ftpack
  4307 ;; This function is called by:
  4308 ;;		_sprintf
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           	psect	text11
  4313  002644                     __ptext11:
  4314                           	opt stack 0
  4315  002644                     ___lltoft:
  4316                           	opt stack 28
  4317                           
  4318                           ;incstack = 0
  4319  002644  0E8E               	movlw	142
  4320  002646  6E11               	movwf	___lltoft@exp,c
  4321  002648  D006               	goto	l2522
  4322  00264A                     l2520:
  4323  00264A  90D8               	bcf	status,0,c
  4324  00264C  320C               	rrcf	___lltoft@c+3,f,c
  4325  00264E  320B               	rrcf	___lltoft@c+2,f,c
  4326  002650  320A               	rrcf	___lltoft@c+1,f,c
  4327  002652  3209               	rrcf	___lltoft@c,f,c
  4328  002654  2A11               	incf	___lltoft@exp,f,c
  4329  002656                     l2522:
  4330  002656  0E00               	movlw	0
  4331  002658  1409               	andwf	___lltoft@c,w,c
  4332  00265A  6E0D               	movwf	??___lltoft& (0+255),c
  4333  00265C  0E00               	movlw	0
  4334  00265E  140A               	andwf	___lltoft@c+1,w,c
  4335  002660  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4336  002662  0E00               	movlw	0
  4337  002664  140B               	andwf	___lltoft@c+2,w,c
  4338  002666  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4339  002668  0EFF               	movlw	255
  4340  00266A  140C               	andwf	___lltoft@c+3,w,c
  4341  00266C  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4342  00266E  500D               	movf	??___lltoft,w,c
  4343  002670  100E               	iorwf	??___lltoft+1,w,c
  4344  002672  100F               	iorwf	??___lltoft+2,w,c
  4345  002674  1010               	iorwf	??___lltoft+3,w,c
  4346  002676  A4D8               	btfss	status,2,c
  4347  002678  D7E8               	goto	l2520
  4348  00267A  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4349  00267E  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4350  002682  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4351  002686  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4352  00268A  0E00               	movlw	0
  4353  00268C  6E05               	movwf	___ftpack@sign,c
  4354  00268E  EC4D  F011         	call	___ftpack	;wreg free
  4355  002692  C001  F009         	movff	?___ftpack,?___lltoft
  4356  002696  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4357  00269A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4358  00269E  0012               	return	
  4359  0026A0                     __end_of___lltoft:
  4360                           	opt stack 0
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           prodh	equ	0xFF4
  4366                           prodl	equ	0xFF3
  4367                           wreg	equ	0xFE8
  4368                           indf2	equ	0xFDF
  4369                           postinc2	equ	0xFDE
  4370                           postdec2	equ	0xFDD
  4371                           fsr2h	equ	0xFDA
  4372                           fsr2l	equ	0xFD9
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function ___llmod *****************
  4376 ;; Defined at:
  4377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  dividend        4    0[COMRAM] unsigned long 
  4380 ;;  divisor         4    4[COMRAM] unsigned long 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  counter         1    8[COMRAM] unsigned char 
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  4    0[COMRAM] unsigned long 
  4385 ;; Registers used:
  4386 ;;		wreg, status,2, status,0
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4392 ;;      Params:         8       0       0       0       0       0       0       0       0
  4393 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4394 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4395 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4396 ;;Total ram usage:        9 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; This function calls:
  4399 ;;		Nothing
  4400 ;; This function is called by:
  4401 ;;		_sprintf
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text12
  4406  0025DE                     __ptext12:
  4407                           	opt stack 0
  4408  0025DE                     ___llmod:
  4409                           	opt stack 29
  4410                           
  4411                           ;incstack = 0
  4412  0025DE  5005               	movf	___llmod@divisor,w,c
  4413  0025E0  1006               	iorwf	___llmod@divisor+1,w,c
  4414  0025E2  1007               	iorwf	___llmod@divisor+2,w,c
  4415  0025E4  1008               	iorwf	___llmod@divisor+3,w,c
  4416  0025E6  B4D8               	btfsc	status,2,c
  4417  0025E8  D024               	goto	l624
  4418  0025EA  0E01               	movlw	1
  4419  0025EC  6E09               	movwf	___llmod@counter,c
  4420  0025EE  D006               	goto	l2508
  4421  0025F0                     l2506:
  4422  0025F0  90D8               	bcf	status,0,c
  4423  0025F2  3605               	rlcf	___llmod@divisor,f,c
  4424  0025F4  3606               	rlcf	___llmod@divisor+1,f,c
  4425  0025F6  3607               	rlcf	___llmod@divisor+2,f,c
  4426  0025F8  3608               	rlcf	___llmod@divisor+3,f,c
  4427  0025FA  2A09               	incf	___llmod@counter,f,c
  4428  0025FC                     l2508:
  4429  0025FC  AE08               	btfss	___llmod@divisor+3,7,c
  4430  0025FE  D7F8               	goto	l2506
  4431  002600                     l2510:
  4432  002600  5005               	movf	___llmod@divisor,w,c
  4433  002602  5C01               	subwf	___llmod@dividend,w,c
  4434  002604  5006               	movf	___llmod@divisor+1,w,c
  4435  002606  5802               	subwfb	___llmod@dividend+1,w,c
  4436  002608  5007               	movf	___llmod@divisor+2,w,c
  4437  00260A  5803               	subwfb	___llmod@dividend+2,w,c
  4438  00260C  5008               	movf	___llmod@divisor+3,w,c
  4439  00260E  5804               	subwfb	___llmod@dividend+3,w,c
  4440  002610  A0D8               	btfss	status,0,c
  4441  002612  D008               	goto	l2514
  4442  002614  5005               	movf	___llmod@divisor,w,c
  4443  002616  5E01               	subwf	___llmod@dividend,f,c
  4444  002618  5006               	movf	___llmod@divisor+1,w,c
  4445  00261A  5A02               	subwfb	___llmod@dividend+1,f,c
  4446  00261C  5007               	movf	___llmod@divisor+2,w,c
  4447  00261E  5A03               	subwfb	___llmod@dividend+2,f,c
  4448  002620  5008               	movf	___llmod@divisor+3,w,c
  4449  002622  5A04               	subwfb	___llmod@dividend+3,f,c
  4450  002624                     l2514:
  4451  002624  90D8               	bcf	status,0,c
  4452  002626  3208               	rrcf	___llmod@divisor+3,f,c
  4453  002628  3207               	rrcf	___llmod@divisor+2,f,c
  4454  00262A  3206               	rrcf	___llmod@divisor+1,f,c
  4455  00262C  3205               	rrcf	___llmod@divisor,f,c
  4456  00262E  2E09               	decfsz	___llmod@counter,f,c
  4457  002630  D7E7               	goto	l2510
  4458  002632                     l624:
  4459  002632  C001  F001         	movff	___llmod@dividend,?___llmod
  4460  002636  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4461  00263A  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4462  00263E  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4463  002642  0012               	return		;funcret
  4464  002644                     __end_of___llmod:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           prodh	equ	0xFF4
  4471                           prodl	equ	0xFF3
  4472                           wreg	equ	0xFE8
  4473                           indf2	equ	0xFDF
  4474                           postinc2	equ	0xFDE
  4475                           postdec2	equ	0xFDD
  4476                           fsr2h	equ	0xFDA
  4477                           fsr2l	equ	0xFD9
  4478                           status	equ	0xFD8
  4479                           
  4480 ;; *************** function ___lldiv *****************
  4481 ;; Defined at:
  4482 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;  dividend        4    0[COMRAM] unsigned long 
  4485 ;;  divisor         4    4[COMRAM] unsigned long 
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;  quotient        4    8[COMRAM] unsigned long 
  4488 ;;  counter         1   12[COMRAM] unsigned char 
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  4    0[COMRAM] unsigned long 
  4491 ;; Registers used:
  4492 ;;		wreg, status,2, status,0
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4498 ;;      Params:         8       0       0       0       0       0       0       0       0
  4499 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4500 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4501 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4502 ;;Total ram usage:       13 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; This function calls:
  4505 ;;		Nothing
  4506 ;; This function is called by:
  4507 ;;		_sprintf
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text13
  4512  0024EC                     __ptext13:
  4513                           	opt stack 0
  4514  0024EC                     ___lldiv:
  4515                           	opt stack 29
  4516                           
  4517                           ;incstack = 0
  4518  0024EC  0E00               	movlw	0
  4519  0024EE  6E09               	movwf	___lldiv@quotient,c
  4520  0024F0  0E00               	movlw	0
  4521  0024F2  6E0A               	movwf	___lldiv@quotient+1,c
  4522  0024F4  0E00               	movlw	0
  4523  0024F6  6E0B               	movwf	___lldiv@quotient+2,c
  4524  0024F8  0E00               	movlw	0
  4525  0024FA  6E0C               	movwf	___lldiv@quotient+3,c
  4526  0024FC  5005               	movf	___lldiv@divisor,w,c
  4527  0024FE  1006               	iorwf	___lldiv@divisor+1,w,c
  4528  002500  1007               	iorwf	___lldiv@divisor+2,w,c
  4529  002502  1008               	iorwf	___lldiv@divisor+3,w,c
  4530  002504  B4D8               	btfsc	status,2,c
  4531  002506  D02A               	goto	l614
  4532  002508  0E01               	movlw	1
  4533  00250A  6E0D               	movwf	___lldiv@counter,c
  4534  00250C  D006               	goto	l2488
  4535  00250E                     l2486:
  4536  00250E  90D8               	bcf	status,0,c
  4537  002510  3605               	rlcf	___lldiv@divisor,f,c
  4538  002512  3606               	rlcf	___lldiv@divisor+1,f,c
  4539  002514  3607               	rlcf	___lldiv@divisor+2,f,c
  4540  002516  3608               	rlcf	___lldiv@divisor+3,f,c
  4541  002518  2A0D               	incf	___lldiv@counter,f,c
  4542  00251A                     l2488:
  4543  00251A  AE08               	btfss	___lldiv@divisor+3,7,c
  4544  00251C  D7F8               	goto	l2486
  4545  00251E                     l2490:
  4546  00251E  90D8               	bcf	status,0,c
  4547  002520  3609               	rlcf	___lldiv@quotient,f,c
  4548  002522  360A               	rlcf	___lldiv@quotient+1,f,c
  4549  002524  360B               	rlcf	___lldiv@quotient+2,f,c
  4550  002526  360C               	rlcf	___lldiv@quotient+3,f,c
  4551  002528  5005               	movf	___lldiv@divisor,w,c
  4552  00252A  5C01               	subwf	___lldiv@dividend,w,c
  4553  00252C  5006               	movf	___lldiv@divisor+1,w,c
  4554  00252E  5802               	subwfb	___lldiv@dividend+1,w,c
  4555  002530  5007               	movf	___lldiv@divisor+2,w,c
  4556  002532  5803               	subwfb	___lldiv@dividend+2,w,c
  4557  002534  5008               	movf	___lldiv@divisor+3,w,c
  4558  002536  5804               	subwfb	___lldiv@dividend+3,w,c
  4559  002538  A0D8               	btfss	status,0,c
  4560  00253A  D009               	goto	l2498
  4561  00253C  5005               	movf	___lldiv@divisor,w,c
  4562  00253E  5E01               	subwf	___lldiv@dividend,f,c
  4563  002540  5006               	movf	___lldiv@divisor+1,w,c
  4564  002542  5A02               	subwfb	___lldiv@dividend+1,f,c
  4565  002544  5007               	movf	___lldiv@divisor+2,w,c
  4566  002546  5A03               	subwfb	___lldiv@dividend+2,f,c
  4567  002548  5008               	movf	___lldiv@divisor+3,w,c
  4568  00254A  5A04               	subwfb	___lldiv@dividend+3,f,c
  4569  00254C  8009               	bsf	___lldiv@quotient,0,c
  4570  00254E                     l2498:
  4571  00254E  90D8               	bcf	status,0,c
  4572  002550  3208               	rrcf	___lldiv@divisor+3,f,c
  4573  002552  3207               	rrcf	___lldiv@divisor+2,f,c
  4574  002554  3206               	rrcf	___lldiv@divisor+1,f,c
  4575  002556  3205               	rrcf	___lldiv@divisor,f,c
  4576  002558  2E0D               	decfsz	___lldiv@counter,f,c
  4577  00255A  D7E1               	goto	l2490
  4578  00255C                     l614:
  4579  00255C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4580  002560  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4581  002564  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4582  002568  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4583  00256C  0012               	return		;funcret
  4584  00256E                     __end_of___lldiv:
  4585                           	opt stack 0
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           prodh	equ	0xFF4
  4591                           prodl	equ	0xFF3
  4592                           wreg	equ	0xFE8
  4593                           indf2	equ	0xFDF
  4594                           postinc2	equ	0xFDE
  4595                           postdec2	equ	0xFDD
  4596                           fsr2h	equ	0xFDA
  4597                           fsr2l	equ	0xFD9
  4598                           status	equ	0xFD8
  4599                           
  4600 ;; *************** function ___fttol *****************
  4601 ;; Defined at:
  4602 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  f1              3   42[COMRAM] float 
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;  lval            4   52[COMRAM] unsigned long 
  4607 ;;  exp1            1   56[COMRAM] unsigned char 
  4608 ;;  sign1           1   51[COMRAM] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  4   42[COMRAM] long 
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, status,0
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4618 ;;      Params:         4       0       0       0       0       0       0       0       0
  4619 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4620 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4621 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4622 ;;Total ram usage:       15 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; This function calls:
  4625 ;;		Nothing
  4626 ;; This function is called by:
  4627 ;;		_sprintf
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           	psect	text14
  4632  0020B4                     __ptext14:
  4633                           	opt stack 0
  4634  0020B4                     ___fttol:
  4635                           	opt stack 29
  4636                           
  4637                           ;incstack = 0
  4638  0020B4  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4639  0020B8  6A30               	clrf	(??___fttol+1)& (0+255),c
  4640  0020BA  6A31               	clrf	(??___fttol+2)& (0+255),c
  4641  0020BC  342C               	rlcf	___fttol@f1+1,w,c
  4642  0020BE  362F               	rlcf	??___fttol& (0+255),f,c
  4643  0020C0  E301               	bnc	u3011
  4644  0020C2  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4645  0020C4                     u3011:
  4646  0020C4  502F               	movf	??___fttol,w,c
  4647  0020C6  6E39               	movwf	___fttol@exp1,c
  4648  0020C8  5039               	movf	___fttol@exp1,w,c
  4649  0020CA  A4D8               	btfss	status,2,c
  4650  0020CC  D009               	goto	l2440
  4651  0020CE  0E00               	movlw	0
  4652  0020D0  6E2B               	movwf	?___fttol,c
  4653  0020D2  0E00               	movlw	0
  4654  0020D4  6E2C               	movwf	?___fttol+1,c
  4655  0020D6  0E00               	movlw	0
  4656  0020D8  6E2D               	movwf	?___fttol+2,c
  4657  0020DA  0E00               	movlw	0
  4658  0020DC  6E2E               	movwf	?___fttol+3,c
  4659  0020DE  0012               	return	
  4660  0020E0                     l2440:
  4661  0020E0  0E17               	movlw	23
  4662  0020E2  6E2F               	movwf	??___fttol& (0+255),c
  4663  0020E4  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4664  0020E8  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4665  0020EC  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4666  0020F0  282F               	incf	??___fttol,w,c
  4667  0020F2  6E33               	movwf	(??___fttol+4)& (0+255),c
  4668  0020F4  D004               	goto	u3030
  4669  0020F6                     u3035:
  4670  0020F6  90D8               	bcf	status,0,c
  4671  0020F8  3232               	rrcf	??___fttol+3,f,c
  4672  0020FA  3231               	rrcf	??___fttol+2,f,c
  4673  0020FC  3230               	rrcf	??___fttol+1,f,c
  4674  0020FE                     u3030:
  4675  0020FE  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4676  002100  D7FA               	goto	u3035
  4677  002102  5030               	movf	??___fttol+1,w,c
  4678  002104  6E34               	movwf	___fttol@sign1,c
  4679  002106  8E2C               	bsf	___fttol@f1+1,7,c
  4680  002108  0EFF               	movlw	255
  4681  00210A  162B               	andwf	___fttol@f1,f,c
  4682  00210C  0EFF               	movlw	255
  4683  00210E  162C               	andwf	___fttol@f1+1,f,c
  4684  002110  0E00               	movlw	0
  4685  002112  162D               	andwf	___fttol@f1+2,f,c
  4686  002114  502B               	movf	___fttol@f1,w,c
  4687  002116  6E35               	movwf	___fttol@lval,c
  4688  002118  502C               	movf	___fttol@f1+1,w,c
  4689  00211A  6E36               	movwf	___fttol@lval+1,c
  4690  00211C  502D               	movf	___fttol@f1+2,w,c
  4691  00211E  6E37               	movwf	___fttol@lval+2,c
  4692  002120  6A38               	clrf	___fttol@lval+3,c
  4693  002122  0E8E               	movlw	142
  4694  002124  5E39               	subwf	___fttol@exp1,f,c
  4695  002126  AE39               	btfss	___fttol@exp1,7,c
  4696  002128  D016               	goto	l2462
  4697  00212A  5039               	movf	___fttol@exp1,w,c
  4698  00212C  0A80               	xorlw	128
  4699  00212E  0F8F               	addlw	143
  4700  002130  B0D8               	btfsc	status,0,c
  4701  002132  D009               	goto	l2458
  4702  002134  0E00               	movlw	0
  4703  002136  6E2B               	movwf	?___fttol,c
  4704  002138  0E00               	movlw	0
  4705  00213A  6E2C               	movwf	?___fttol+1,c
  4706  00213C  0E00               	movlw	0
  4707  00213E  6E2D               	movwf	?___fttol+2,c
  4708  002140  0E00               	movlw	0
  4709  002142  6E2E               	movwf	?___fttol+3,c
  4710  002144  0012               	return	
  4711  002146                     l2458:
  4712  002146  90D8               	bcf	status,0,c
  4713  002148  3238               	rrcf	___fttol@lval+3,f,c
  4714  00214A  3237               	rrcf	___fttol@lval+2,f,c
  4715  00214C  3236               	rrcf	___fttol@lval+1,f,c
  4716  00214E  3235               	rrcf	___fttol@lval,f,c
  4717  002150  3E39               	incfsz	___fttol@exp1,f,c
  4718  002152  D7F9               	goto	l2458
  4719  002154  D015               	goto	l2472
  4720  002156                     l2462:
  4721  002156  0E17               	movlw	23
  4722  002158  6439               	cpfsgt	___fttol@exp1,c
  4723  00215A  D00F               	goto	l2470
  4724  00215C  0E00               	movlw	0
  4725  00215E  6E2B               	movwf	?___fttol,c
  4726  002160  0E00               	movlw	0
  4727  002162  6E2C               	movwf	?___fttol+1,c
  4728  002164  0E00               	movlw	0
  4729  002166  6E2D               	movwf	?___fttol+2,c
  4730  002168  0E00               	movlw	0
  4731  00216A  6E2E               	movwf	?___fttol+3,c
  4732  00216C  0012               	return	
  4733  00216E                     l2468:
  4734  00216E  90D8               	bcf	status,0,c
  4735  002170  3635               	rlcf	___fttol@lval,f,c
  4736  002172  3636               	rlcf	___fttol@lval+1,f,c
  4737  002174  3637               	rlcf	___fttol@lval+2,f,c
  4738  002176  3638               	rlcf	___fttol@lval+3,f,c
  4739  002178  0639               	decf	___fttol@exp1,f,c
  4740  00217A                     l2470:
  4741  00217A  5039               	movf	___fttol@exp1,w,c
  4742  00217C  A4D8               	btfss	status,2,c
  4743  00217E  D7F7               	goto	l2468
  4744  002180                     l2472:
  4745  002180  5034               	movf	___fttol@sign1,w,c
  4746  002182  B4D8               	btfsc	status,2,c
  4747  002184  D008               	goto	l2476
  4748  002186  1E38               	comf	___fttol@lval+3,f,c
  4749  002188  1E37               	comf	___fttol@lval+2,f,c
  4750  00218A  1E36               	comf	___fttol@lval+1,f,c
  4751  00218C  6C35               	negf	___fttol@lval,c
  4752  00218E  0E00               	movlw	0
  4753  002190  2236               	addwfc	___fttol@lval+1,f,c
  4754  002192  2237               	addwfc	___fttol@lval+2,f,c
  4755  002194  2238               	addwfc	___fttol@lval+3,f,c
  4756  002196                     l2476:
  4757  002196  C035  F02B         	movff	___fttol@lval,?___fttol
  4758  00219A  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4759  00219E  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4760  0021A2  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4761  0021A6  0012               	return	
  4762  0021A8                     __end_of___fttol:
  4763                           	opt stack 0
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           prodh	equ	0xFF4
  4769                           prodl	equ	0xFF3
  4770                           wreg	equ	0xFE8
  4771                           indf2	equ	0xFDF
  4772                           postinc2	equ	0xFDE
  4773                           postdec2	equ	0xFDD
  4774                           fsr2h	equ	0xFDA
  4775                           fsr2l	equ	0xFD9
  4776                           status	equ	0xFD8
  4777                           
  4778 ;; *************** function ___ftsub *****************
  4779 ;; Defined at:
  4780 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;  f1              3   57[COMRAM] float 
  4783 ;;  f2              3   60[COMRAM] float 
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  3   57[COMRAM] float 
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, status,0, cstack
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4795 ;;      Params:         6       0       0       0       0       0       0       0       0
  4796 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4798 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4799 ;;Total ram usage:        6 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    2
  4802 ;; This function calls:
  4803 ;;		___ftadd
  4804 ;; This function is called by:
  4805 ;;		_sprintf
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text15
  4810  0026A0                     __ptext15:
  4811                           	opt stack 0
  4812  0026A0                     ___ftsub:
  4813                           	opt stack 27
  4814                           
  4815                           ;incstack = 0
  4816  0026A0  503D               	movf	___ftsub@f2,w,c
  4817  0026A2  103E               	iorwf	___ftsub@f2+1,w,c
  4818  0026A4  103F               	iorwf	___ftsub@f2+2,w,c
  4819  0026A6  B4D8               	btfsc	status,2,c
  4820  0026A8  D006               	goto	l2408
  4821  0026AA  0E00               	movlw	0
  4822  0026AC  1A3D               	xorwf	___ftsub@f2,f,c
  4823  0026AE  0E00               	movlw	0
  4824  0026B0  1A3E               	xorwf	___ftsub@f2+1,f,c
  4825  0026B2  0E80               	movlw	128
  4826  0026B4  1A3F               	xorwf	___ftsub@f2+2,f,c
  4827  0026B6                     l2408:
  4828  0026B6  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4829  0026BA  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4830  0026BE  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4831  0026C2  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4832  0026C6  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4833  0026CA  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4834  0026CE  EC3D  F00C         	call	___ftadd	;wreg free
  4835  0026D2  C02E  F03A         	movff	?___ftadd,?___ftsub
  4836  0026D6  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4837  0026DA  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4838  0026DE  0012               	return	
  4839  0026E0                     __end_of___ftsub:
  4840                           	opt stack 0
  4841                           tblptru	equ	0xFF8
  4842                           tblptrh	equ	0xFF7
  4843                           tblptrl	equ	0xFF6
  4844                           tablat	equ	0xFF5
  4845                           prodh	equ	0xFF4
  4846                           prodl	equ	0xFF3
  4847                           wreg	equ	0xFE8
  4848                           indf2	equ	0xFDF
  4849                           postinc2	equ	0xFDE
  4850                           postdec2	equ	0xFDD
  4851                           fsr2h	equ	0xFDA
  4852                           fsr2l	equ	0xFD9
  4853                           status	equ	0xFD8
  4854                           
  4855 ;; *************** function ___ftadd *****************
  4856 ;; Defined at:
  4857 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;  f1              3   45[COMRAM] float 
  4860 ;;  f2              3   48[COMRAM] float 
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;  exp1            1   56[COMRAM] unsigned char 
  4863 ;;  exp2            1   55[COMRAM] unsigned char 
  4864 ;;  sign            1   54[COMRAM] unsigned char 
  4865 ;; Return value:  Size  Location     Type
  4866 ;;                  3   45[COMRAM] float 
  4867 ;; Registers used:
  4868 ;;		wreg, status,2, status,0, cstack
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4874 ;;      Params:         6       0       0       0       0       0       0       0       0
  4875 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4876 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4877 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4878 ;;Total ram usage:       12 bytes
  4879 ;; Hardware stack levels used:    1
  4880 ;; Hardware stack levels required when called:    1
  4881 ;; This function calls:
  4882 ;;		___ftpack
  4883 ;; This function is called by:
  4884 ;;		_sprintf
  4885 ;;		___ftsub
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           	psect	text16
  4890  00187A                     __ptext16:
  4891                           	opt stack 0
  4892  00187A                     ___ftadd:
  4893                           	opt stack 27
  4894                           
  4895                           ;incstack = 0
  4896  00187A  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4897  00187E  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4898  001880  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4899  001882  342F               	rlcf	___ftadd@f1+1,w,c
  4900  001884  3634               	rlcf	??___ftadd& (0+255),f,c
  4901  001886  E301               	bnc	u1941
  4902  001888  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4903  00188A                     u1941:
  4904  00188A  5034               	movf	??___ftadd,w,c
  4905  00188C  6E39               	movwf	___ftadd@exp1,c
  4906  00188E  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4907  001892  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4908  001894  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4909  001896  3432               	rlcf	___ftadd@f2+1,w,c
  4910  001898  3634               	rlcf	??___ftadd& (0+255),f,c
  4911  00189A  E301               	bnc	u1951
  4912  00189C  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4913  00189E                     u1951:
  4914  00189E  5034               	movf	??___ftadd,w,c
  4915  0018A0  6E38               	movwf	___ftadd@exp2,c
  4916  0018A2  5039               	movf	___ftadd@exp1,w,c
  4917  0018A4  B4D8               	btfsc	status,2,c
  4918  0018A6  D00B               	goto	l490
  4919  0018A8  5038               	movf	___ftadd@exp2,w,c
  4920  0018AA  5C39               	subwf	___ftadd@exp1,w,c
  4921  0018AC  B0D8               	btfsc	status,0,c
  4922  0018AE  D00E               	goto	l1976
  4923  0018B0  5039               	movf	___ftadd@exp1,w,c
  4924  0018B2  0800               	sublw	0
  4925  0018B4  2438               	addwf	___ftadd@exp2,w,c
  4926  0018B6  6E34               	movwf	??___ftadd& (0+255),c
  4927  0018B8  0E18               	movlw	24
  4928  0018BA  6434               	cpfsgt	??___ftadd,c
  4929  0018BC  D007               	goto	l1976
  4930  0018BE                     l490:
  4931  0018BE  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4932  0018C2  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4933  0018C6  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4934  0018CA  0012               	return	
  4935  0018CC                     l1976:
  4936  0018CC  5038               	movf	___ftadd@exp2,w,c
  4937  0018CE  B4D8               	btfsc	status,2,c
  4938  0018D0  D00B               	goto	l494
  4939  0018D2  5039               	movf	___ftadd@exp1,w,c
  4940  0018D4  5C38               	subwf	___ftadd@exp2,w,c
  4941  0018D6  B0D8               	btfsc	status,0,c
  4942  0018D8  D00E               	goto	l1982
  4943  0018DA  5038               	movf	___ftadd@exp2,w,c
  4944  0018DC  0800               	sublw	0
  4945  0018DE  2439               	addwf	___ftadd@exp1,w,c
  4946  0018E0  6E34               	movwf	??___ftadd& (0+255),c
  4947  0018E2  0E18               	movlw	24
  4948  0018E4  6434               	cpfsgt	??___ftadd,c
  4949  0018E6  D007               	goto	l1982
  4950  0018E8                     l494:
  4951  0018E8  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4952  0018EC  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4953  0018F0  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4954  0018F4  0012               	return	
  4955  0018F6                     l1982:
  4956  0018F6  0E06               	movlw	6
  4957  0018F8  6E37               	movwf	___ftadd@sign,c
  4958  0018FA  BE30               	btfsc	___ftadd@f1+2,7,c
  4959  0018FC  8E37               	bsf	___ftadd@sign,7,c
  4960  0018FE  BE33               	btfsc	___ftadd@f2+2,7,c
  4961  001900  8C37               	bsf	___ftadd@sign,6,c
  4962  001902  8E2F               	bsf	___ftadd@f1+1,7,c
  4963  001904  0EFF               	movlw	255
  4964  001906  162E               	andwf	___ftadd@f1,f,c
  4965  001908  0EFF               	movlw	255
  4966  00190A  162F               	andwf	___ftadd@f1+1,f,c
  4967  00190C  0E00               	movlw	0
  4968  00190E  1630               	andwf	___ftadd@f1+2,f,c
  4969  001910  8E32               	bsf	___ftadd@f2+1,7,c
  4970  001912  0EFF               	movlw	255
  4971  001914  1631               	andwf	___ftadd@f2,f,c
  4972  001916  0EFF               	movlw	255
  4973  001918  1632               	andwf	___ftadd@f2+1,f,c
  4974  00191A  0E00               	movlw	0
  4975  00191C  1633               	andwf	___ftadd@f2+2,f,c
  4976  00191E  5038               	movf	___ftadd@exp2,w,c
  4977  001920  5C39               	subwf	___ftadd@exp1,w,c
  4978  001922  B0D8               	btfsc	status,0,c
  4979  001924  D01B               	goto	l2008
  4980  001926                     l1998:
  4981  001926  90D8               	bcf	status,0,c
  4982  001928  3631               	rlcf	___ftadd@f2,f,c
  4983  00192A  3632               	rlcf	___ftadd@f2+1,f,c
  4984  00192C  3633               	rlcf	___ftadd@f2+2,f,c
  4985  00192E  0638               	decf	___ftadd@exp2,f,c
  4986  001930  5039               	movf	___ftadd@exp1,w,c
  4987  001932  1838               	xorwf	___ftadd@exp2,w,c
  4988  001934  B4D8               	btfsc	status,2,c
  4989  001936  D00D               	goto	l2006
  4990  001938  0637               	decf	___ftadd@sign,f,c
  4991  00193A  C037  F034         	movff	___ftadd@sign,??___ftadd
  4992  00193E  0E07               	movlw	7
  4993  001940  1634               	andwf	??___ftadd,f,c
  4994  001942  B4D8               	btfsc	status,2,c
  4995  001944  D006               	goto	l2006
  4996  001946  D7EF               	goto	l1998
  4997  001948                     l2004:
  4998  001948  90D8               	bcf	status,0,c
  4999  00194A  3230               	rrcf	___ftadd@f1+2,f,c
  5000  00194C  322F               	rrcf	___ftadd@f1+1,f,c
  5001  00194E  322E               	rrcf	___ftadd@f1,f,c
  5002  001950  2A39               	incf	___ftadd@exp1,f,c
  5003  001952                     l2006:
  5004  001952  5038               	movf	___ftadd@exp2,w,c
  5005  001954  1839               	xorwf	___ftadd@exp1,w,c
  5006  001956  B4D8               	btfsc	status,2,c
  5007  001958  D01F               	goto	l505
  5008  00195A  D7F6               	goto	l2004
  5009  00195C                     l2008:
  5010  00195C  5039               	movf	___ftadd@exp1,w,c
  5011  00195E  5C38               	subwf	___ftadd@exp2,w,c
  5012  001960  B0D8               	btfsc	status,0,c
  5013  001962  D01A               	goto	l505
  5014  001964                     l2010:
  5015  001964  90D8               	bcf	status,0,c
  5016  001966  362E               	rlcf	___ftadd@f1,f,c
  5017  001968  362F               	rlcf	___ftadd@f1+1,f,c
  5018  00196A  3630               	rlcf	___ftadd@f1+2,f,c
  5019  00196C  0639               	decf	___ftadd@exp1,f,c
  5020  00196E  5039               	movf	___ftadd@exp1,w,c
  5021  001970  1838               	xorwf	___ftadd@exp2,w,c
  5022  001972  B4D8               	btfsc	status,2,c
  5023  001974  D00D               	goto	l2018
  5024  001976  0637               	decf	___ftadd@sign,f,c
  5025  001978  C037  F034         	movff	___ftadd@sign,??___ftadd
  5026  00197C  0E07               	movlw	7
  5027  00197E  1634               	andwf	??___ftadd,f,c
  5028  001980  B4D8               	btfsc	status,2,c
  5029  001982  D006               	goto	l2018
  5030  001984  D7EF               	goto	l2010
  5031  001986                     l2016:
  5032  001986  90D8               	bcf	status,0,c
  5033  001988  3233               	rrcf	___ftadd@f2+2,f,c
  5034  00198A  3232               	rrcf	___ftadd@f2+1,f,c
  5035  00198C  3231               	rrcf	___ftadd@f2,f,c
  5036  00198E  2A38               	incf	___ftadd@exp2,f,c
  5037  001990                     l2018:
  5038  001990  5038               	movf	___ftadd@exp2,w,c
  5039  001992  1839               	xorwf	___ftadd@exp1,w,c
  5040  001994  A4D8               	btfss	status,2,c
  5041  001996  D7F7               	goto	l2016
  5042  001998                     l505:
  5043  001998  AE37               	btfss	___ftadd@sign,7,c
  5044  00199A  D00C               	goto	l514
  5045  00199C  0EFF               	movlw	255
  5046  00199E  1A2E               	xorwf	___ftadd@f1,f,c
  5047  0019A0  0EFF               	movlw	255
  5048  0019A2  1A2F               	xorwf	___ftadd@f1+1,f,c
  5049  0019A4  0EFF               	movlw	255
  5050  0019A6  1A30               	xorwf	___ftadd@f1+2,f,c
  5051  0019A8  0E01               	movlw	1
  5052  0019AA  262E               	addwf	___ftadd@f1,f,c
  5053  0019AC  0E00               	movlw	0
  5054  0019AE  222F               	addwfc	___ftadd@f1+1,f,c
  5055  0019B0  0E00               	movlw	0
  5056  0019B2  2230               	addwfc	___ftadd@f1+2,f,c
  5057  0019B4                     l514:
  5058  0019B4  AC37               	btfss	___ftadd@sign,6,c
  5059  0019B6  D00C               	goto	l2024
  5060  0019B8  0EFF               	movlw	255
  5061  0019BA  1A31               	xorwf	___ftadd@f2,f,c
  5062  0019BC  0EFF               	movlw	255
  5063  0019BE  1A32               	xorwf	___ftadd@f2+1,f,c
  5064  0019C0  0EFF               	movlw	255
  5065  0019C2  1A33               	xorwf	___ftadd@f2+2,f,c
  5066  0019C4  0E01               	movlw	1
  5067  0019C6  2631               	addwf	___ftadd@f2,f,c
  5068  0019C8  0E00               	movlw	0
  5069  0019CA  2232               	addwfc	___ftadd@f2+1,f,c
  5070  0019CC  0E00               	movlw	0
  5071  0019CE  2233               	addwfc	___ftadd@f2+2,f,c
  5072  0019D0                     l2024:
  5073  0019D0  0E00               	movlw	0
  5074  0019D2  6E37               	movwf	___ftadd@sign,c
  5075  0019D4  502E               	movf	___ftadd@f1,w,c
  5076  0019D6  2631               	addwf	___ftadd@f2,f,c
  5077  0019D8  502F               	movf	___ftadd@f1+1,w,c
  5078  0019DA  2232               	addwfc	___ftadd@f2+1,f,c
  5079  0019DC  5030               	movf	___ftadd@f1+2,w,c
  5080  0019DE  2233               	addwfc	___ftadd@f2+2,f,c
  5081  0019E0  AE33               	btfss	___ftadd@f2+2,7,c
  5082  0019E2  D00E               	goto	l2034
  5083  0019E4  0EFF               	movlw	255
  5084  0019E6  1A31               	xorwf	___ftadd@f2,f,c
  5085  0019E8  0EFF               	movlw	255
  5086  0019EA  1A32               	xorwf	___ftadd@f2+1,f,c
  5087  0019EC  0EFF               	movlw	255
  5088  0019EE  1A33               	xorwf	___ftadd@f2+2,f,c
  5089  0019F0  0E01               	movlw	1
  5090  0019F2  2631               	addwf	___ftadd@f2,f,c
  5091  0019F4  0E00               	movlw	0
  5092  0019F6  2232               	addwfc	___ftadd@f2+1,f,c
  5093  0019F8  0E00               	movlw	0
  5094  0019FA  2233               	addwfc	___ftadd@f2+2,f,c
  5095  0019FC  0E01               	movlw	1
  5096  0019FE  6E37               	movwf	___ftadd@sign,c
  5097  001A00                     l2034:
  5098  001A00  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5099  001A04  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5100  001A08  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5101  001A0C  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5102  001A10  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5103  001A14  EC4D  F011         	call	___ftpack	;wreg free
  5104  001A18  C001  F02E         	movff	?___ftpack,?___ftadd
  5105  001A1C  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5106  001A20  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5107  001A24  0012               	return	
  5108  001A26                     __end_of___ftadd:
  5109                           	opt stack 0
  5110                           tblptru	equ	0xFF8
  5111                           tblptrh	equ	0xFF7
  5112                           tblptrl	equ	0xFF6
  5113                           tablat	equ	0xFF5
  5114                           prodh	equ	0xFF4
  5115                           prodl	equ	0xFF3
  5116                           wreg	equ	0xFE8
  5117                           indf2	equ	0xFDF
  5118                           postinc2	equ	0xFDE
  5119                           postdec2	equ	0xFDD
  5120                           fsr2h	equ	0xFDA
  5121                           fsr2l	equ	0xFD9
  5122                           status	equ	0xFD8
  5123                           
  5124 ;; *************** function ___ftneg *****************
  5125 ;; Defined at:
  5126 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;  f1              3    0[COMRAM] float 
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  3    0[COMRAM] float 
  5133 ;; Registers used:
  5134 ;;		wreg, status,2, status,0
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5140 ;;      Params:         3       0       0       0       0       0       0       0       0
  5141 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5142 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5143 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5144 ;;Total ram usage:        3 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; This function calls:
  5147 ;;		Nothing
  5148 ;; This function is called by:
  5149 ;;		_sprintf
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           	psect	text17
  5154  002764                     __ptext17:
  5155                           	opt stack 0
  5156  002764                     ___ftneg:
  5157                           	opt stack 29
  5158                           
  5159                           ;incstack = 0
  5160  002764  5001               	movf	___ftneg@f1,w,c
  5161  002766  1002               	iorwf	___ftneg@f1+1,w,c
  5162  002768  1003               	iorwf	___ftneg@f1+2,w,c
  5163  00276A  B4D8               	btfsc	status,2,c
  5164  00276C  D006               	goto	l564
  5165  00276E  0E00               	movlw	0
  5166  002770  1A01               	xorwf	___ftneg@f1,f,c
  5167  002772  0E00               	movlw	0
  5168  002774  1A02               	xorwf	___ftneg@f1+1,f,c
  5169  002776  0E80               	movlw	128
  5170  002778  1A03               	xorwf	___ftneg@f1+2,f,c
  5171  00277A                     l564:
  5172  00277A  C001  F001         	movff	___ftneg@f1,?___ftneg
  5173  00277E  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5174  002782  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5175  002786  0012               	return		;funcret
  5176  002788                     __end_of___ftneg:
  5177                           	opt stack 0
  5178                           tblptru	equ	0xFF8
  5179                           tblptrh	equ	0xFF7
  5180                           tblptrl	equ	0xFF6
  5181                           tablat	equ	0xFF5
  5182                           prodh	equ	0xFF4
  5183                           prodl	equ	0xFF3
  5184                           wreg	equ	0xFE8
  5185                           indf2	equ	0xFDF
  5186                           postinc2	equ	0xFDE
  5187                           postdec2	equ	0xFDD
  5188                           fsr2h	equ	0xFDA
  5189                           fsr2l	equ	0xFD9
  5190                           status	equ	0xFD8
  5191                           
  5192 ;; *************** function ___ftge *****************
  5193 ;; Defined at:
  5194 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  ff1             3    0[COMRAM] float 
  5197 ;;  ff2             3    3[COMRAM] float 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;		None
  5200 ;; Return value:  Size  Location     Type
  5201 ;;		None               void
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5209 ;;      Params:         6       0       0       0       0       0       0       0       0
  5210 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5211 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5212 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5213 ;;Total ram usage:        9 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; This function calls:
  5216 ;;		Nothing
  5217 ;; This function is called by:
  5218 ;;		_main
  5219 ;;		_sprintf
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           	psect	text18
  5224  002348                     __ptext18:
  5225                           	opt stack 0
  5226  002348                     ___ftge:
  5227                           	opt stack 29
  5228                           
  5229                           ;incstack = 0
  5230  002348  AE03               	btfss	___ftge@ff1+2,7,c
  5231  00234A  D016               	goto	l2416
  5232  00234C  C001  F007         	movff	___ftge@ff1,??___ftge
  5233  002350  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5234  002354  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5235  002358  1E07               	comf	??___ftge,f,c
  5236  00235A  1E08               	comf	??___ftge+1,f,c
  5237  00235C  1E09               	comf	??___ftge+2,f,c
  5238  00235E  2A07               	incf	??___ftge,f,c
  5239  002360  0E00               	movlw	0
  5240  002362  2208               	addwfc	??___ftge+1,f,c
  5241  002364  2209               	addwfc	??___ftge+2,f,c
  5242  002366  0E00               	movlw	0
  5243  002368  2407               	addwf	??___ftge,w,c
  5244  00236A  6E01               	movwf	___ftge@ff1,c
  5245  00236C  0E00               	movlw	0
  5246  00236E  2008               	addwfc	??___ftge+1,w,c
  5247  002370  6E02               	movwf	___ftge@ff1+1,c
  5248  002372  0E80               	movlw	128
  5249  002374  2009               	addwfc	??___ftge+2,w,c
  5250  002376  6E03               	movwf	___ftge@ff1+2,c
  5251  002378                     l2416:
  5252  002378  AE06               	btfss	___ftge@ff2+2,7,c
  5253  00237A  D016               	goto	l2420
  5254  00237C  C004  F007         	movff	___ftge@ff2,??___ftge
  5255  002380  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5256  002384  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5257  002388  1E07               	comf	??___ftge,f,c
  5258  00238A  1E08               	comf	??___ftge+1,f,c
  5259  00238C  1E09               	comf	??___ftge+2,f,c
  5260  00238E  2A07               	incf	??___ftge,f,c
  5261  002390  0E00               	movlw	0
  5262  002392  2208               	addwfc	??___ftge+1,f,c
  5263  002394  2209               	addwfc	??___ftge+2,f,c
  5264  002396  0E00               	movlw	0
  5265  002398  2407               	addwf	??___ftge,w,c
  5266  00239A  6E04               	movwf	___ftge@ff2,c
  5267  00239C  0E00               	movlw	0
  5268  00239E  2008               	addwfc	??___ftge+1,w,c
  5269  0023A0  6E05               	movwf	___ftge@ff2+1,c
  5270  0023A2  0E80               	movlw	128
  5271  0023A4  2009               	addwfc	??___ftge+2,w,c
  5272  0023A6  6E06               	movwf	___ftge@ff2+2,c
  5273  0023A8                     l2420:
  5274  0023A8  0E00               	movlw	0
  5275  0023AA  1A01               	xorwf	___ftge@ff1,f,c
  5276  0023AC  0E00               	movlw	0
  5277  0023AE  1A02               	xorwf	___ftge@ff1+1,f,c
  5278  0023B0  0E80               	movlw	128
  5279  0023B2  1A03               	xorwf	___ftge@ff1+2,f,c
  5280  0023B4  0E00               	movlw	0
  5281  0023B6  1A04               	xorwf	___ftge@ff2,f,c
  5282  0023B8  0E00               	movlw	0
  5283  0023BA  1A05               	xorwf	___ftge@ff2+1,f,c
  5284  0023BC  0E80               	movlw	128
  5285  0023BE  1A06               	xorwf	___ftge@ff2+2,f,c
  5286  0023C0  5004               	movf	___ftge@ff2,w,c
  5287  0023C2  5C01               	subwf	___ftge@ff1,w,c
  5288  0023C4  5005               	movf	___ftge@ff2+1,w,c
  5289  0023C6  5802               	subwfb	___ftge@ff1+1,w,c
  5290  0023C8  5006               	movf	___ftge@ff2+2,w,c
  5291  0023CA  5803               	subwfb	___ftge@ff1+2,w,c
  5292  0023CC  B0D8               	btfsc	status,0,c
  5293  0023CE  D002               	goto	l2426
  5294  0023D0  90D8               	bcf	status,0,c
  5295  0023D2  0012               	return	
  5296  0023D4                     l2426:
  5297  0023D4  80D8               	bsf	status,0,c
  5298  0023D6  0012               	return	
  5299  0023D8                     __end_of___ftge:
  5300                           	opt stack 0
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           wreg	equ	0xFE8
  5308                           indf2	equ	0xFDF
  5309                           postinc2	equ	0xFDE
  5310                           postdec2	equ	0xFDD
  5311                           fsr2h	equ	0xFDA
  5312                           fsr2l	equ	0xFD9
  5313                           status	equ	0xFD8
  5314                           
  5315 ;; *************** function _getCad *****************
  5316 ;; Defined at:
  5317 ;;		line 20 in file "Robot.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  canal           1    wreg     unsigned char 
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;  canal           1    2[COMRAM] unsigned char 
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  2    0[COMRAM] short 
  5324 ;; Registers used:
  5325 ;;		wreg, status,2, status,0
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5331 ;;      Params:         2       0       0       0       0       0       0       0       0
  5332 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5333 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5334 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5335 ;;Total ram usage:        3 bytes
  5336 ;; Hardware stack levels used:    1
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_main
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text19
  5345  00273E                     __ptext19:
  5346                           	opt stack 0
  5347  00273E                     _getCad:
  5348                           	opt stack 30
  5349                           
  5350                           ;incstack = 0
  5351                           ;getCad@canal stored from wreg
  5352  00273E  6E03               	movwf	getCad@canal,c
  5353                           
  5354                           ;Robot.c: 21: ADCON1 = 0b00001101;
  5355  002740  0E0D               	movlw	13
  5356  002742  6EC1               	movwf	4033,c	;volatile
  5357                           
  5358                           ;Robot.c: 22: switch(canal){
  5359  002744  D003               	goto	l2612
  5360  002746                     l2608:
  5361                           
  5362                           ;Robot.c: 24: ADCON0 = 0b00000010;
  5363  002746  0E02               	movlw	2
  5364  002748  6EC2               	movwf	4034,c	;volatile
  5365                           
  5366                           ;Robot.c: 26: }
  5367                           
  5368                           ;Robot.c: 25: break;
  5369  00274A  D004               	goto	l2614
  5370  00274C                     l2612:
  5371  00274C  5003               	movf	getCad@canal,w,c
  5372                           
  5373                           ; Switch size 1, requested type "space"
  5374                           ; Number of cases is 1, Range of values is 0 to 0
  5375                           ; switch strategies available:
  5376                           ; Name         Instructions Cycles
  5377                           ; simple_byte            4     3 (average)
  5378                           ;	Chosen strategy is simple_byte
  5379  00274E  0A00               	xorlw	0	; case 0
  5380  002750  B4D8               	btfsc	status,2,c
  5381  002752  D7F9               	goto	l2608
  5382  002754                     l2614:
  5383                           
  5384                           ;Robot.c: 27: ADCON2 = 0b00101001;
  5385  002754  0E29               	movlw	41
  5386  002756  6EC0               	movwf	4032,c	;volatile
  5387                           
  5388                           ;Robot.c: 28: ADON = 1;
  5389  002758  80C2               	bsf	4034,0,c	;volatile
  5390                           
  5391                           ;Robot.c: 29: GO_DONE = 1;
  5392  00275A  82C2               	bsf	4034,1,c	;volatile
  5393                           
  5394                           ;Robot.c: 31: return ADRESH;
  5395  00275C  CFC4 F001          	movff	4036,?_getCad	;volatile
  5396  002760  6A02               	clrf	?_getCad+1,c
  5397  002762  0012               	return	
  5398  002764                     __end_of_getCad:
  5399                           	opt stack 0
  5400                           tblptru	equ	0xFF8
  5401                           tblptrh	equ	0xFF7
  5402                           tblptrl	equ	0xFF6
  5403                           tablat	equ	0xFF5
  5404                           prodh	equ	0xFF4
  5405                           prodl	equ	0xFF3
  5406                           wreg	equ	0xFE8
  5407                           indf2	equ	0xFDF
  5408                           postinc2	equ	0xFDE
  5409                           postdec2	equ	0xFDD
  5410                           fsr2h	equ	0xFDA
  5411                           fsr2l	equ	0xFD9
  5412                           status	equ	0xFD8
  5413                           
  5414 ;; *************** function ___awtoft *****************
  5415 ;; Defined at:
  5416 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;  c               2    8[COMRAM] int 
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;  sign            1   11[COMRAM] unsigned char 
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  3    8[COMRAM] float 
  5423 ;; Registers used:
  5424 ;;		wreg, status,2, status,0, cstack
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5430 ;;      Params:         3       0       0       0       0       0       0       0       0
  5431 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5433 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5434 ;;Total ram usage:        4 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; Hardware stack levels required when called:    1
  5437 ;; This function calls:
  5438 ;;		___ftpack
  5439 ;; This function is called by:
  5440 ;;		_main
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           	psect	text20
  5445  0026E0                     __ptext20:
  5446                           	opt stack 0
  5447  0026E0                     ___awtoft:
  5448                           	opt stack 29
  5449                           
  5450                           ;incstack = 0
  5451  0026E0  0E00               	movlw	0
  5452  0026E2  6E0C               	movwf	___awtoft@sign,c
  5453  0026E4  AE0A               	btfss	___awtoft@c+1,7,c
  5454  0026E6  D006               	goto	l2894
  5455  0026E8  6C09               	negf	___awtoft@c,c
  5456  0026EA  1E0A               	comf	___awtoft@c+1,f,c
  5457  0026EC  B0D8               	btfsc	status,0,c
  5458  0026EE  2A0A               	incf	___awtoft@c+1,f,c
  5459  0026F0  0E01               	movlw	1
  5460  0026F2  6E0C               	movwf	___awtoft@sign,c
  5461  0026F4                     l2894:
  5462  0026F4  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5463  0026F8  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5464  0026FC  6A03               	clrf	___ftpack@arg+2,c
  5465  0026FE  0E8E               	movlw	142
  5466  002700  6E04               	movwf	___ftpack@exp,c
  5467  002702  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5468  002706  EC4D  F011         	call	___ftpack	;wreg free
  5469  00270A  C001  F009         	movff	?___ftpack,?___awtoft
  5470  00270E  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5471  002712  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5472  002716  0012               	return	
  5473  002718                     __end_of___awtoft:
  5474                           	opt stack 0
  5475                           tblptru	equ	0xFF8
  5476                           tblptrh	equ	0xFF7
  5477                           tblptrl	equ	0xFF6
  5478                           tablat	equ	0xFF5
  5479                           prodh	equ	0xFF4
  5480                           prodl	equ	0xFF3
  5481                           wreg	equ	0xFE8
  5482                           indf2	equ	0xFDF
  5483                           postinc2	equ	0xFDE
  5484                           postdec2	equ	0xFDD
  5485                           fsr2h	equ	0xFDA
  5486                           fsr2l	equ	0xFD9
  5487                           status	equ	0xFD8
  5488                           
  5489 ;; *************** function ___ftpack *****************
  5490 ;; Defined at:
  5491 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;  arg             3    0[COMRAM] unsigned um
  5494 ;;  exp             1    3[COMRAM] unsigned char 
  5495 ;;  sign            1    4[COMRAM] unsigned char 
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  3    0[COMRAM] float 
  5500 ;; Registers used:
  5501 ;;		wreg, status,2, status,0
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5507 ;;      Params:         5       0       0       0       0       0       0       0       0
  5508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5509 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5510 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5511 ;;Total ram usage:        8 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; This function calls:
  5514 ;;		Nothing
  5515 ;; This function is called by:
  5516 ;;		___awtoft
  5517 ;;		___ftadd
  5518 ;;		___ftmul
  5519 ;;		___lltoft
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           	psect	text21
  5524  00229A                     __ptext21:
  5525                           	opt stack 0
  5526  00229A                     ___ftpack:
  5527                           	opt stack 27
  5528                           
  5529                           ;incstack = 0
  5530  00229A  5004               	movf	___ftpack@exp,w,c
  5531  00229C  B4D8               	btfsc	status,2,c
  5532  00229E  D005               	goto	l1930
  5533  0022A0  5001               	movf	___ftpack@arg,w,c
  5534  0022A2  1002               	iorwf	___ftpack@arg+1,w,c
  5535  0022A4  1003               	iorwf	___ftpack@arg+2,w,c
  5536  0022A6  A4D8               	btfss	status,2,c
  5537  0022A8  D00C               	goto	l1936
  5538  0022AA                     l1930:
  5539  0022AA  0E00               	movlw	0
  5540  0022AC  6E01               	movwf	?___ftpack,c
  5541  0022AE  0E00               	movlw	0
  5542  0022B0  6E02               	movwf	?___ftpack+1,c
  5543  0022B2  0E00               	movlw	0
  5544  0022B4  6E03               	movwf	?___ftpack+2,c
  5545  0022B6  0012               	return	
  5546  0022B8                     l1934:
  5547  0022B8  2A04               	incf	___ftpack@exp,f,c
  5548  0022BA  90D8               	bcf	status,0,c
  5549  0022BC  3203               	rrcf	___ftpack@arg+2,f,c
  5550  0022BE  3202               	rrcf	___ftpack@arg+1,f,c
  5551  0022C0  3201               	rrcf	___ftpack@arg,f,c
  5552  0022C2                     l1936:
  5553  0022C2  0E00               	movlw	0
  5554  0022C4  1401               	andwf	___ftpack@arg,w,c
  5555  0022C6  6E06               	movwf	??___ftpack& (0+255),c
  5556  0022C8  0E00               	movlw	0
  5557  0022CA  1402               	andwf	___ftpack@arg+1,w,c
  5558  0022CC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5559  0022CE  0EFE               	movlw	254
  5560  0022D0  1403               	andwf	___ftpack@arg+2,w,c
  5561  0022D2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5562  0022D4  5006               	movf	??___ftpack,w,c
  5563  0022D6  1007               	iorwf	??___ftpack+1,w,c
  5564  0022D8  1008               	iorwf	??___ftpack+2,w,c
  5565  0022DA  B4D8               	btfsc	status,2,c
  5566  0022DC  D00C               	goto	l1942
  5567  0022DE  D7EC               	goto	l1934
  5568  0022E0                     l1938:
  5569  0022E0  2A04               	incf	___ftpack@exp,f,c
  5570  0022E2  0E01               	movlw	1
  5571  0022E4  2601               	addwf	___ftpack@arg,f,c
  5572  0022E6  0E00               	movlw	0
  5573  0022E8  2202               	addwfc	___ftpack@arg+1,f,c
  5574  0022EA  0E00               	movlw	0
  5575  0022EC  2203               	addwfc	___ftpack@arg+2,f,c
  5576  0022EE  90D8               	bcf	status,0,c
  5577  0022F0  3203               	rrcf	___ftpack@arg+2,f,c
  5578  0022F2  3202               	rrcf	___ftpack@arg+1,f,c
  5579  0022F4  3201               	rrcf	___ftpack@arg,f,c
  5580  0022F6                     l1942:
  5581  0022F6  0E00               	movlw	0
  5582  0022F8  1401               	andwf	___ftpack@arg,w,c
  5583  0022FA  6E06               	movwf	??___ftpack& (0+255),c
  5584  0022FC  0E00               	movlw	0
  5585  0022FE  1402               	andwf	___ftpack@arg+1,w,c
  5586  002300  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5587  002302  0EFF               	movlw	255
  5588  002304  1403               	andwf	___ftpack@arg+2,w,c
  5589  002306  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5590  002308  5006               	movf	??___ftpack,w,c
  5591  00230A  1007               	iorwf	??___ftpack+1,w,c
  5592  00230C  1008               	iorwf	??___ftpack+2,w,c
  5593  00230E  B4D8               	btfsc	status,2,c
  5594  002310  D006               	goto	l1946
  5595  002312  D7E6               	goto	l1938
  5596  002314                     l1944:
  5597  002314  0604               	decf	___ftpack@exp,f,c
  5598  002316  90D8               	bcf	status,0,c
  5599  002318  3601               	rlcf	___ftpack@arg,f,c
  5600  00231A  3602               	rlcf	___ftpack@arg+1,f,c
  5601  00231C  3603               	rlcf	___ftpack@arg+2,f,c
  5602  00231E                     l1946:
  5603  00231E  BE02               	btfsc	___ftpack@arg+1,7,c
  5604  002320  D003               	goto	l467
  5605  002322  0E02               	movlw	2
  5606  002324  6004               	cpfslt	___ftpack@exp,c
  5607  002326  D7F6               	goto	l1944
  5608  002328                     l467:
  5609  002328  A004               	btfss	___ftpack@exp,0,c
  5610  00232A  9E02               	bcf	___ftpack@arg+1,7,c
  5611  00232C  90D8               	bcf	status,0,c
  5612  00232E  3204               	rrcf	___ftpack@exp,f,c
  5613  002330  5004               	movf	___ftpack@exp,w,c
  5614  002332  1203               	iorwf	___ftpack@arg+2,f,c
  5615  002334  5005               	movf	___ftpack@sign,w,c
  5616  002336  A4D8               	btfss	status,2,c
  5617  002338  8E03               	bsf	___ftpack@arg+2,7,c
  5618  00233A  C001  F001         	movff	___ftpack@arg,?___ftpack
  5619  00233E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5620  002342  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5621  002346  0012               	return	
  5622  002348                     __end_of___ftpack:
  5623                           	opt stack 0
  5624                           tblptru	equ	0xFF8
  5625                           tblptrh	equ	0xFF7
  5626                           tblptrl	equ	0xFF6
  5627                           tablat	equ	0xFF5
  5628                           prodh	equ	0xFF4
  5629                           prodl	equ	0xFF3
  5630                           wreg	equ	0xFE8
  5631                           indf2	equ	0xFDF
  5632                           postinc2	equ	0xFDE
  5633                           postdec2	equ	0xFDD
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _Lcd_Out2 *****************
  5639 ;; Defined at:
  5640 ;;		line 116 in file "lcd.h"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;  y               1    wreg     unsigned char 
  5643 ;;  x               1    3[COMRAM] unsigned char 
  5644 ;;  buffer          2    4[COMRAM] PTR unsigned char 
  5645 ;;		 -> STR_4(7), STR_3(8), STR_2(7), main@temp(20), 
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;  y               1    6[COMRAM] unsigned char 
  5648 ;;  data            1    7[COMRAM] unsigned char 
  5649 ;; Return value:  Size  Location     Type
  5650 ;;                  1    wreg      void 
  5651 ;; Registers used:
  5652 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5653 ;; Tracked objects:
  5654 ;;		On entry : 0/0
  5655 ;;		On exit  : 0/0
  5656 ;;		Unchanged: 0/0
  5657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5658 ;;      Params:         3       0       0       0       0       0       0       0       0
  5659 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5660 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5661 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5662 ;;Total ram usage:        5 bytes
  5663 ;; Hardware stack levels used:    1
  5664 ;; Hardware stack levels required when called:    1
  5665 ;; This function calls:
  5666 ;;		_Lcd_Chr_CP
  5667 ;;		_Lcd_Cmd
  5668 ;; This function is called by:
  5669 ;;		_main
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673                           	psect	text22
  5674  0023D8                     __ptext22:
  5675                           	opt stack 0
  5676  0023D8                     _Lcd_Out2:
  5677                           	opt stack 29
  5678                           
  5679                           ;incstack = 0
  5680                           ;Lcd_Out2@y stored from wreg
  5681  0023D8  6E07               	movwf	Lcd_Out2@y,c
  5682                           
  5683                           ;lcd.h: 118: unsigned char data;
  5684                           ;lcd.h: 119: switch (y)
  5685  0023DA  D00D               	goto	l2596
  5686  0023DC                     l2586:
  5687  0023DC  5004               	movf	Lcd_Out2@x,w,c
  5688  0023DE  0F80               	addlw	128
  5689  0023E0  D008               	goto	L8
  5690  0023E2                     l2588:
  5691  0023E2  5004               	movf	Lcd_Out2@x,w,c
  5692  0023E4  0FC0               	addlw	192
  5693  0023E6  D005               	goto	L8
  5694  0023E8                     l2590:
  5695  0023E8  5004               	movf	Lcd_Out2@x,w,c
  5696  0023EA  0F94               	addlw	148
  5697  0023EC  D002               	goto	L8
  5698  0023EE                     l2592:
  5699  0023EE  5004               	movf	Lcd_Out2@x,w,c
  5700  0023F0  0FD4               	addlw	212
  5701  0023F2                     L8:
  5702  0023F2  6E08               	movwf	Lcd_Out2@data,c
  5703                           
  5704                           ;lcd.h: 126: }
  5705                           
  5706                           ;lcd.h: 125: default: break;
  5707  0023F4  D00D               	goto	l2598
  5708  0023F6                     l2596:
  5709  0023F6  5007               	movf	Lcd_Out2@y,w,c
  5710                           
  5711                           ; Switch size 1, requested type "space"
  5712                           ; Number of cases is 4, Range of values is 1 to 4
  5713                           ; switch strategies available:
  5714                           ; Name         Instructions Cycles
  5715                           ; simple_byte           13     7 (average)
  5716                           ;	Chosen strategy is simple_byte
  5717  0023F8  0A01               	xorlw	1	; case 1
  5718  0023FA  B4D8               	btfsc	status,2,c
  5719  0023FC  D7EF               	goto	l2586
  5720  0023FE  0A03               	xorlw	3	; case 2
  5721  002400  B4D8               	btfsc	status,2,c
  5722  002402  D7EF               	goto	l2588
  5723  002404  0A01               	xorlw	1	; case 3
  5724  002406  B4D8               	btfsc	status,2,c
  5725  002408  D7EF               	goto	l2590
  5726  00240A  0A07               	xorlw	7	; case 4
  5727  00240C  B4D8               	btfsc	status,2,c
  5728  00240E  D7EF               	goto	l2592
  5729  002410                     l2598:
  5730                           
  5731                           ;lcd.h: 127: Lcd_Cmd(data);
  5732  002410  5008               	movf	Lcd_Out2@data,w,c
  5733  002412  ECD4  F010         	call	_Lcd_Cmd
  5734                           
  5735                           ;lcd.h: 128: while(*buffer)
  5736  002416  D014               	goto	l2604
  5737  002418                     l2600:
  5738                           
  5739                           ;lcd.h: 129: {
  5740                           ;lcd.h: 130: Lcd_Chr_CP(*buffer);
  5741  002418  C005  FFF6         	movff	Lcd_Out2@buffer,tblptrl
  5742  00241C  C006  FFF7         	movff	Lcd_Out2@buffer+1,tblptrh
  5743  002420  6AF8               	clrf	tblptru,c
  5744  002422  0E07               	movlw	(high __ramtop+-1)
  5745  002424  64F7               	cpfsgt	tblptrh,c
  5746  002426  D003               	bra	u3187
  5747  002428  0008               	tblrd		*
  5748  00242A  50F5               	movf	tablat,w,c
  5749  00242C  D005               	bra	u3180
  5750  00242E                     u3187:
  5751  00242E  CFF6 FFE9          	movff	tblptrl,fsr0l
  5752  002432  CFF7 FFEA          	movff	tblptrh,fsr0h
  5753  002436  50EF               	movf	indf0,w,c
  5754  002438                     u3180:
  5755  002438  EC63  F00F         	call	_Lcd_Chr_CP
  5756                           
  5757                           ;lcd.h: 131: buffer++;
  5758  00243C  4A05               	infsnz	Lcd_Out2@buffer,f,c
  5759  00243E  2A06               	incf	Lcd_Out2@buffer+1,f,c
  5760  002440                     l2604:
  5761  002440  C005  FFF6         	movff	Lcd_Out2@buffer,tblptrl
  5762  002444  C006  FFF7         	movff	Lcd_Out2@buffer+1,tblptrh
  5763  002448  6AF8               	clrf	tblptru,c
  5764  00244A  0E07               	movlw	(high __ramtop+-1)
  5765  00244C  64F7               	cpfsgt	tblptrh,c
  5766  00244E  D003               	bra	u3197
  5767  002450  0008               	tblrd		*
  5768  002452  50F5               	movf	tablat,w,c
  5769  002454  D005               	bra	u3190
  5770  002456                     u3197:
  5771  002456  CFF6 FFE9          	movff	tblptrl,fsr0l
  5772  00245A  CFF7 FFEA          	movff	tblptrh,fsr0h
  5773  00245E  50EF               	movf	indf0,w,c
  5774  002460                     u3190:
  5775  002460  0900               	iorlw	0
  5776  002462  B4D8               	btfsc	status,2,c
  5777  002464  0012               	return	
  5778  002466  D7D8               	goto	l2600
  5779  002468                     __end_of_Lcd_Out2:
  5780                           	opt stack 0
  5781                           tblptru	equ	0xFF8
  5782                           tblptrh	equ	0xFF7
  5783                           tblptrl	equ	0xFF6
  5784                           tablat	equ	0xFF5
  5785                           prodh	equ	0xFF4
  5786                           prodl	equ	0xFF3
  5787                           indf0	equ	0xFEF
  5788                           fsr0h	equ	0xFEA
  5789                           fsr0l	equ	0xFE9
  5790                           wreg	equ	0xFE8
  5791                           indf2	equ	0xFDF
  5792                           postinc2	equ	0xFDE
  5793                           postdec2	equ	0xFDD
  5794                           fsr2h	equ	0xFDA
  5795                           fsr2l	equ	0xFD9
  5796                           status	equ	0xFD8
  5797                           
  5798 ;; *************** function _Lcd_Chr_CP *****************
  5799 ;; Defined at:
  5800 ;;		line 137 in file "lcd.h"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;  data            1    wreg     unsigned char 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;  data            1    2[COMRAM] unsigned char 
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  1    wreg      void 
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5814 ;;      Params:         0       0       0       0       0       0       0       0       0
  5815 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5816 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5817 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5818 ;;Total ram usage:        3 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; This function calls:
  5821 ;;		Nothing
  5822 ;; This function is called by:
  5823 ;;		_Lcd_Out2
  5824 ;;		_Lcd_Out
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           	psect	text23
  5829  001EC6                     __ptext23:
  5830                           	opt stack 0
  5831  001EC6                     _Lcd_Chr_CP:
  5832                           	opt stack 29
  5833                           
  5834                           ;incstack = 0
  5835                           ;Lcd_Chr_CP@data stored from wreg
  5836  001EC6  6E03               	movwf	Lcd_Chr_CP@data,c
  5837                           
  5838                           ;lcd.h: 138: RD3 = 0; RD2 = 1;
  5839  001EC8  9683               	bcf	3971,3,c	;volatile
  5840  001ECA  8483               	bsf	3971,2,c	;volatile
  5841                           
  5842                           ;lcd.h: 139: RD7 = (data & 0b10000000)>>7; RD6 = (data & 0b01000000)>>6;
  5843  001ECC  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  5844  001ECE  AE03               	btfss	Lcd_Chr_CP@data,7,c
  5845  001ED0  D001               	bra	u2525
  5846  001ED2  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  5847  001ED4                     u2525:
  5848  001ED4  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5849  001ED6  A0D8               	btfss	status,0,c
  5850  001ED8  D002               	goto	u2530
  5851  001EDA  8E83               	bsf	3971,7,c	;volatile
  5852  001EDC  D001               	goto	u2545
  5853  001EDE                     u2530:
  5854  001EDE  9E83               	bcf	3971,7,c	;volatile
  5855  001EE0                     u2545:
  5856  001EE0  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5857  001EE4  0E06               	movlw	6
  5858  001EE6  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  5859  001EE8                     u2555:
  5860  001EE8  90D8               	bcf	status,0,c
  5861  001EEA  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5862  001EEC  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  5863  001EEE  D7FC               	goto	u2555
  5864  001EF0  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5865  001EF2  A0D8               	btfss	status,0,c
  5866  001EF4  D002               	goto	u2560
  5867  001EF6  8C83               	bsf	3971,6,c	;volatile
  5868  001EF8  D001               	goto	u2575
  5869  001EFA                     u2560:
  5870  001EFA  9C83               	bcf	3971,6,c	;volatile
  5871  001EFC                     u2575:
  5872                           
  5873                           ;lcd.h: 140: RD5 = (data & 0b00100000)>>5; RD4 = (data & 0b00010000)>>4;
  5874  001EFC  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5875  001F00  0E05               	movlw	5
  5876  001F02  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  5877  001F04                     u2585:
  5878  001F04  90D8               	bcf	status,0,c
  5879  001F06  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5880  001F08  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  5881  001F0A  D7FC               	goto	u2585
  5882  001F0C  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5883  001F0E  A0D8               	btfss	status,0,c
  5884  001F10  D002               	goto	u2590
  5885  001F12  8A83               	bsf	3971,5,c	;volatile
  5886  001F14  D001               	goto	u2605
  5887  001F16                     u2590:
  5888  001F16  9A83               	bcf	3971,5,c	;volatile
  5889  001F18                     u2605:
  5890  001F18  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5891  001F1C  3A01               	swapf	??_Lcd_Chr_CP,f,c
  5892  001F1E  0E0F               	movlw	15
  5893  001F20  1601               	andwf	??_Lcd_Chr_CP,f,c
  5894  001F22  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5895  001F24  A0D8               	btfss	status,0,c
  5896  001F26  D002               	goto	u2610
  5897  001F28  8883               	bsf	3971,4,c	;volatile
  5898  001F2A  D001               	goto	l2194
  5899  001F2C                     u2610:
  5900  001F2C  9883               	bcf	3971,4,c	;volatile
  5901  001F2E                     l2194:
  5902                           
  5903                           ;lcd.h: 141: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5904  001F2E  0E06               	movlw	6
  5905  001F30                     u3727:
  5906  001F30  2EE8               	decfsz	wreg,f,c
  5907  001F32  D7FE               	bra	u3727
  5908  001F34  D000               	nop2	
  5909                           
  5910                           ;lcd.h: 142: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  5911  001F36  8683               	bsf	3971,3,c	;volatile
  5912  001F38  0E03               	movlw	3
  5913  001F3A                     u3737:
  5914  001F3A  2EE8               	decfsz	wreg,f,c
  5915  001F3C  D7FE               	bra	u3737
  5916  001F3E  F000               	nop	
  5917  001F40  9683               	bcf	3971,3,c	;volatile
  5918                           
  5919                           ;lcd.h: 143: RD7 = (data & 0b00001000)>>3; RD6 = (data & 0b00000100)>>2;
  5920  001F42  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5921  001F46  90D8               	bcf	status,0,c
  5922  001F48  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5923  001F4A  90D8               	bcf	status,0,c
  5924  001F4C  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5925  001F4E  90D8               	bcf	status,0,c
  5926  001F50  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5927  001F52  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5928  001F54  A0D8               	btfss	status,0,c
  5929  001F56  D002               	goto	u2630
  5930  001F58  8E83               	bsf	3971,7,c	;volatile
  5931  001F5A  D001               	goto	u2645
  5932  001F5C                     u2630:
  5933  001F5C  9E83               	bcf	3971,7,c	;volatile
  5934  001F5E                     u2645:
  5935  001F5E  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5936  001F62  90D8               	bcf	status,0,c
  5937  001F64  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5938  001F66  90D8               	bcf	status,0,c
  5939  001F68  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5940  001F6A  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5941  001F6C  A0D8               	btfss	status,0,c
  5942  001F6E  D002               	goto	u2650
  5943  001F70  8C83               	bsf	3971,6,c	;volatile
  5944  001F72  D001               	goto	u2665
  5945  001F74                     u2650:
  5946  001F74  9C83               	bcf	3971,6,c	;volatile
  5947  001F76                     u2665:
  5948                           
  5949                           ;lcd.h: 144: RD5 = (data & 0b00000010)>>1; RD4 = (data & 0b00000001);
  5950  001F76  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5951  001F7A  90D8               	bcf	status,0,c
  5952  001F7C  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5953  001F7E  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5954  001F80  A0D8               	btfss	status,0,c
  5955  001F82  D002               	goto	u2670
  5956  001F84  8A83               	bsf	3971,5,c	;volatile
  5957  001F86  D001               	goto	l2202
  5958  001F88                     u2670:
  5959  001F88  9A83               	bcf	3971,5,c	;volatile
  5960  001F8A                     l2202:
  5961  001F8A  A003               	btfss	Lcd_Chr_CP@data,0,c
  5962  001F8C  D002               	goto	u2690
  5963  001F8E  8883               	bsf	3971,4,c	;volatile
  5964  001F90  D001               	goto	l2204
  5965  001F92                     u2690:
  5966  001F92  9883               	bcf	3971,4,c	;volatile
  5967  001F94                     l2204:
  5968                           
  5969                           ;lcd.h: 145: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5970  001F94  0E06               	movlw	6
  5971  001F96                     u3747:
  5972  001F96  2EE8               	decfsz	wreg,f,c
  5973  001F98  D7FE               	bra	u3747
  5974  001F9A  D000               	nop2	
  5975                           
  5976                           ;lcd.h: 146: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  5977  001F9C  8683               	bsf	3971,3,c	;volatile
  5978  001F9E  0E03               	movlw	3
  5979  001FA0                     u3757:
  5980  001FA0  2EE8               	decfsz	wreg,f,c
  5981  001FA2  D7FE               	bra	u3757
  5982  001FA4  F000               	nop	
  5983  001FA6  9683               	bcf	3971,3,c	;volatile
  5984                           
  5985                           ;lcd.h: 147: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(8000000/4000000.0)));
  5986  001FA8  0E03               	movlw	3
  5987  001FAA                     u3767:
  5988  001FAA  2EE8               	decfsz	wreg,f,c
  5989  001FAC  D7FE               	bra	u3767
  5990  001FAE  F000               	nop	
  5991  001FB0  0E0F               	movlw	15
  5992  001FB2  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  5993  001FB4  0E48               	movlw	72
  5994  001FB6                     u3777:
  5995  001FB6  2EE8               	decfsz	wreg,f,c
  5996  001FB8  D7FE               	bra	u3777
  5997  001FBA  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  5998  001FBC  D7FC               	bra	u3777
  5999  001FBE  0012               	return		;funcret
  6000  001FC0                     __end_of_Lcd_Chr_CP:
  6001                           	opt stack 0
  6002                           tblptru	equ	0xFF8
  6003                           tblptrh	equ	0xFF7
  6004                           tblptrl	equ	0xFF6
  6005                           tablat	equ	0xFF5
  6006                           prodh	equ	0xFF4
  6007                           prodl	equ	0xFF3
  6008                           indf0	equ	0xFEF
  6009                           fsr0h	equ	0xFEA
  6010                           fsr0l	equ	0xFE9
  6011                           wreg	equ	0xFE8
  6012                           indf2	equ	0xFDF
  6013                           postinc2	equ	0xFDE
  6014                           postdec2	equ	0xFDD
  6015                           fsr2h	equ	0xFDA
  6016                           fsr2l	equ	0xFD9
  6017                           status	equ	0xFD8
  6018                           
  6019 ;; *************** function _Lcd_Init *****************
  6020 ;; Defined at:
  6021 ;;		line 53 in file "lcd.h"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;		None
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  data            1    4[COMRAM] unsigned char 
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  1    wreg      void 
  6028 ;; Registers used:
  6029 ;;		wreg, status,2, status,0, cstack
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6035 ;;      Params:         0       0       0       0       0       0       0       0       0
  6036 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6037 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6038 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6039 ;;Total ram usage:        2 bytes
  6040 ;; Hardware stack levels used:    1
  6041 ;; Hardware stack levels required when called:    1
  6042 ;; This function calls:
  6043 ;;		_Lcd_Cmd
  6044 ;; This function is called by:
  6045 ;;		_main
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           
  6049                           	psect	text24
  6050  001DAC                     __ptext24:
  6051                           	opt stack 0
  6052  001DAC                     _Lcd_Init:
  6053                           	opt stack 29
  6054                           
  6055                           ;lcd.h: 54: unsigned char data;
  6056                           ;lcd.h: 55: TRISD7 = 0;
  6057                           
  6058                           ;incstack = 0
  6059  001DAC  9E95               	bcf	3989,7,c	;volatile
  6060                           
  6061                           ;lcd.h: 56: TRISD6 = 0;
  6062  001DAE  9C95               	bcf	3989,6,c	;volatile
  6063                           
  6064                           ;lcd.h: 57: TRISD5 = 0;
  6065  001DB0  9A95               	bcf	3989,5,c	;volatile
  6066                           
  6067                           ;lcd.h: 58: TRISD4 = 0;
  6068  001DB2  9895               	bcf	3989,4,c	;volatile
  6069                           
  6070                           ;lcd.h: 59: TRISD3 = 0;
  6071  001DB4  9695               	bcf	3989,3,c	;volatile
  6072                           
  6073                           ;lcd.h: 60: TRISD2 = 0;
  6074  001DB6  9495               	bcf	3989,2,c	;volatile
  6075                           
  6076                           ;lcd.h: 61: RD7 = 0;
  6077  001DB8  9E83               	bcf	3971,7,c	;volatile
  6078                           
  6079                           ;lcd.h: 62: RD6 = 0;
  6080  001DBA  9C83               	bcf	3971,6,c	;volatile
  6081                           
  6082                           ;lcd.h: 63: RD5 = 0;
  6083  001DBC  9A83               	bcf	3971,5,c	;volatile
  6084                           
  6085                           ;lcd.h: 64: RD4 = 0;
  6086  001DBE  9883               	bcf	3971,4,c	;volatile
  6087                           
  6088                           ;lcd.h: 65: RD3 = 0;
  6089  001DC0  9683               	bcf	3971,3,c	;volatile
  6090                           
  6091                           ;lcd.h: 66: RD2 = 0;
  6092  001DC2  9483               	bcf	3971,2,c	;volatile
  6093                           
  6094                           ;lcd.h: 67: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6095  001DC4  0E0F               	movlw	15
  6096  001DC6  6E04               	movwf	??_Lcd_Init& (0+255),c
  6097  001DC8  0E48               	movlw	72
  6098  001DCA                     u3787:
  6099  001DCA  2EE8               	decfsz	wreg,f,c
  6100  001DCC  D7FE               	bra	u3787
  6101  001DCE  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6102  001DD0  D7FC               	bra	u3787
  6103                           
  6104                           ;lcd.h: 68: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6105  001DD2  0E0F               	movlw	15
  6106  001DD4  6E04               	movwf	??_Lcd_Init& (0+255),c
  6107  001DD6  0E48               	movlw	72
  6108  001DD8                     u3797:
  6109  001DD8  2EE8               	decfsz	wreg,f,c
  6110  001DDA  D7FE               	bra	u3797
  6111  001DDC  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6112  001DDE  D7FC               	bra	u3797
  6113                           
  6114                           ;lcd.h: 69: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6115  001DE0  0E0F               	movlw	15
  6116  001DE2  6E04               	movwf	??_Lcd_Init& (0+255),c
  6117  001DE4  0E48               	movlw	72
  6118  001DE6                     u3807:
  6119  001DE6  2EE8               	decfsz	wreg,f,c
  6120  001DE8  D7FE               	bra	u3807
  6121  001DEA  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6122  001DEC  D7FC               	bra	u3807
  6123                           
  6124                           ;lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6125  001DEE  0E0F               	movlw	15
  6126  001DF0  6E04               	movwf	??_Lcd_Init& (0+255),c
  6127  001DF2  0E48               	movlw	72
  6128  001DF4                     u3817:
  6129  001DF4  2EE8               	decfsz	wreg,f,c
  6130  001DF6  D7FE               	bra	u3817
  6131  001DF8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6132  001DFA  D7FC               	bra	u3817
  6133                           
  6134                           ;lcd.h: 71: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6135  001DFC  0E0F               	movlw	15
  6136  001DFE  6E04               	movwf	??_Lcd_Init& (0+255),c
  6137  001E00  0E48               	movlw	72
  6138  001E02                     u3827:
  6139  001E02  2EE8               	decfsz	wreg,f,c
  6140  001E04  D7FE               	bra	u3827
  6141  001E06  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6142  001E08  D7FC               	bra	u3827
  6143                           
  6144                           ;lcd.h: 72: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6145  001E0A  0E0F               	movlw	15
  6146  001E0C  6E04               	movwf	??_Lcd_Init& (0+255),c
  6147  001E0E  0E48               	movlw	72
  6148  001E10                     u3837:
  6149  001E10  2EE8               	decfsz	wreg,f,c
  6150  001E12  D7FE               	bra	u3837
  6151  001E14  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6152  001E16  D7FC               	bra	u3837
  6153                           
  6154                           ;lcd.h: 73: for(data = 1; data < 4; data ++)
  6155  001E18  0E01               	movlw	1
  6156  001E1A  6E05               	movwf	Lcd_Init@data,c
  6157  001E1C                     l2534:
  6158  001E1C  0E03               	movlw	3
  6159  001E1E  6405               	cpfsgt	Lcd_Init@data,c
  6160  001E20  D001               	goto	l63
  6161  001E22  D01F               	goto	l64
  6162  001E24                     l63:
  6163                           
  6164                           ;lcd.h: 74: {
  6165                           ;lcd.h: 75: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1; RD3 = 0;
  6166  001E24  9E83               	bcf	3971,7,c	;volatile
  6167  001E26  9C83               	bcf	3971,6,c	;volatile
  6168  001E28  8A83               	bsf	3971,5,c	;volatile
  6169  001E2A  8883               	bsf	3971,4,c	;volatile
  6170  001E2C  9683               	bcf	3971,3,c	;volatile
  6171                           
  6172                           ;lcd.h: 76: RD2 = 0; RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1;
  6173  001E2E  9483               	bcf	3971,2,c	;volatile
  6174  001E30  9E83               	bcf	3971,7,c	;volatile
  6175  001E32  9C83               	bcf	3971,6,c	;volatile
  6176  001E34  8A83               	bsf	3971,5,c	;volatile
  6177  001E36  8883               	bsf	3971,4,c	;volatile
  6178                           
  6179                           ;lcd.h: 77: RD3 = 1; RD2 = 0;
  6180  001E38  8683               	bsf	3971,3,c	;volatile
  6181  001E3A  9483               	bcf	3971,2,c	;volatile
  6182                           
  6183                           ;lcd.h: 78: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6184  001E3C  0E03               	movlw	3
  6185  001E3E                     u3847:
  6186  001E3E  2EE8               	decfsz	wreg,f,c
  6187  001E40  D7FE               	bra	u3847
  6188  001E42  F000               	nop	
  6189                           
  6190                           ;lcd.h: 79: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1; RD3 = 0;
  6191  001E44  9E83               	bcf	3971,7,c	;volatile
  6192  001E46  9C83               	bcf	3971,6,c	;volatile
  6193  001E48  8A83               	bsf	3971,5,c	;volatile
  6194  001E4A  8883               	bsf	3971,4,c	;volatile
  6195  001E4C  9683               	bcf	3971,3,c	;volatile
  6196                           
  6197                           ;lcd.h: 80: RD2 = 0;
  6198  001E4E  9483               	bcf	3971,2,c	;volatile
  6199                           
  6200                           ;lcd.h: 81: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6201  001E50  0E0F               	movlw	15
  6202  001E52  6E04               	movwf	??_Lcd_Init& (0+255),c
  6203  001E54  0E48               	movlw	72
  6204  001E56                     u3857:
  6205  001E56  2EE8               	decfsz	wreg,f,c
  6206  001E58  D7FE               	bra	u3857
  6207  001E5A  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6208  001E5C  D7FC               	bra	u3857
  6209  001E5E  2A05               	incf	Lcd_Init@data,f,c
  6210  001E60  D7DD               	goto	l2534
  6211  001E62                     l64:
  6212                           
  6213                           ;lcd.h: 82: }
  6214                           ;lcd.h: 83: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 0; RD2 = 0;
  6215  001E62  9E83               	bcf	3971,7,c	;volatile
  6216  001E64  9C83               	bcf	3971,6,c	;volatile
  6217  001E66  8A83               	bsf	3971,5,c	;volatile
  6218  001E68  9883               	bcf	3971,4,c	;volatile
  6219  001E6A  9683               	bcf	3971,3,c	;volatile
  6220  001E6C  9483               	bcf	3971,2,c	;volatile
  6221                           
  6222                           ;lcd.h: 84: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 1; RD2 = 0;
  6223  001E6E  9E83               	bcf	3971,7,c	;volatile
  6224  001E70  9C83               	bcf	3971,6,c	;volatile
  6225  001E72  8A83               	bsf	3971,5,c	;volatile
  6226  001E74  9883               	bcf	3971,4,c	;volatile
  6227  001E76  8683               	bsf	3971,3,c	;volatile
  6228  001E78  9483               	bcf	3971,2,c	;volatile
  6229                           
  6230                           ;lcd.h: 85: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6231  001E7A  0E03               	movlw	3
  6232  001E7C                     u3867:
  6233  001E7C  2EE8               	decfsz	wreg,f,c
  6234  001E7E  D7FE               	bra	u3867
  6235  001E80  F000               	nop	
  6236                           
  6237                           ;lcd.h: 86: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 0; RD2 = 0;
  6238  001E82  9E83               	bcf	3971,7,c	;volatile
  6239  001E84  9C83               	bcf	3971,6,c	;volatile
  6240  001E86  8A83               	bsf	3971,5,c	;volatile
  6241  001E88  9883               	bcf	3971,4,c	;volatile
  6242  001E8A  9683               	bcf	3971,3,c	;volatile
  6243  001E8C  9483               	bcf	3971,2,c	;volatile
  6244                           
  6245                           ;lcd.h: 87: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6246  001E8E  0E0F               	movlw	15
  6247  001E90  6E04               	movwf	??_Lcd_Init& (0+255),c
  6248  001E92  0E48               	movlw	72
  6249  001E94                     u3877:
  6250  001E94  2EE8               	decfsz	wreg,f,c
  6251  001E96  D7FE               	bra	u3877
  6252  001E98  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6253  001E9A  D7FC               	bra	u3877
  6254                           
  6255                           ;lcd.h: 88: data = 40; Lcd_Cmd(data);
  6256  001E9C  0E28               	movlw	40
  6257  001E9E  6E05               	movwf	Lcd_Init@data,c
  6258  001EA0  5005               	movf	Lcd_Init@data,w,c
  6259  001EA2  ECD4  F010         	call	_Lcd_Cmd
  6260                           
  6261                           ;lcd.h: 89: data = 16; Lcd_Cmd(data);
  6262  001EA6  0E10               	movlw	16
  6263  001EA8  6E05               	movwf	Lcd_Init@data,c
  6264  001EAA  5005               	movf	Lcd_Init@data,w,c
  6265  001EAC  ECD4  F010         	call	_Lcd_Cmd
  6266                           
  6267                           ;lcd.h: 90: data = 1; Lcd_Cmd(data);
  6268  001EB0  0E01               	movlw	1
  6269  001EB2  6E05               	movwf	Lcd_Init@data,c
  6270  001EB4  5005               	movf	Lcd_Init@data,w,c
  6271  001EB6  ECD4  F010         	call	_Lcd_Cmd
  6272                           
  6273                           ;lcd.h: 91: data = 15; Lcd_Cmd(data);
  6274  001EBA  0E0F               	movlw	15
  6275  001EBC  6E05               	movwf	Lcd_Init@data,c
  6276  001EBE  5005               	movf	Lcd_Init@data,w,c
  6277  001EC0  ECD4  F010         	call	_Lcd_Cmd
  6278  001EC4  0012               	return		;funcret
  6279  001EC6                     __end_of_Lcd_Init:
  6280                           	opt stack 0
  6281                           tblptru	equ	0xFF8
  6282                           tblptrh	equ	0xFF7
  6283                           tblptrl	equ	0xFF6
  6284                           tablat	equ	0xFF5
  6285                           prodh	equ	0xFF4
  6286                           prodl	equ	0xFF3
  6287                           indf0	equ	0xFEF
  6288                           fsr0h	equ	0xFEA
  6289                           fsr0l	equ	0xFE9
  6290                           wreg	equ	0xFE8
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function _Lcd_Cmd *****************
  6299 ;; Defined at:
  6300 ;;		line 151 in file "lcd.h"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  data            1    wreg     unsigned char 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  data            1    2[COMRAM] unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  1    wreg      void 
  6307 ;; Registers used:
  6308 ;;		wreg, status,2, status,0
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6314 ;;      Params:         0       0       0       0       0       0       0       0       0
  6315 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6316 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6317 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6318 ;;Total ram usage:        3 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; This function calls:
  6321 ;;		Nothing
  6322 ;; This function is called by:
  6323 ;;		_Lcd_Init
  6324 ;;		_Lcd_Out2
  6325 ;;		_main
  6326 ;;		_Lcd_Out
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           	psect	text25
  6331  0021A8                     __ptext25:
  6332                           	opt stack 0
  6333  0021A8                     _Lcd_Cmd:
  6334                           	opt stack 29
  6335                           
  6336                           ;incstack = 0
  6337                           ;Lcd_Cmd@data stored from wreg
  6338  0021A8  6E03               	movwf	Lcd_Cmd@data,c
  6339                           
  6340                           ;lcd.h: 152: RD3 = 0; RD2 = 0;
  6341  0021AA  9683               	bcf	3971,3,c	;volatile
  6342  0021AC  9483               	bcf	3971,2,c	;volatile
  6343                           
  6344                           ;lcd.h: 153: RD7 = (data & 0b10000000)>>7; RD6 = (data & 0b01000000)>>6;
  6345  0021AE  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  6346  0021B0  AE03               	btfss	Lcd_Cmd@data,7,c
  6347  0021B2  D001               	bra	u2335
  6348  0021B4  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  6349  0021B6                     u2335:
  6350  0021B6  3001               	rrcf	??_Lcd_Cmd,w,c
  6351  0021B8  A0D8               	btfss	status,0,c
  6352  0021BA  D002               	goto	u2340
  6353  0021BC  8E83               	bsf	3971,7,c	;volatile
  6354  0021BE  D001               	goto	u2355
  6355  0021C0                     u2340:
  6356  0021C0  9E83               	bcf	3971,7,c	;volatile
  6357  0021C2                     u2355:
  6358  0021C2  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6359  0021C6  0E06               	movlw	6
  6360  0021C8  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6361  0021CA                     u2365:
  6362  0021CA  90D8               	bcf	status,0,c
  6363  0021CC  3201               	rrcf	??_Lcd_Cmd,f,c
  6364  0021CE  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6365  0021D0  D7FC               	goto	u2365
  6366  0021D2  3001               	rrcf	??_Lcd_Cmd,w,c
  6367  0021D4  A0D8               	btfss	status,0,c
  6368  0021D6  D002               	goto	u2370
  6369  0021D8  8C83               	bsf	3971,6,c	;volatile
  6370  0021DA  D001               	goto	u2385
  6371  0021DC                     u2370:
  6372  0021DC  9C83               	bcf	3971,6,c	;volatile
  6373  0021DE                     u2385:
  6374                           
  6375                           ;lcd.h: 154: RD5 = (data & 0b00100000)>>5; RD4 = (data & 0b00010000)>>4;
  6376  0021DE  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6377  0021E2  0E05               	movlw	5
  6378  0021E4  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6379  0021E6                     u2395:
  6380  0021E6  90D8               	bcf	status,0,c
  6381  0021E8  3201               	rrcf	??_Lcd_Cmd,f,c
  6382  0021EA  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6383  0021EC  D7FC               	goto	u2395
  6384  0021EE  3001               	rrcf	??_Lcd_Cmd,w,c
  6385  0021F0  A0D8               	btfss	status,0,c
  6386  0021F2  D002               	goto	u2400
  6387  0021F4  8A83               	bsf	3971,5,c	;volatile
  6388  0021F6  D001               	goto	u2415
  6389  0021F8                     u2400:
  6390  0021F8  9A83               	bcf	3971,5,c	;volatile
  6391  0021FA                     u2415:
  6392  0021FA  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6393  0021FE  3A01               	swapf	??_Lcd_Cmd,f,c
  6394  002200  0E0F               	movlw	15
  6395  002202  1601               	andwf	??_Lcd_Cmd,f,c
  6396  002204  3001               	rrcf	??_Lcd_Cmd,w,c
  6397  002206  A0D8               	btfss	status,0,c
  6398  002208  D002               	goto	u2420
  6399  00220A  8883               	bsf	3971,4,c	;volatile
  6400  00220C  D001               	goto	l2170
  6401  00220E                     u2420:
  6402  00220E  9883               	bcf	3971,4,c	;volatile
  6403  002210                     l2170:
  6404                           
  6405                           ;lcd.h: 155: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6406  002210  0E06               	movlw	6
  6407  002212                     u3887:
  6408  002212  2EE8               	decfsz	wreg,f,c
  6409  002214  D7FE               	bra	u3887
  6410  002216  D000               	nop2	
  6411                           
  6412                           ;lcd.h: 156: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  6413  002218  8683               	bsf	3971,3,c	;volatile
  6414  00221A  0E03               	movlw	3
  6415  00221C                     u3897:
  6416  00221C  2EE8               	decfsz	wreg,f,c
  6417  00221E  D7FE               	bra	u3897
  6418  002220  F000               	nop	
  6419  002222  9683               	bcf	3971,3,c	;volatile
  6420                           
  6421                           ;lcd.h: 157: RD7 = (data & 0b00001000)>>3; RD6 = (data & 0b00000100)>>2;
  6422  002224  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6423  002228  90D8               	bcf	status,0,c
  6424  00222A  3201               	rrcf	??_Lcd_Cmd,f,c
  6425  00222C  90D8               	bcf	status,0,c
  6426  00222E  3201               	rrcf	??_Lcd_Cmd,f,c
  6427  002230  90D8               	bcf	status,0,c
  6428  002232  3201               	rrcf	??_Lcd_Cmd,f,c
  6429  002234  3001               	rrcf	??_Lcd_Cmd,w,c
  6430  002236  A0D8               	btfss	status,0,c
  6431  002238  D002               	goto	u2440
  6432  00223A  8E83               	bsf	3971,7,c	;volatile
  6433  00223C  D001               	goto	u2455
  6434  00223E                     u2440:
  6435  00223E  9E83               	bcf	3971,7,c	;volatile
  6436  002240                     u2455:
  6437  002240  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6438  002244  90D8               	bcf	status,0,c
  6439  002246  3201               	rrcf	??_Lcd_Cmd,f,c
  6440  002248  90D8               	bcf	status,0,c
  6441  00224A  3201               	rrcf	??_Lcd_Cmd,f,c
  6442  00224C  3001               	rrcf	??_Lcd_Cmd,w,c
  6443  00224E  A0D8               	btfss	status,0,c
  6444  002250  D002               	goto	u2460
  6445  002252  8C83               	bsf	3971,6,c	;volatile
  6446  002254  D001               	goto	u2475
  6447  002256                     u2460:
  6448  002256  9C83               	bcf	3971,6,c	;volatile
  6449  002258                     u2475:
  6450                           
  6451                           ;lcd.h: 158: RD5 = (data & 0b00000010)>>1; RD4 = (data & 0b00000001);
  6452  002258  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6453  00225C  90D8               	bcf	status,0,c
  6454  00225E  3201               	rrcf	??_Lcd_Cmd,f,c
  6455  002260  3001               	rrcf	??_Lcd_Cmd,w,c
  6456  002262  A0D8               	btfss	status,0,c
  6457  002264  D002               	goto	u2480
  6458  002266  8A83               	bsf	3971,5,c	;volatile
  6459  002268  D001               	goto	l2178
  6460  00226A                     u2480:
  6461  00226A  9A83               	bcf	3971,5,c	;volatile
  6462  00226C                     l2178:
  6463  00226C  A003               	btfss	Lcd_Cmd@data,0,c
  6464  00226E  D002               	goto	u2500
  6465  002270  8883               	bsf	3971,4,c	;volatile
  6466  002272  D001               	goto	l2180
  6467  002274                     u2500:
  6468  002274  9883               	bcf	3971,4,c	;volatile
  6469  002276                     l2180:
  6470                           
  6471                           ;lcd.h: 159: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6472  002276  0E06               	movlw	6
  6473  002278                     u3907:
  6474  002278  2EE8               	decfsz	wreg,f,c
  6475  00227A  D7FE               	bra	u3907
  6476  00227C  D000               	nop2	
  6477                           
  6478                           ;lcd.h: 160: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  6479  00227E  8683               	bsf	3971,3,c	;volatile
  6480  002280  0E03               	movlw	3
  6481  002282                     u3917:
  6482  002282  2EE8               	decfsz	wreg,f,c
  6483  002284  D7FE               	bra	u3917
  6484  002286  F000               	nop	
  6485  002288  9683               	bcf	3971,3,c	;volatile
  6486                           
  6487                           ;lcd.h: 161: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6488  00228A  0E0F               	movlw	15
  6489  00228C  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  6490  00228E  0E48               	movlw	72
  6491  002290                     u3927:
  6492  002290  2EE8               	decfsz	wreg,f,c
  6493  002292  D7FE               	bra	u3927
  6494  002294  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  6495  002296  D7FC               	bra	u3927
  6496  002298  0012               	return		;funcret
  6497  00229A                     __end_of_Lcd_Cmd:
  6498                           	opt stack 0
  6499                           tblptru	equ	0xFF8
  6500                           tblptrh	equ	0xFF7
  6501                           tblptrl	equ	0xFF6
  6502                           tablat	equ	0xFF5
  6503                           prodh	equ	0xFF4
  6504                           prodl	equ	0xFF3
  6505                           indf0	equ	0xFEF
  6506                           fsr0h	equ	0xFEA
  6507                           fsr0l	equ	0xFE9
  6508                           wreg	equ	0xFE8
  6509                           indf2	equ	0xFDF
  6510                           postinc2	equ	0xFDE
  6511                           postdec2	equ	0xFDD
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           tblptru	equ	0xFF8
  6516                           tblptrh	equ	0xFF7
  6517                           tblptrl	equ	0xFF6
  6518                           tablat	equ	0xFF5
  6519                           prodh	equ	0xFF4
  6520                           prodl	equ	0xFF3
  6521                           indf0	equ	0xFEF
  6522                           fsr0h	equ	0xFEA
  6523                           fsr0l	equ	0xFE9
  6524                           wreg	equ	0xFE8
  6525                           indf2	equ	0xFDF
  6526                           postinc2	equ	0xFDE
  6527                           postdec2	equ	0xFDD
  6528                           fsr2h	equ	0xFDA
  6529                           fsr2l	equ	0xFD9
  6530                           status	equ	0xFD8
  6531                           
  6532                           	psect	rparam
  6533  0000                     tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           prodh	equ	0xFF4
  6538                           prodl	equ	0xFF3
  6539                           indf0	equ	0xFEF
  6540                           fsr0h	equ	0xFEA
  6541                           fsr0l	equ	0xFE9
  6542                           wreg	equ	0xFE8
  6543                           indf2	equ	0xFDF
  6544                           postinc2	equ	0xFDE
  6545                           postdec2	equ	0xFDD
  6546                           fsr2h	equ	0xFDA
  6547                           fsr2l	equ	0xFD9
  6548                           status	equ	0xFD8


Data Sizes:
    Strings     30
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      78
    BANK0           160     48      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@temp(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[7]), STR_3(CODE[8]), STR_2(CODE[7]), main@temp(BANK0[20]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___awtoft->___ftpack
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0   53108
                                             76 COMRAM     2     2      0
                                             25 BANK0     23    23      0
                            _Lcd_Cmd
                           _Lcd_Init
                           _Lcd_Out2
                           ___awtoft
                             ___ftge
                            ___ftmul
                             _getCad
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   43997
                                             63 COMRAM    13     6      7
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10398
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10200
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4418
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                             _getCad (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2203
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3565
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3268
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     776
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _getCad                                               3     1      2      22
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2225
                                              8 COMRAM     4     1      3
                           ___ftpack
                             _getCad (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2070
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     2      3    1045
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   ___awtoft
     ___ftpack
     _getCad (ARG)
   ___ftge
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
       _getCad (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _getCad (ARG)
   _getCad
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             _getCad (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _getCad (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         _getCad (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _getCad (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               _getCad (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _getCad (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           _getCad (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _getCad (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             _getCad (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _getCad (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           _getCad (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _getCad (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           _getCad (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _getCad (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     4E      4E       1       82.1%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     30      30       5       30.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Oct 09 23:06:57 2021

                     l63 1E24                       l64 1E62             ___awdiv@sign 000C  
            __CFG_BOR$ON 000000      ___wmul@multiplicand 0011              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000             ___ftadd@exp1 0039             ___ftadd@exp2 0038  
            __CFG_LVP$ON 000000             ___ftadd@sign 0037                      l111 1C80  
                    l201 0F08                      l505 1998                      l514 19B4  
                    l435 1D9A                      l532 1AB8                      l533 1AE0  
                    l614 255C                      l624 2632                      l490 18BE  
                    l467 2328                      l539 1B46                      l564 277A  
                    l494 18E8             __CFG_CPB$OFF 000000                      _RA2 007C02  
                    _RC0 007C10                      _RD2 007C1A                      _RD3 007C1B  
                    _RD4 007C1C                      _RD5 007C1D                      _RD6 007C1E  
                    _RD7 007C1F             __CFG_CPD$OFF 000000             ___awmod@sign 0006  
                    wreg 000FE8              _sprintf$706 0060             __CFG_WDT$OFF 000000  
                   l2010 1964                     l2004 1948                     l2100 248C  
                   l2006 1952                     l2110 24AE                     l2024 19D0  
                   l2016 1986                     l2008 195C                     l2202 1F8A  
                   l2034 1A00                     l2018 1990                     l2106 24A2  
                   l2122 24D4                     l2050 2010                     l2204 1F94  
                   l2300 1A7E                     l2108 24AA                     l2044 1FE8  
                   l2126 24E2                     l2118 24CA                     l2150 25A8  
                   l2142 258E                     l2400 1D88                     l2064 2042  
                   l2170 2210                     l2402 1D94                     l2330 1B0C  
                   l2162 25D4                     l2154 25BC                     l2146 259C  
                   l2138 2582                     l2074 206A                     l2234 183A  
                   l2226 177A                     l2180 2276                     l2420 23A8  
                   l2340 1B34                     l2148 25A4                     l2068 2052  
                   l2510 2600                     l2350 1CA2                     l2342 1B40  
                   l2334 1B1C                     l2094 247C                     l2158 25C6  
                   l2078 207A                     l2254 141C                     l2600 2418  
                   l2416 2378                     l2408 26B6                     l2440 20E0  
                   l2520 264A                     l2272 1610                     l2248 1378  
                   l2178 226C                     l2194 1F2E                     l2426 23D4  
                   l2514 2624                     l2506 25F0                     l2522 2656  
                   l2370 1D02                     l2266 156C                     l2258 1440  
                   l2604 2440                     l2612 274C                     l2508 25FC  
                   l2356 1CC0                     l2284 279E                     l2700 0B08  
                   l2534 1E1C                     l2614 2754                     l2470 217A  
                   l2462 2156                     l2390 1D60                     l2294 1A52  
                   l2608 2746                     l2472 2180                     l2800 0F0C  
                   l2712 0B96                     l2632 08C0                     l1930 22AA  
                   l2458 2146                     l2490 251E                     l2394 1D70  
                   l2378 1D32                     l2714 0BAC                     l2626 08A6  
                   l2476 2196                     l2468 216E                     l2812 0F8C  
                   l2724 0C34                     l2716 0BDC                     l2708 0B70  
                   l2652 0978                     l2590 23E8                     l1942 22F6  
                   l1934 22B8                     l2486 250E                     l2830 1096  
                   l2822 1070                     l2742 0D1E                     l2718 0BF2  
                   l2662 09D8                     l2638 08F2                     l2646 0952  
                   l2592 23EE                     l1944 2314                     l1936 22C2  
                   l2488 251A                     l2824 107E                     l2808 0F3A  
                   l2760 0DAC                     l2744 0D24                     l2728 0C5A  
                   l2832 10A4                     l2656 09B2                     l2586 23DC  
                   l1946 231E                     l1938 22E0                     l2498 254E  
                   l2842 10EE                     l2770 0DDE                     l2738 0CB8  
                   l2674 0A20                     l2666 09DE                     l2658 09C8  
                   l2588 23E2                     l2596 23F6                     l2860 1184  
                   l2852 1146                     l2772 0DF2                     l2764 0DC6  
                   l2756 0D6A                     l2684 0A66                     l2668 0A06  
                   l2932 1B7A                     l2598 2410                     l1982 18F6  
                   l2846 111A                     l2838 10CA                     l2950 1C78  
                   l1976 18CC                     l2864 11B8                     l2776 0E16  
                   l2768 0DD6                     l2880 121A                     l2944 1C32  
                   l2874 11F2                     l2866 11C2                     l2858 117A  
                   l2794 0ED6                     l2778 0E1C                     l2786 0EB0  
                   l2882 1236                     l2868 11CE                     l2796 0EEA  
                   l2788 0EBE                     l2948 1C66                     l2894 26F4  
                   l1998 1926                     l2878 1216                     _ADON 007E10  
                   STR_1 0877                     STR_2 088E                     STR_3 087F  
                   STR_4 0887                     u3011 20C4                     u3030 20FE  
                   u2151 1FD0                     u2400 21F8                     u3035 20F6  
                   u2171 1FF8                     u2500 2274                     u2420 220E  
                   u2340 21C0                     u3300 0AA6                     u2415 21FA  
                   u2335 21B6                     u2440 223E                     u3305 0A9C  
                   u2370 21DC                     u2610 1F2C                     u2530 1EDE  
                   u2355 21C2                     u2460 2256                     u3180 2438  
                   u2365 21CA                     u2605 1F18                     u2525 1ED4  
                   u2630 1F5C                     u3190 2460                     u2455 2240  
                   u2480 226A                     u2560 1EFA                     u2385 21DE  
                   u2545 1EE0                     u2801 1A36                     u2650 1F74  
                   u2475 2258                     u2395 21E6                     u2555 1EE8  
                   u3187 242E                     u2645 1F5E                     u3197 2456  
                   u1941 188A                     u2821 1A62                     u2670 1F88  
                   u2590 1F16                     u2575 1EFC                     u1951 189E  
                   u2665 1F76                     u2585 1F04                     u2690 1F92  
                   u3490 0F00                     u3717 1BF0                     u3807 1DE6  
                   u3727 1F30                     u3817 1DF4                     u3737 1F3A  
                   u3907 2278                     u3827 1E02                     u3747 1F96  
                   u3917 2282                     u3837 1E10                     u3757 1FA0  
                   u3927 2290                     u3847 1E3E                     u3767 1FAA  
                   u3857 1E56                     u3777 1FB6                     u3867 1E7C  
                   u3787 1DCA                     u3877 1E94                     u3797 1DD8  
                   u3887 2212                     u3897 221C                     _main 1B58  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr0h 000FEA  
                   indf0 000FEF                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
        __end_of_Lcd_Cmd 229A            __CFG_MCLRE$ON 000000             ___ftmul@cntr 0022  
           ___param_bank 000000             ___ftmul@sign 0023               _Lcd_Chr_CP 1EC6  
           ___fttol@exp1 0039             ___fttol@lval 0035           Lcd_Out2@buffer 0005  
          __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
        __end_of___awdiv 24EC          __end_of___ftadd 1A26          __end_of___awmod 25DE  
        __end_of___ftneg 2788          __end_of___lldiv 256E          __end_of___ftmul 20B4  
        ___awdiv@divisor 0009          __end_of___llmod 2644          __end_of___ftsub 26E0  
        __end_of___fttol 21A8          ___awdiv@counter 000B            __CFG_USBDIV$1 000000  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000             ___lltoft@exp 0011  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
          ___awtoft@sign 000C          __end_of_dpowers 0829                    _scale 1244  
        __end_of_isdigit 27A6            ___ftpack@sign 0005                    tablat 000FF5  
                  status 000FD8          __end_of_sprintf 1244           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000         __end_of_Lcd_Init 1EC6         __end_of_Lcd_Out2 2468  
        __initialization 27A6             __end_of_main 1C84                   ??_main 004D  
          ___fttol@sign1 0034            __activetblptr 000002     __size_of__tdiv_to_l_ 0132  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
       ___llmod@dividend 0001                   ?_scale 0024                   _ADRESH 000FC4  
       ___awdiv@dividend 0007         __end_of___awtoft 2718         __end_of___ftpack 2348  
       __end_of___lltoft 26A0                   _OSCCON 000FD3                ??_Lcd_Cmd 0001  
                 _TRISA2 007C92                   _TRISC0 007CA0                   _TRISD2 007CAA  
                 _TRISD3 007CAB                   _TRISD4 007CAC                   _TRISD5 007CAD  
                 _TRISD6 007CAE                   _TRISD7 007CAF           __CFG_XINST$OFF 000000  
       __end_of__powers_ 0850                   ___ftge 2348              ?_Lcd_Chr_CP 0001  
                 ___wmul 2718                ??___awdiv 000B                ??___ftadd 0034  
         __CFG_STVREN$ON 000000                ??___awmod 0005                ??___ftneg 0004  
                 _getCad 273E                ??___lldiv 0009                ??___ftmul 001B  
              ??___llmod 0009                ??___ftsub 0040                ??___fttol 002F  
                 _fround 1634         ___awdiv@quotient 000D          ___awmod@divisor 0003  
        ___awmod@counter 0005    ___ftmul@f3_as_product 001F                ??_isdigit 0001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_sprintf 0047               __accesstop 0060  
__end_of__initialization 27A6               ___ftadd@f1 002E               ___ftadd@f2 0031  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
             ___ftneg@f1 0001               ___awtoft@c 0009               ___ftmul@f1 0015  
             ___ftmul@f2 0018               ___ftsub@f1 003A               ___ftsub@f2 003D  
             ___fttol@f1 002B           __pcstackCOMRAM 0001               ___lltoft@c 0009  
          __end_of_scale 1634               __div_to_l_ 1C84                ?_Lcd_Init 0001  
              ?_Lcd_Out2 0004          __div_to_l_@exp1 000C          __div_to_l_@cntr 000B  
                ??_scale 0027          __div_to_l_@quot 0007             sprintf@width 006B  
    __size_of_Lcd_Chr_CP 00FA            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
                ?___ftge 0001                  ?___wmul 000F                  ?_getCad 0001  
                ?_fround 0024                ?___awtoft 0009                ?___ftpack 0001  
              ?___lltoft 0009                  _GO_DONE 007E11               ??_Lcd_Init 0004  
             ??_Lcd_Out2 0007          __CFG_VREGEN$OFF 000000                  _Lcd_Cmd 21A8  
      __end_of__npowers_ 0877                  __Hparam 0000                  __Lparam 0000  
        __size_of___ftge 0090                  ___awdiv 2468                  ___ftadd 187A  
                ___awmod 256E                  ___ftneg 2764                  ___lldiv 24EC  
        __size_of___wmul 0026                  ___ftmul 1FC0                  ___llmod 25DE  
                ___ftsub 26A0                  ___fttol 20B4               _fround$703 002A  
             _fround$704 0027          __size_of_getCad 0026             __psmallconst 0800  
                __pcinit 27A6               ??___awtoft 000C               ??___ftpack 0006  
        __size_of_fround 0246                  __ramtop 0800               ??___lltoft 000D  
                __ptext0 1B58                  __ptext1 0896                  __ptext2 1244  
                __ptext3 2788                  __ptext4 1634                  __ptext5 2718  
                __ptext6 1FC0                  __ptext7 256E                  __ptext8 2468  
                __ptext9 1A26              ?__div_to_l_ 0001                  _dpowers 0801  
                _isdigit 2788         ___awmod@dividend 0001                  _sprintf 0896  
   end_of_initialization 27A6            __Lmediumconst 0000          ___lldiv@divisor 0005  
        ___lldiv@counter 000D             ??_Lcd_Chr_CP 0001                Lcd_Out2@x 0004  
              Lcd_Out2@y 0007                  postdec2 000FDD                  postinc2 000FDE  
         __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004            ??__tdiv_to_l_ 0007  
     __end_of_Lcd_Chr_CP 1FC0      __size_of__div_to_l_ 0128              ___ftmul@exp 001E  
         __end_of___ftge 23D8           __end_of___wmul 273E           __end_of_getCad 2764  
         __end_of_fround 187A      start_initialization 27A6      __end_of__tdiv_to_l_ 1B58  
      __size_of_Lcd_Init 011A        __size_of_Lcd_Out2 0090          ___llmod@divisor 0005  
        ___llmod@counter 0009                 ??___ftge 0007                 ??___wmul 0013  
               ??_getCad 0003         __CFG_LPT1OSC$OFF 000000                 ??_fround 0027  
          sprintf@tmpval 006D               fround@prec 002D        __size_of___awtoft 0038  
      __size_of___ftpack 00AE        __size_of___lltoft 005C            __pcstackBANK0 0060  
               ?_Lcd_Cmd 0001              sprintf@flag 0069              sprintf@fval 0073  
            sprintf@prec 0076                 ?___awdiv 0007                 ?___ftadd 002E  
               ?___awmod 0001                 ?___ftneg 0001                 ?___lldiv 0001  
               ?___ftmul 0015                 ?___llmod 0001                 ?___ftsub 003A  
              __npowers_ 0850                 ?___fttol 002B              __tdiv_to_l_ 1A26  
           ??__div_to_l_ 0007              __smallconst 0800                 ?_isdigit 0001  
              _scale$705 0027                 ?_sprintf 0040           __size_of_scale 03F0  
         ___wmul@product 0013       __end_of__div_to_l_ 1DAC         __CFG_WDTPS$32768 000000  
           Lcd_Init@data 0005        ___wmul@multiplier 000F             Lcd_Out2@data 0008  
               _Lcd_Init 1DAC                 _Lcd_Out2 23D8         __size_of_Lcd_Cmd 00F2  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0084  
       __size_of___ftadd 01AC         __size_of___awmod 0070         __size_of___ftneg 0024  
       __size_of___lldiv 0082         __size_of___ftmul 00F4         __size_of___llmod 0066  
       __size_of___ftsub 0040         __size_of___fttol 00F4                 ___awtoft 26E0  
               ___ftpack 229A                 ___lltoft 2644              _isdigit$377 0002  
             sprintf@exp 0071               sprintf@val 0065         __size_of_isdigit 001E  
         Lcd_Chr_CP@data 0003                 __ptext10 1C84                 __ptext11 2644  
               __ptext20 26E0                 __ptext12 25DE                 __ptext21 229A  
               __ptext13 24EC                 __ptext22 23D8                 __ptext14 20B4  
               __ptext23 1EC6                 __ptext15 26A0                 __ptext24 1DAC  
               __ptext16 187A                 __ptext25 21A8                 __ptext17 2764  
               __ptext18 2348                 __ptext19 273E                 __powers_ 0829  
       __size_of_sprintf 09AE              Lcd_Cmd@data 0003            __size_of_main 012C  
            getCad@canal 0003                 main@temp 0079    __CFG_CPUDIV$OSC1_PLL2 000000  
        main@temperatura 008D                 isdigit@c 0003                 scale@scl 002A  
              sprintf@ap 0063         __tdiv_to_l_@exp1 000F                sprintf@sp 0040  
       __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001  
           ?__tdiv_to_l_ 0001                 sprintf@c 0078                 sprintf@f 0042  
       ___lldiv@quotient 0009  
