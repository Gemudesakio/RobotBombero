

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Oct 11 13:41:04 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.41
    39                           ; Generated 25/01/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4550 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	smallconst
    74  000800                     __psmallconst:
    75                           	opt stack 0
    76  000800  00                 	db	0
    77  000801                     _dpowers:
    78                           	opt stack 0
    79  000801  0001               	dw	1
    80  000803  0000               	dw	0
    81  000805  000A               	dw	10
    82  000807  0000               	dw	0
    83  000809  0064               	dw	100
    84  00080B  0000               	dw	0
    85  00080D  03E8               	dw	1000
    86  00080F  0000               	dw	0
    87  000811  2710               	dw	10000
    88  000813  0000               	dw	0
    89  000815  86A0               	dw	34464
    90  000817  0001               	dw	1
    91  000819  4240               	dw	16960
    92  00081B  000F               	dw	15
    93  00081D  9680               	dw	38528
    94  00081F  0098               	dw	152
    95  000821  E100               	dw	57600
    96  000823  05F5               	dw	1525
    97  000825  CA00               	dw	51712
    98  000827  3B9A               	dw	15258
    99  000829                     __end_of_dpowers:
   100                           	opt stack 0
   101  000829                     __powers_:
   102                           	opt stack 0
   103  000829  00                 	db	0
   104  00082A  80                 	db	128
   105  00082B  3F                 	db	63
   106  00082C  00                 	db	0
   107  00082D  20                 	db	32
   108  00082E  41                 	db	65
   109  00082F  00                 	db	0
   110  000830  C8                 	db	200
   111  000831  42                 	db	66
   112  000832  00                 	db	0
   113  000833  7A                 	db	122
   114  000834  44                 	db	68
   115  000835  40                 	db	64
   116  000836  1C                 	db	28
   117  000837  46                 	db	70
   118  000838  50                 	db	80
   119  000839  C3                 	db	195
   120  00083A  47                 	db	71
   121  00083B  24                 	db	36
   122  00083C  74                 	db	116
   123  00083D  49                 	db	73
   124  00083E  97                 	db	151
   125  00083F  18                 	db	24
   126  000840  4B                 	db	75
   127  000841  BC                 	db	188
   128  000842  BE                 	db	190
   129  000843  4C                 	db	76
   130  000844  6B                 	db	107
   131  000845  6E                 	db	110
   132  000846  4E                 	db	78
   133  000847  03                 	db	3
   134  000848  15                 	db	21
   135  000849  50                 	db	80
   136  00084A  79                 	db	121
   137  00084B  AD                 	db	173
   138  00084C  60                 	db	96
   139  00084D  F3                 	db	243
   140  00084E  49                 	db	73
   141  00084F  71                 	db	113
   142  000850                     __end_of__powers_:
   143                           	opt stack 0
   144  000850                     __npowers_:
   145                           	opt stack 0
   146  000850  00                 	db	0
   147  000851  80                 	db	128
   148  000852  3F                 	db	63
   149  000853  CD                 	db	205
   150  000854  CC                 	db	204
   151  000855  3D                 	db	61
   152  000856  D7                 	db	215
   153  000857  23                 	db	35
   154  000858  3C                 	db	60
   155  000859  12                 	db	18
   156  00085A  83                 	db	131
   157  00085B  3A                 	db	58
   158  00085C  B7                 	db	183
   159  00085D  D1                 	db	209
   160  00085E  38                 	db	56
   161  00085F  C6                 	db	198
   162  000860  27                 	db	39
   163  000861  37                 	db	55
   164  000862  38                 	db	56
   165  000863  86                 	db	134
   166  000864  35                 	db	53
   167  000865  C0                 	db	192
   168  000866  D6                 	db	214
   169  000867  33                 	db	51
   170  000868  CC                 	db	204
   171  000869  2B                 	db	43
   172  00086A  32                 	db	50
   173  00086B  70                 	db	112
   174  00086C  89                 	db	137
   175  00086D  30                 	db	48
   176  00086E  E7                 	db	231
   177  00086F  DB                 	db	219
   178  000870  2E                 	db	46
   179  000871  E5                 	db	229
   180  000872  3C                 	db	60
   181  000873  1E                 	db	30
   182  000874  42                 	db	66
   183  000875  A2                 	db	162
   184  000876  0D                 	db	13
   185  000877                     __end_of__npowers_:
   186                           	opt stack 0
   187  0000                     _TRISB	set	3987
   188  0000                     _TRISD	set	3989
   189  0000                     _TRISA	set	3986
   190  0000                     _OSCCON	set	4051
   191  0000                     _ADRESH	set	4036
   192  0000                     _ADCON2	set	4032
   193  0000                     _ADCON0	set	4034
   194  0000                     _ADCON1	set	4033
   195  0000                     _RC0	set	31760
   196  0000                     _RA2	set	31746
   197  0000                     _RE0	set	31776
   198  0000                     _RE1	set	31777
   199  0000                     _RE2	set	31778
   200  0000                     _TRISE2	set	31922
   201  0000                     _TRISE1	set	31921
   202  0000                     _TRISE0	set	31920
   203  0000                     _TRISA2	set	31890
   204  0000                     _TRISC0	set	31904
   205  0000                     _GO_DONE	set	32273
   206  0000                     _ADON	set	32272
   207  0000                     _RD2	set	31770
   208  0000                     _RD3	set	31771
   209  0000                     _RD4	set	31772
   210  0000                     _RD5	set	31773
   211  0000                     _RD6	set	31774
   212  0000                     _RD7	set	31775
   213  0000                     _TRISD2	set	31914
   214  0000                     _TRISD3	set	31915
   215  0000                     _TRISD4	set	31916
   216  0000                     _TRISD5	set	31917
   217  0000                     _TRISD6	set	31918
   218  0000                     _TRISD7	set	31919
   219  000877                     STR_1:
   220  000877  25                 	db	37
   221  000878  32                 	db	50	;'2'
   222  000879  2E                 	db	46
   223  00087A  32                 	db	50	;'2'
   224  00087B  66                 	db	102	;'f'
   225  00087C  20                 	db	32
   226  00087D  43                 	db	67	;'C'
   227  00087E  00                 	db	0
   228  00087F                     STR_3:
   229  00087F  54                 	db	84	;'T'
   230  000880  20                 	db	32
   231  000881  4D                 	db	77	;'M'
   232  000882  65                 	db	101	;'e'
   233  000883  64                 	db	100	;'d'
   234  000884  69                 	db	105	;'i'
   235  000885  61                 	db	97	;'a'
   236  000886  00                 	db	0
   237  000887                     STR_4:
   238  000887  54                 	db	84	;'T'
   239  000888  20                 	db	32
   240  000889  42                 	db	66	;'B'
   241  00088A  61                 	db	97	;'a'
   242  00088B  6A                 	db	106	;'j'
   243  00088C  61                 	db	97	;'a'
   244  00088D  00                 	db	0
   245  00088E                     STR_2:
   246  00088E  54                 	db	84	;'T'
   247  00088F  20                 	db	32
   248  000890  41                 	db	65	;'A'
   249  000891  6C                 	db	108	;'l'
   250  000892  74                 	db	116	;'t'
   251  000893  61                 	db	97	;'a'
   252  000894  00                 	db	0
   253                           
   254                           ; #config settings
   255  000895  00                 	db	0	; dummy byte at the end
   256  0000                     
   257                           	psect	cinit
   258  0027BE                     __pcinit:
   259                           	opt stack 0
   260  0027BE                     start_initialization:
   261                           	opt stack 0
   262  0027BE                     __initialization:
   263                           	opt stack 0
   264  0027BE                     end_of_initialization:
   265                           	opt stack 0
   266  0027BE                     __end_of__initialization:
   267                           	opt stack 0
   268  0027BE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   269  0027C0  6EF8               	movwf	tblptru,c
   270  0027C2  0100               	movlb	0
   271  0027C4  EF13  F00D         	goto	_main	;jump to C main() function
   272                           tblptru	equ	0xFF8
   273                           
   274                           	psect	cstackBANK0
   275  000060                     __pcstackBANK0:
   276                           	opt stack 0
   277  000060                     _sprintf$712:
   278                           	opt stack 0
   279                           
   280                           ; 3 bytes @ 0x0
   281  000060                     	ds	3
   282  000063                     sprintf@ap:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x3
   286  000063                     	ds	2
   287  000065                     sprintf@val:
   288                           	opt stack 0
   289                           
   290                           ; 4 bytes @ 0x5
   291  000065                     	ds	4
   292  000069                     sprintf@flag:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x9
   296  000069                     	ds	2
   297  00006B                     sprintf@width:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0xB
   301  00006B                     	ds	2
   302  00006D                     sprintf@tmpval:
   303                           	opt stack 0
   304                           
   305                           ; 4 bytes @ 0xD
   306  00006D                     	ds	4
   307  000071                     sprintf@exp:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x11
   311  000071                     	ds	2
   312  000073                     sprintf@fval:
   313                           	opt stack 0
   314                           
   315                           ; 3 bytes @ 0x13
   316  000073                     	ds	3
   317  000076                     sprintf@prec:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x16
   321  000076                     	ds	2
   322  000078                     sprintf@c:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x18
   326  000078                     	ds	1
   327  000079                     main@temp:
   328                           	opt stack 0
   329                           
   330                           ; 20 bytes @ 0x19
   331  000079                     	ds	20
   332  00008D                     main@temperatura:
   333                           	opt stack 0
   334                           
   335                           ; 3 bytes @ 0x2D
   336  00008D                     	ds	3
   337                           tblptru	equ	0xFF8
   338                           
   339                           	psect	cstackCOMRAM
   340  000001                     __pcstackCOMRAM:
   341                           	opt stack 0
   342  000001                     ??_Lcd_Cmd:
   343  000001                     ??_Lcd_Chr_CP:
   344  000001                     ??_isdigit:
   345  000001                     ?_getCad:
   346                           	opt stack 0
   347  000001                     ?___awmod:
   348                           	opt stack 0
   349  000001                     ?___ftpack:
   350                           	opt stack 0
   351  000001                     ?___ftneg:
   352                           	opt stack 0
   353  000001                     ?__tdiv_to_l_:
   354                           	opt stack 0
   355  000001                     ?__div_to_l_:
   356                           	opt stack 0
   357  000001                     ?___lldiv:
   358                           	opt stack 0
   359  000001                     ?___llmod:
   360                           	opt stack 0
   361  000001                     ___awmod@dividend:
   362                           	opt stack 0
   363  000001                     __div_to_l_@f1:
   364                           	opt stack 0
   365  000001                     ___ftpack@arg:
   366                           	opt stack 0
   367  000001                     __tdiv_to_l_@f1:
   368                           	opt stack 0
   369  000001                     ___ftge@ff1:
   370                           	opt stack 0
   371  000001                     ___ftneg@f1:
   372                           	opt stack 0
   373  000001                     ___lldiv@dividend:
   374                           	opt stack 0
   375  000001                     ___llmod@dividend:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x0
   379  000001                     	ds	1
   380  000002                     _isdigit$383:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x1
   384  000002                     	ds	1
   385  000003                     Lcd_Chr_CP@data:
   386                           	opt stack 0
   387  000003                     Lcd_Cmd@data:
   388                           	opt stack 0
   389  000003                     getCad@canal:
   390                           	opt stack 0
   391  000003                     isdigit@c:
   392                           	opt stack 0
   393  000003                     ___awmod@divisor:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x2
   397  000003                     	ds	1
   398  000004                     ??_Lcd_Init:
   399  000004                     Lcd_Out2@x:
   400                           	opt stack 0
   401  000004                     ___ftpack@exp:
   402                           	opt stack 0
   403  000004                     __div_to_l_@f2:
   404                           	opt stack 0
   405  000004                     __tdiv_to_l_@f2:
   406                           	opt stack 0
   407  000004                     ___ftge@ff2:
   408                           	opt stack 0
   409                           
   410                           ; 3 bytes @ 0x3
   411  000004                     	ds	1
   412  000005                     Lcd_Init@data:
   413                           	opt stack 0
   414  000005                     ___awmod@counter:
   415                           	opt stack 0
   416  000005                     ___ftpack@sign:
   417                           	opt stack 0
   418  000005                     Lcd_Out2@buffer:
   419                           	opt stack 0
   420  000005                     ___lldiv@divisor:
   421                           	opt stack 0
   422  000005                     ___llmod@divisor:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0x4
   426  000005                     	ds	1
   427  000006                     ??___ftpack:
   428  000006                     ___awmod@sign:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x5
   432  000006                     	ds	1
   433  000007                     ??__tdiv_to_l_:
   434  000007                     ??___ftge:
   435  000007                     ?___awdiv:
   436                           	opt stack 0
   437  000007                     Lcd_Out2@y:
   438                           	opt stack 0
   439  000007                     ___awdiv@dividend:
   440                           	opt stack 0
   441  000007                     __div_to_l_@quot:
   442                           	opt stack 0
   443                           
   444                           ; 4 bytes @ 0x6
   445  000007                     	ds	1
   446  000008                     Lcd_Out2@data:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x7
   450  000008                     	ds	1
   451  000009                     ?___awtoft:
   452                           	opt stack 0
   453  000009                     ?___lltoft:
   454                           	opt stack 0
   455  000009                     ___llmod@counter:
   456                           	opt stack 0
   457  000009                     ___awdiv@divisor:
   458                           	opt stack 0
   459  000009                     ___awtoft@c:
   460                           	opt stack 0
   461  000009                     ___lldiv@quotient:
   462                           	opt stack 0
   463  000009                     ___lltoft@c:
   464                           	opt stack 0
   465                           
   466                           ; 4 bytes @ 0x8
   467  000009                     	ds	1
   468  00000A                     __tdiv_to_l_@quot:
   469                           	opt stack 0
   470                           
   471                           ; 4 bytes @ 0x9
   472  00000A                     	ds	1
   473  00000B                     ___awdiv@counter:
   474                           	opt stack 0
   475  00000B                     __div_to_l_@cntr:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0xA
   479  00000B                     	ds	1
   480  00000C                     ___awdiv@sign:
   481                           	opt stack 0
   482  00000C                     ___awtoft@sign:
   483                           	opt stack 0
   484  00000C                     __div_to_l_@exp1:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0xB
   488  00000C                     	ds	1
   489  00000D                     ??___lltoft:
   490  00000D                     ___lldiv@counter:
   491                           	opt stack 0
   492  00000D                     ___awdiv@quotient:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0xC
   496  00000D                     	ds	1
   497  00000E                     __tdiv_to_l_@cntr:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0xD
   501  00000E                     	ds	1
   502  00000F                     ?___wmul:
   503                           	opt stack 0
   504  00000F                     __tdiv_to_l_@exp1:
   505                           	opt stack 0
   506  00000F                     ___wmul@multiplier:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0xE
   510  00000F                     	ds	2
   511  000011                     ___lltoft@exp:
   512                           	opt stack 0
   513  000011                     ___wmul@multiplicand:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x10
   517  000011                     	ds	2
   518  000013                     ___wmul@product:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x12
   522  000013                     	ds	2
   523  000015                     ?___ftmul:
   524                           	opt stack 0
   525  000015                     ___ftmul@f1:
   526                           	opt stack 0
   527                           
   528                           ; 3 bytes @ 0x14
   529  000015                     	ds	3
   530  000018                     ___ftmul@f2:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0x17
   534  000018                     	ds	3
   535  00001B                     ??___ftmul:
   536                           
   537                           ; 1 bytes @ 0x1A
   538  00001B                     	ds	3
   539  00001E                     ___ftmul@exp:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x1D
   543  00001E                     	ds	1
   544  00001F                     ___ftmul@f3_as_product:
   545                           	opt stack 0
   546                           
   547                           ; 3 bytes @ 0x1E
   548  00001F                     	ds	3
   549  000022                     ___ftmul@cntr:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x21
   553  000022                     	ds	1
   554  000023                     ___ftmul@sign:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x22
   558  000023                     	ds	1
   559  000024                     ?_fround:
   560                           	opt stack 0
   561  000024                     ?_scale:
   562                           	opt stack 0
   563                           
   564                           ; 3 bytes @ 0x23
   565  000024                     	ds	3
   566  000027                     _fround$710:
   567                           	opt stack 0
   568  000027                     _scale$711:
   569                           	opt stack 0
   570                           
   571                           ; 3 bytes @ 0x26
   572  000027                     	ds	3
   573  00002A                     scale@scl:
   574                           	opt stack 0
   575  00002A                     _fround$709:
   576                           	opt stack 0
   577                           
   578                           ; 3 bytes @ 0x29
   579  00002A                     	ds	1
   580  00002B                     ?___fttol:
   581                           	opt stack 0
   582  00002B                     ___fttol@f1:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0x2A
   586  00002B                     	ds	2
   587  00002D                     fround@prec:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x2C
   591  00002D                     	ds	1
   592  00002E                     ?___ftadd:
   593                           	opt stack 0
   594  00002E                     ___ftadd@f1:
   595                           	opt stack 0
   596                           
   597                           ; 3 bytes @ 0x2D
   598  00002E                     	ds	1
   599  00002F                     ??___fttol:
   600                           
   601                           ; 1 bytes @ 0x2E
   602  00002F                     	ds	2
   603  000031                     ___ftadd@f2:
   604                           	opt stack 0
   605                           
   606                           ; 3 bytes @ 0x30
   607  000031                     	ds	3
   608  000034                     ??___ftadd:
   609  000034                     ___fttol@sign1:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x33
   613  000034                     	ds	1
   614  000035                     ___fttol@lval:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x34
   618  000035                     	ds	2
   619  000037                     ___ftadd@sign:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x36
   623  000037                     	ds	1
   624  000038                     ___ftadd@exp2:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x37
   628  000038                     	ds	1
   629  000039                     ___ftadd@exp1:
   630                           	opt stack 0
   631  000039                     ___fttol@exp1:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x38
   635  000039                     	ds	1
   636  00003A                     ?___ftsub:
   637                           	opt stack 0
   638  00003A                     ___ftsub@f1:
   639                           	opt stack 0
   640                           
   641                           ; 3 bytes @ 0x39
   642  00003A                     	ds	3
   643  00003D                     ___ftsub@f2:
   644                           	opt stack 0
   645                           
   646                           ; 3 bytes @ 0x3C
   647  00003D                     	ds	3
   648  000040                     ?_sprintf:
   649                           	opt stack 0
   650  000040                     sprintf@sp:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x3F
   654  000040                     	ds	2
   655  000042                     sprintf@f:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x41
   659  000042                     	ds	5
   660  000047                     ??_sprintf:
   661                           
   662                           ; 1 bytes @ 0x46
   663  000047                     	ds	6
   664  00004D                     ??_main:
   665                           
   666                           ; 1 bytes @ 0x4C
   667  00004D                     	ds	2
   668                           tblptru	equ	0xFF8
   669                           
   670 ;;
   671 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   672 ;;
   673 ;; *************** function _main *****************
   674 ;; Defined at:
   675 ;;		line 43 in file "Robot.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;  temp           20   25[BANK0 ] unsigned char [20]
   680 ;;  temperatura     3   45[BANK0 ] float 
   681 ;; Return value:  Size  Location     Type
   682 ;;                  1    wreg      void 
   683 ;; Registers used:
   684 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   690 ;;      Params:         0       0       0       0       0       0       0       0       0
   691 ;;      Locals:         0      23       0       0       0       0       0       0       0
   692 ;;      Temps:          2       0       0       0       0       0       0       0       0
   693 ;;      Totals:         2      23       0       0       0       0       0       0       0
   694 ;;Total ram usage:       25 bytes
   695 ;; Hardware stack levels required when called:    4
   696 ;; This function calls:
   697 ;;		_Lcd_Cmd
   698 ;;		_Lcd_Init
   699 ;;		_Lcd_Out2
   700 ;;		___awtoft
   701 ;;		___ftge
   702 ;;		___ftmul
   703 ;;		_getCad
   704 ;;		_sprintf
   705 ;; This function is called by:
   706 ;;		Startup code after reset
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710                           	psect	text0
   711  001A26                     __ptext0:
   712                           	opt stack 0
   713  001A26                     _main:
   714                           	opt stack 27
   715                           
   716                           ;Robot.c: 45: TRISC0 = 0;
   717                           
   718                           ;incstack = 0
   719  001A26  9094               	bcf	3988,0,c	;volatile
   720                           
   721                           ;Robot.c: 46: TRISA2 = 1;
   722  001A28  8492               	bsf	3986,2,c	;volatile
   723                           
   724                           ;Robot.c: 47: TRISE0 = 0;
   725  001A2A  9096               	bcf	3990,0,c	;volatile
   726                           
   727                           ;Robot.c: 48: TRISE1 = 0;
   728  001A2C  9296               	bcf	3990,1,c	;volatile
   729                           
   730                           ;Robot.c: 49: TRISE2 = 0;
   731  001A2E  9496               	bcf	3990,2,c	;volatile
   732                           
   733                           ;Robot.c: 51: OSCCON = 0b01110010;
   734  001A30  0E72               	movlw	114
   735  001A32  6ED3               	movwf	4051,c	;volatile
   736                           
   737                           ;Robot.c: 52: float temperatura;
   738                           ;Robot.c: 54: TRISA = 0xff;
   739  001A34  6892               	setf	3986,c	;volatile
   740                           
   741                           ;Robot.c: 55: TRISD = 0;
   742  001A36  0E00               	movlw	0
   743  001A38  6E95               	movwf	3989,c	;volatile
   744                           
   745                           ;Robot.c: 56: TRISB = 0x00;
   746  001A3A  0E00               	movlw	0
   747  001A3C  6E93               	movwf	3987,c	;volatile
   748                           
   749                           ;Robot.c: 57: char temp[20];
   750                           ;Robot.c: 59: Lcd_Init();
   751  001A3E  ECE2  F00E         	call	_Lcd_Init	;wreg free
   752                           
   753                           ;Robot.c: 60: Lcd_Cmd(1);
   754  001A42  0E01               	movlw	1
   755  001A44  ECE0  F010         	call	_Lcd_Cmd
   756                           
   757                           ;Robot.c: 61: Lcd_Cmd(12);
   758  001A48  0E0C               	movlw	12
   759  001A4A  ECE0  F010         	call	_Lcd_Cmd
   760  001A4E                     l2948:
   761                           
   762                           ;Robot.c: 64: temperatura = (getCad(0)*0.02*100);
   763  001A4E  0E00               	movlw	0
   764  001A50  ECAB  F013         	call	_getCad
   765  001A54  C001  F009         	movff	?_getCad,___awtoft@c
   766  001A58  C002  F00A         	movff	?_getCad+1,___awtoft@c+1
   767  001A5C  EC7C  F013         	call	___awtoft	;wreg free
   768  001A60  C009  F015         	movff	?___awtoft,___ftmul@f1
   769  001A64  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
   770  001A68  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
   771  001A6C  0E00               	movlw	0
   772  001A6E  6E18               	movwf	___ftmul@f2,c
   773  001A70  0E00               	movlw	0
   774  001A72  6E19               	movwf	___ftmul@f2+1,c
   775  001A74  0E40               	movlw	64
   776  001A76  6E1A               	movwf	___ftmul@f2+2,c
   777  001A78  ECEC  F00F         	call	___ftmul	;wreg free
   778  001A7C  C015  F08D         	movff	?___ftmul,main@temperatura
   779  001A80  C016  F08E         	movff	?___ftmul+1,main@temperatura+1
   780  001A84  C017  F08F         	movff	?___ftmul+2,main@temperatura+2
   781                           
   782                           ;Robot.c: 65: sprintf(temp, "%2.2f C", temperatura);
   783  001A88  0E79               	movlw	low main@temp
   784  001A8A  6E40               	movwf	sprintf@sp,c
   785  001A8C  0E00               	movlw	high main@temp
   786  001A8E  6E41               	movwf	sprintf@sp+1,c
   787  001A90  0E77               	movlw	low STR_1
   788  001A92  6E42               	movwf	sprintf@f,c
   789  001A94  0E08               	movlw	high STR_1
   790  001A96  6E43               	movwf	sprintf@f+1,c
   791  001A98  C08D  F044         	movff	main@temperatura,?_sprintf+4
   792  001A9C  C08E  F045         	movff	main@temperatura+1,?_sprintf+5
   793  001AA0  C08F  F046         	movff	main@temperatura+2,?_sprintf+6
   794  001AA4  EC4B  F004         	call	_sprintf	;wreg free
   795                           
   796                           ;Robot.c: 66: Lcd_Out2(1, 4, temp);
   797  001AA8  0E04               	movlw	4
   798  001AAA  6E04               	movwf	Lcd_Out2@x,c
   799  001AAC  0E79               	movlw	low main@temp
   800  001AAE  6E05               	movwf	Lcd_Out2@buffer,c
   801  001AB0  0E00               	movlw	high main@temp
   802  001AB2  6E06               	movwf	Lcd_Out2@buffer+1,c
   803  001AB4  0E01               	movlw	1
   804  001AB6  ECF8  F011         	call	_Lcd_Out2
   805                           
   806                           ;Robot.c: 67: _delay((unsigned long)((200)*(8000000/4000.0)));
   807  001ABA  0E03               	movlw	3
   808  001ABC  6E4E               	movwf	(??_main+1)& (0+255),c
   809  001ABE  0E08               	movlw	8
   810  001AC0  6E4D               	movwf	??_main& (0+255),c
   811  001AC2  0E77               	movlw	119
   812  001AC4                     u3717:
   813  001AC4  2EE8               	decfsz	wreg,f,c
   814  001AC6  D7FE               	bra	u3717
   815  001AC8  2E4D               	decfsz	??_main& (0+255),f,c
   816  001ACA  D7FC               	bra	u3717
   817  001ACC  2E4E               	decfsz	(??_main+1)& (0+255),f,c
   818  001ACE  D7FA               	bra	u3717
   819  001AD0  F000               	nop	
   820                           
   821                           ;Robot.c: 68: if(temperatura>100){
   822  001AD2  0E00               	movlw	0
   823  001AD4  6E01               	movwf	___ftge@ff1,c
   824  001AD6  0EC8               	movlw	200
   825  001AD8  6E02               	movwf	___ftge@ff1+1,c
   826  001ADA  0E42               	movlw	66
   827  001ADC  6E03               	movwf	___ftge@ff1+2,c
   828  001ADE  C08D  F004         	movff	main@temperatura,___ftge@ff2
   829  001AE2  C08E  F005         	movff	main@temperatura+1,___ftge@ff2+1
   830  001AE6  C08F  F006         	movff	main@temperatura+2,___ftge@ff2+2
   831  001AEA  ECB0  F011         	call	___ftge	;wreg free
   832  001AEE  B0D8               	btfsc	status,0,c
   833  001AF0  D00D               	goto	l2962
   834                           
   835                           ;Robot.c: 69: RE2 = 1;
   836  001AF2  8484               	bsf	3972,2,c	;volatile
   837                           
   838                           ;Robot.c: 70: RE1 = 0;
   839  001AF4  9284               	bcf	3972,1,c	;volatile
   840                           
   841                           ;Robot.c: 71: RE0 = 0;
   842  001AF6  9084               	bcf	3972,0,c	;volatile
   843                           
   844                           ;Robot.c: 72: Lcd_Out2(2, 4, "T Alta");
   845  001AF8  0E04               	movlw	4
   846  001AFA  6E04               	movwf	Lcd_Out2@x,c
   847  001AFC  0E8E               	movlw	low STR_2
   848  001AFE  6E05               	movwf	Lcd_Out2@buffer,c
   849  001B00  0E08               	movlw	high STR_2
   850  001B02  6E06               	movwf	Lcd_Out2@buffer+1,c
   851  001B04  0E02               	movlw	2
   852  001B06  ECF8  F011         	call	_Lcd_Out2
   853                           
   854                           ;Robot.c: 73: }
   855  001B0A  D029               	goto	l2970
   856  001B0C                     l2962:
   857                           
   858                           ;Robot.c: 74: else{
   859                           ;Robot.c: 75: if(temperatura>30){
   860  001B0C  0E00               	movlw	0
   861  001B0E  6E01               	movwf	___ftge@ff1,c
   862  001B10  0EF0               	movlw	240
   863  001B12  6E02               	movwf	___ftge@ff1+1,c
   864  001B14  0E41               	movlw	65
   865  001B16  6E03               	movwf	___ftge@ff1+2,c
   866  001B18  C08D  F004         	movff	main@temperatura,___ftge@ff2
   867  001B1C  C08E  F005         	movff	main@temperatura+1,___ftge@ff2+1
   868  001B20  C08F  F006         	movff	main@temperatura+2,___ftge@ff2+2
   869  001B24  ECB0  F011         	call	___ftge	;wreg free
   870  001B28  B0D8               	btfsc	status,0,c
   871  001B2A  D00D               	goto	l121
   872                           
   873                           ;Robot.c: 76: RE1 = 1;
   874  001B2C  8284               	bsf	3972,1,c	;volatile
   875                           
   876                           ;Robot.c: 77: RE2 = 0;
   877  001B2E  9484               	bcf	3972,2,c	;volatile
   878                           
   879                           ;Robot.c: 78: RE0 = 0;
   880  001B30  9084               	bcf	3972,0,c	;volatile
   881                           
   882                           ;Robot.c: 79: Lcd_Out2(2, 4, "T Media");
   883  001B32  0E04               	movlw	4
   884  001B34  6E04               	movwf	Lcd_Out2@x,c
   885  001B36  0E7F               	movlw	low STR_3
   886  001B38  6E05               	movwf	Lcd_Out2@buffer,c
   887  001B3A  0E08               	movlw	high STR_3
   888  001B3C  6E06               	movwf	Lcd_Out2@buffer+1,c
   889  001B3E  0E02               	movlw	2
   890  001B40  ECF8  F011         	call	_Lcd_Out2
   891                           
   892                           ;Robot.c: 80: }
   893  001B44  D00C               	goto	l2970
   894  001B46                     l121:
   895                           
   896                           ;Robot.c: 81: else{
   897                           ;Robot.c: 82: RE0 = 1;
   898  001B46  8084               	bsf	3972,0,c	;volatile
   899                           
   900                           ;Robot.c: 83: RE2 = 0;
   901  001B48  9484               	bcf	3972,2,c	;volatile
   902                           
   903                           ;Robot.c: 84: RE1 = 0;
   904  001B4A  9284               	bcf	3972,1,c	;volatile
   905                           
   906                           ;Robot.c: 85: Lcd_Out2(2, 4, "T Baja");
   907  001B4C  0E04               	movlw	4
   908  001B4E  6E04               	movwf	Lcd_Out2@x,c
   909  001B50  0E87               	movlw	low STR_4
   910  001B52  6E05               	movwf	Lcd_Out2@buffer,c
   911  001B54  0E08               	movlw	high STR_4
   912  001B56  6E06               	movwf	Lcd_Out2@buffer+1,c
   913  001B58  0E02               	movlw	2
   914  001B5A  ECF8  F011         	call	_Lcd_Out2
   915  001B5E                     l2970:
   916                           
   917                           ;Robot.c: 86: }
   918                           ;Robot.c: 87: }
   919                           ;Robot.c: 88: if(RA2 == 1){
   920  001B5E  A480               	btfss	3968,2,c	;volatile
   921  001B60  D002               	goto	l123
   922                           
   923                           ;Robot.c: 89: RC0 = 1;
   924  001B62  8082               	bsf	3970,0,c	;volatile
   925                           
   926                           ;Robot.c: 90: }
   927  001B64  D774               	goto	l2948
   928  001B66                     l123:
   929                           
   930                           ;Robot.c: 91: else{
   931                           ;Robot.c: 92: RC0 = 0;
   932  001B66  9082               	bcf	3970,0,c	;volatile
   933  001B68  D772               	goto	l2948
   934  001B6A                     __end_of_main:
   935                           	opt stack 0
   936                           tblptru	equ	0xFF8
   937                           wreg	equ	0xFE8
   938                           status	equ	0xFD8
   939                           
   940 ;; *************** function _sprintf *****************
   941 ;; Defined at:
   942 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
   943 ;; Parameters:    Size  Location     Type
   944 ;;  sp              2   63[COMRAM] PTR unsigned char 
   945 ;;		 -> main@temp(20), 
   946 ;;  f               2   65[COMRAM] PTR const unsigned char 
   947 ;;		 -> STR_1(8), 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  tmpval          4   13[BANK0 ] struct .
   950 ;;  val             4    5[BANK0 ] unsigned long 
   951 ;;  fval            3   19[BANK0 ] unsigned long 
   952 ;;  cp              3    0        PTR const unsigned char 
   953 ;;  prec            2   22[BANK0 ] int 
   954 ;;  exp             2   17[BANK0 ] int 
   955 ;;  width           2   11[BANK0 ] int 
   956 ;;  flag            2    9[BANK0 ] unsigned short 
   957 ;;  ap              2    3[BANK0 ] PTR void [1]
   958 ;;		 -> ?_sprintf(2), 
   959 ;;  len             2    0        unsigned int 
   960 ;;  c               1   24[BANK0 ] char 
   961 ;;  d               1    0        unsigned char 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  2   63[COMRAM] int 
   964 ;; Registers used:
   965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   971 ;;      Params:         7       0       0       0       0       0       0       0       0
   972 ;;      Locals:         0      25       0       0       0       0       0       0       0
   973 ;;      Temps:          6       0       0       0       0       0       0       0       0
   974 ;;      Totals:        13      25       0       0       0       0       0       0       0
   975 ;;Total ram usage:       38 bytes
   976 ;; Hardware stack levels used:    1
   977 ;; Hardware stack levels required when called:    3
   978 ;; This function calls:
   979 ;;		___awdiv
   980 ;;		___ftadd
   981 ;;		___ftge
   982 ;;		___ftmul
   983 ;;		___ftneg
   984 ;;		___ftsub
   985 ;;		___fttol
   986 ;;		___lldiv
   987 ;;		___llmod
   988 ;;		___lltoft
   989 ;;		___wmul
   990 ;;		__div_to_l_
   991 ;;		__tdiv_to_l_
   992 ;;		_fround
   993 ;;		_isdigit
   994 ;;		_scale
   995 ;; This function is called by:
   996 ;;		_main
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text1
  1001  000896                     __ptext1:
  1002                           	opt stack 0
  1003  000896                     _sprintf:
  1004                           	opt stack 27
  1005                           
  1006                           ;doprnt.c: 494: va_list ap;
  1007                           ;doprnt.c: 499: signed char c;
  1008                           ;doprnt.c: 501: int width;
  1009                           ;doprnt.c: 504: int prec;
  1010                           ;doprnt.c: 508: unsigned short flag;
  1011                           ;doprnt.c: 515: char d;
  1012                           ;doprnt.c: 516: double fval;
  1013                           ;doprnt.c: 517: int exp;
  1014                           ;doprnt.c: 523: union {
  1015                           ;doprnt.c: 524: unsigned long vd;
  1016                           ;doprnt.c: 525: double integ;
  1017                           ;doprnt.c: 526: } tmpval;
  1018                           ;doprnt.c: 528: unsigned long val;
  1019                           ;doprnt.c: 529: unsigned len;
  1020                           ;doprnt.c: 530: const char * cp;
  1021                           ;doprnt.c: 533: *ap = __va_start();
  1022                           
  1023                           ;incstack = 0
  1024  000896  0E44               	movlw	low (?_sprintf+4)
  1025  000898  0100               	movlb	0	; () banked
  1026  00089A  6F63               	movwf	sprintf@ap& (0+255),b
  1027  00089C  0E00               	movlw	high (?_sprintf+4)
  1028  00089E  0100               	movlb	0	; () banked
  1029  0008A0  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  1030                           
  1031                           ;doprnt.c: 536: while(c = *f++) {
  1032  0008A2  EF0D  F009         	goto	l2896
  1033  0008A6                     l2642:
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;doprnt.c: 538: if(c != '%')
  1037  0008A6  0E25               	movlw	37
  1038  0008A8  0100               	movlb	0	; () banked
  1039  0008AA  1978               	xorwf	sprintf@c& (0+255),w,b
  1040  0008AC  B4D8               	btfsc	status,2,c
  1041  0008AE  D008               	goto	l2648
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;doprnt.c: 540: {
  1045                           ;doprnt.c: 541: ((*sp++ = (c)));
  1046  0008B0  C040  FFD9         	movff	sprintf@sp,fsr2l
  1047  0008B4  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1048  0008B8  C078  FFDF         	movff	sprintf@c,indf2
  1049  0008BC  EF0B  F009         	goto	l2894
  1050  0008C0                     l2648:
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;doprnt.c: 543: }
  1054                           ;doprnt.c: 546: width = 0;
  1055  0008C0  0E00               	movlw	0
  1056  0008C2  0100               	movlb	0	; () banked
  1057  0008C4  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1058  0008C6  0E00               	movlw	0
  1059  0008C8  6F6B               	movwf	sprintf@width& (0+255),b
  1060                           
  1061                           ;doprnt.c: 548: flag = 0;
  1062  0008CA  0E00               	movlw	0
  1063  0008CC  0100               	movlb	0	; () banked
  1064  0008CE  6F6A               	movwf	(sprintf@flag+1)& (0+255),b
  1065  0008D0  0E00               	movlw	0
  1066  0008D2  6F69               	movwf	sprintf@flag& (0+255),b
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1070  0008D4  C042  FFF6         	movff	sprintf@f,tblptrl
  1071  0008D8  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1072  0008DC                     	if	0	;tblptru may be non-zero
  1073  0008DC                     	endif
  1074  0008DC                     	if	0	;tblptru may be non-zero
  1075  0008DC                     	endif
  1076  0008DC  0008               	tblrd		*
  1077  0008DE  50F5               	movf	tablat,w,c
  1078  0008E0  ECD0  F013         	call	_isdigit
  1079  0008E4  A0D8               	btfss	status,0,c
  1080  0008E6  D035               	goto	l2662
  1081                           
  1082                           ;doprnt.c: 598: width = 0;
  1083  0008E8  0E00               	movlw	0
  1084  0008EA  0100               	movlb	0	; () banked
  1085  0008EC  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1086  0008EE  0E00               	movlw	0
  1087  0008F0  6F6B               	movwf	sprintf@width& (0+255),b
  1088  0008F2                     l2654:
  1089                           
  1090                           ;doprnt.c: 600: width *= 10;
  1091  0008F2  C06B  F00F         	movff	sprintf@width,___wmul@multiplier
  1092  0008F6  C06C  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  1093  0008FA  0E00               	movlw	0
  1094  0008FC  6E12               	movwf	___wmul@multiplicand+1,c
  1095  0008FE  0E0A               	movlw	10
  1096  000900  6E11               	movwf	___wmul@multiplicand,c
  1097  000902  EC98  F013         	call	___wmul	;wreg free
  1098  000906  C00F  F06B         	movff	?___wmul,sprintf@width
  1099  00090A  C010  F06C         	movff	?___wmul+1,sprintf@width+1
  1100                           
  1101                           ;doprnt.c: 601: width += *f++ - '0';
  1102  00090E  0ED0               	movlw	208
  1103  000910  6E47               	movwf	??_sprintf& (0+255),c
  1104  000912  0EFF               	movlw	255
  1105  000914  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1106  000916  C042  FFF6         	movff	sprintf@f,tblptrl
  1107  00091A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1108  00091E                     	if	0	;tblptru may be non-zero
  1109  00091E                     	endif
  1110  00091E                     	if	0	;tblptru may be non-zero
  1111  00091E                     	endif
  1112  00091E  0008               	tblrd		*
  1113  000920  50F5               	movf	tablat,w,c
  1114  000922  6E49               	movwf	(??_sprintf+2)& (0+255),c
  1115  000924  6A4A               	clrf	(??_sprintf+3)& (0+255),c
  1116  000926  5047               	movf	??_sprintf,w,c
  1117  000928  2649               	addwf	??_sprintf+2,f,c
  1118  00092A  5048               	movf	??_sprintf+1,w,c
  1119  00092C  224A               	addwfc	??_sprintf+3,f,c
  1120  00092E  5049               	movf	??_sprintf+2,w,c
  1121  000930  0100               	movlb	0	; () banked
  1122  000932  276B               	addwf	sprintf@width& (0+255),f,b
  1123  000934  504A               	movf	??_sprintf+3,w,c
  1124  000936  0100               	movlb	0	; () banked
  1125  000938  236C               	addwfc	(sprintf@width+1)& (0+255),f,b
  1126                           
  1127                           ; BSR set to: 0
  1128  00093A  4A42               	infsnz	sprintf@f,f,c
  1129  00093C  2A43               	incf	sprintf@f+1,f,c
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1133  00093E  C042  FFF6         	movff	sprintf@f,tblptrl
  1134  000942  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1135  000946                     	if	0	;tblptru may be non-zero
  1136  000946                     	endif
  1137  000946                     	if	0	;tblptru may be non-zero
  1138  000946                     	endif
  1139  000946  0008               	tblrd		*
  1140  000948  50F5               	movf	tablat,w,c
  1141  00094A  ECD0  F013         	call	_isdigit
  1142  00094E  B0D8               	btfsc	status,0,c
  1143  000950  D7D0               	goto	l2654
  1144  000952                     l2662:
  1145                           
  1146                           ;doprnt.c: 608: }
  1147                           ;doprnt.c: 611: if(*f == '.') {
  1148  000952  C042  FFF6         	movff	sprintf@f,tblptrl
  1149  000956  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1150  00095A                     	if	0	;tblptru may be non-zero
  1151  00095A                     	endif
  1152  00095A                     	if	0	;tblptru may be non-zero
  1153  00095A                     	endif
  1154  00095A  0008               	tblrd		*
  1155  00095C  50F5               	movf	tablat,w,c
  1156  00095E  0A2E               	xorlw	46
  1157  000960  A4D8               	btfss	status,2,c
  1158  000962  D032               	goto	l2674
  1159                           
  1160                           ;doprnt.c: 612: flag |= 0x4000;
  1161  000964  0100               	movlb	0	; () banked
  1162  000966  8D6A               	bsf	(sprintf@flag+1)& (0+255),6,b
  1163                           
  1164                           ;doprnt.c: 613: f++;
  1165  000968  4A42               	infsnz	sprintf@f,f,c
  1166  00096A  2A43               	incf	sprintf@f+1,f,c
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;doprnt.c: 620: {
  1170                           ;doprnt.c: 621: prec = 0;
  1171  00096C  0E00               	movlw	0
  1172  00096E  0100               	movlb	0	; () banked
  1173  000970  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1174  000972  0E00               	movlw	0
  1175  000974  6F76               	movwf	sprintf@prec& (0+255),b
  1176                           
  1177                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1178  000976  D01D               	goto	l2672
  1179  000978                     l2668:
  1180                           
  1181                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1182  000978  C076  F00F         	movff	sprintf@prec,___wmul@multiplier
  1183  00097C  C077  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1184  000980  0E00               	movlw	0
  1185  000982  6E12               	movwf	___wmul@multiplicand+1,c
  1186  000984  0E0A               	movlw	10
  1187  000986  6E11               	movwf	___wmul@multiplicand,c
  1188  000988  EC98  F013         	call	___wmul	;wreg free
  1189  00098C  C042  FFF6         	movff	sprintf@f,tblptrl
  1190  000990  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1191  000994                     	if	0	;tblptru may be non-zero
  1192  000994                     	endif
  1193  000994                     	if	0	;tblptru may be non-zero
  1194  000994                     	endif
  1195  000994  0008               	tblrd		*
  1196  000996  50F5               	movf	tablat,w,c
  1197  000998  260F               	addwf	?___wmul,f,c
  1198  00099A  0E00               	movlw	0
  1199  00099C  2210               	addwfc	?___wmul+1,f,c
  1200  00099E  0ED0               	movlw	208
  1201  0009A0  240F               	addwf	?___wmul,w,c
  1202  0009A2  0100               	movlb	0	; () banked
  1203  0009A4  6F76               	movwf	sprintf@prec& (0+255),b
  1204  0009A6  0EFF               	movlw	255
  1205  0009A8  2010               	addwfc	?___wmul+1,w,c
  1206  0009AA  0100               	movlb	0	; () banked
  1207  0009AC  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1208                           
  1209                           ; BSR set to: 0
  1210  0009AE  4A42               	infsnz	sprintf@f,f,c
  1211  0009B0  2A43               	incf	sprintf@f+1,f,c
  1212  0009B2                     l2672:
  1213                           
  1214                           ; BSR set to: 0
  1215  0009B2  C042  FFF6         	movff	sprintf@f,tblptrl
  1216  0009B6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1217  0009BA                     	if	0	;tblptru may be non-zero
  1218  0009BA                     	endif
  1219  0009BA                     	if	0	;tblptru may be non-zero
  1220  0009BA                     	endif
  1221  0009BA  0008               	tblrd		*
  1222  0009BC  50F5               	movf	tablat,w,c
  1223  0009BE  ECD0  F013         	call	_isdigit
  1224  0009C2  A0D8               	btfss	status,0,c
  1225  0009C4  D00C               	goto	l2682
  1226  0009C6  D7D8               	goto	l2668
  1227  0009C8                     l2674:
  1228                           
  1229                           ;doprnt.c: 626: prec = 0;
  1230  0009C8  0E00               	movlw	0
  1231  0009CA  0100               	movlb	0	; () banked
  1232  0009CC  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1233  0009CE  0E00               	movlw	0
  1234  0009D0  6F76               	movwf	sprintf@prec& (0+255),b
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;doprnt.c: 628: flag |= 0x1000;
  1238  0009D2  0100               	movlb	0	; () banked
  1239  0009D4  896A               	bsf	(sprintf@flag+1)& (0+255),4,b
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;doprnt.c: 630: }
  1243                           ;doprnt.c: 635: switch(c = *f++) {
  1244  0009D6  D003               	goto	l2682
  1245  0009D8                     l2678:
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;doprnt.c: 663: flag |= 0x400;
  1249  0009D8  0100               	movlb	0	; () banked
  1250  0009DA  856A               	bsf	(sprintf@flag+1)& (0+255),2,b
  1251                           
  1252                           ;doprnt.c: 664: break;
  1253  0009DC  D014               	goto	l2684
  1254  0009DE                     l2682:
  1255  0009DE  C042  FFF6         	movff	sprintf@f,tblptrl
  1256  0009E2  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1257  0009E6  4A42               	infsnz	sprintf@f,f,c
  1258  0009E8  2A43               	incf	sprintf@f+1,f,c
  1259  0009EA                     	if	0	;tblptru may be non-zero
  1260  0009EA                     	endif
  1261  0009EA                     	if	0	;tblptru may be non-zero
  1262  0009EA                     	endif
  1263  0009EA  0008               	tblrd		*
  1264  0009EC  CFF5 F078          	movff	tablat,sprintf@c
  1265  0009F0  0100               	movlb	0	; () banked
  1266  0009F2  5178               	movf	sprintf@c& (0+255),w,b
  1267                           
  1268                           ; Switch size 1, requested type "space"
  1269                           ; Number of cases is 2, Range of values is 0 to 102
  1270                           ; switch strategies available:
  1271                           ; Name         Instructions Cycles
  1272                           ; simple_byte            7     4 (average)
  1273                           ;	Chosen strategy is simple_byte
  1274  0009F4  0A00               	xorlw	0	; case 0
  1275  0009F6  B4D8               	btfsc	status,2,c
  1276  0009F8  EF1B  F009         	goto	l2898
  1277  0009FC  0A66               	xorlw	102	; case 102
  1278  0009FE  B4D8               	btfsc	status,2,c
  1279  000A00  D7EB               	goto	l2678
  1280  000A02  EF0D  F009         	goto	l2896
  1281  000A06                     l2684:
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;doprnt.c: 825: if(flag & (0x700)) {
  1285  000A06  0E07               	movlw	7
  1286  000A08  0100               	movlb	0	; () banked
  1287  000A0A  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  1288  000A0C  B4D8               	btfsc	status,2,c
  1289  000A0E  D34A               	goto	l2848
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;doprnt.c: 827: if(flag & 0x1000)
  1293  000A10  0100               	movlb	0	; () banked
  1294  000A12  A96A               	btfss	(sprintf@flag+1)& (0+255),4,b
  1295  000A14  D005               	goto	l2690
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;doprnt.c: 829: prec = 6;
  1299  000A16  0E00               	movlw	0
  1300  000A18  0100               	movlb	0	; () banked
  1301  000A1A  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1302  000A1C  0E06               	movlw	6
  1303  000A1E  6F76               	movwf	sprintf@prec& (0+255),b
  1304  000A20                     l2690:
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1308  000A20  C063  FFD9         	movff	sprintf@ap,fsr2l
  1309  000A24  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1310  000A28  CFDE F073          	movff	postinc2,sprintf@fval
  1311  000A2C  CFDE F074          	movff	postinc2,sprintf@fval+1
  1312  000A30  CFDD F075          	movff	postdec2,sprintf@fval+2
  1313                           
  1314                           ; BSR set to: 0
  1315  000A34  0E03               	movlw	3
  1316  000A36  0100               	movlb	0	; () banked
  1317  000A38  2763               	addwf	sprintf@ap& (0+255),f,b
  1318  000A3A  0E00               	movlw	0
  1319  000A3C  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;doprnt.c: 831: if(fval < 0.0) {
  1323  000A3E  0100               	movlb	0	; () banked
  1324  000A40  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1325  000A42  D011               	goto	l2700
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;doprnt.c: 832: fval = -fval;
  1329  000A44  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1330  000A48  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1331  000A4C  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1332  000A50  ECBE  F013         	call	___ftneg	;wreg free
  1333  000A54  C001  F073         	movff	?___ftneg,sprintf@fval
  1334  000A58  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1335  000A5C  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1336                           
  1337                           ;doprnt.c: 833: flag |= 0x03;
  1338  000A60  0E03               	movlw	3
  1339  000A62  0100               	movlb	0	; () banked
  1340  000A64  1369               	iorwf	sprintf@flag& (0+255),f,b
  1341  000A66                     l2700:
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;doprnt.c: 834: }
  1345                           ;doprnt.c: 835: exp = 0;
  1346  000A66  0E00               	movlw	0
  1347  000A68  0100               	movlb	0	; () banked
  1348  000A6A  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  1349  000A6C  0E00               	movlw	0
  1350  000A6E  6F71               	movwf	sprintf@exp& (0+255),b
  1351                           
  1352                           ; BSR set to: 0
  1353                           ;doprnt.c: 836: if( fval!=0) {
  1354  000A70  0100               	movlb	0	; () banked
  1355  000A72  5173               	movf	sprintf@fval& (0+255),w,b
  1356  000A74  0100               	movlb	0	; () banked
  1357  000A76  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1358  000A78  0100               	movlb	0	; () banked
  1359  000A7A  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1360  000A7C  B4D8               	btfsc	status,2,c
  1361  000A7E  D08B               	goto	l2728
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1365  000A80  0E82               	movlw	130
  1366  000A82  6E47               	movwf	??_sprintf& (0+255),c
  1367  000A84  0EFF               	movlw	255
  1368  000A86  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1369  000A88  C073  F049         	movff	sprintf@fval,??_sprintf+2
  1370  000A8C  C074  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1371  000A90  C075  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1372  000A94  C076  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1373  000A98  0E10               	movlw	16
  1374  000A9A  D005               	goto	u3300
  1375  000A9C                     u3305:
  1376  000A9C  90D8               	bcf	status,0,c
  1377  000A9E  324C               	rrcf	??_sprintf+5,f,c
  1378  000AA0  324B               	rrcf	??_sprintf+4,f,c
  1379  000AA2  324A               	rrcf	??_sprintf+3,f,c
  1380  000AA4  3249               	rrcf	??_sprintf+2,f,c
  1381  000AA6                     u3300:
  1382  000AA6  2EE8               	decfsz	wreg,f,c
  1383  000AA8  D7F9               	goto	u3305
  1384  000AAA  5049               	movf	??_sprintf+2,w,c
  1385  000AAC  2447               	addwf	??_sprintf,w,c
  1386  000AAE  0100               	movlb	0	; () banked
  1387  000AB0  6F71               	movwf	sprintf@exp& (0+255),b
  1388  000AB2  0E00               	movlw	0
  1389  000AB4  2048               	addwfc	??_sprintf+1,w,c
  1390  000AB6  0100               	movlb	0	; () banked
  1391  000AB8  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;doprnt.c: 838: exp--;
  1395  000ABA  0100               	movlb	0	; () banked
  1396  000ABC  0771               	decf	sprintf@exp& (0+255),f,b
  1397  000ABE  A0D8               	btfss	status,0,c
  1398  000AC0  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;doprnt.c: 839: exp *= 3;
  1402  000AC2  C071  F00F         	movff	sprintf@exp,___wmul@multiplier
  1403  000AC6  C072  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1404  000ACA  0E00               	movlw	0
  1405  000ACC  6E12               	movwf	___wmul@multiplicand+1,c
  1406  000ACE  0E03               	movlw	3
  1407  000AD0  6E11               	movwf	___wmul@multiplicand,c
  1408  000AD2  EC98  F013         	call	___wmul	;wreg free
  1409  000AD6  C00F  F071         	movff	?___wmul,sprintf@exp
  1410  000ADA  C010  F072         	movff	?___wmul+1,sprintf@exp+1
  1411                           
  1412                           ;doprnt.c: 840: exp /= 10;
  1413  000ADE  C071  F007         	movff	sprintf@exp,___awdiv@dividend
  1414  000AE2  C072  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1415  000AE6  0E00               	movlw	0
  1416  000AE8  6E0A               	movwf	___awdiv@divisor+1,c
  1417  000AEA  0E0A               	movlw	10
  1418  000AEC  6E09               	movwf	___awdiv@divisor,c
  1419  000AEE  EC40  F012         	call	___awdiv	;wreg free
  1420  000AF2  C007  F071         	movff	?___awdiv,sprintf@exp
  1421  000AF6  C008  F072         	movff	?___awdiv+1,sprintf@exp+1
  1422                           
  1423                           ;doprnt.c: 841: if(exp < 0)
  1424  000AFA  0100               	movlb	0	; () banked
  1425  000AFC  AF72               	btfss	(sprintf@exp+1)& (0+255),7,b
  1426  000AFE  D004               	goto	l2716
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;doprnt.c: 842: exp--;
  1430  000B00  0100               	movlb	0	; () banked
  1431  000B02  0771               	decf	sprintf@exp& (0+255),f,b
  1432  000B04  A0D8               	btfss	status,0,c
  1433  000B06  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1434  000B08                     l2716:
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1438  000B08  0100               	movlb	0	; () banked
  1439  000B0A  5171               	movf	sprintf@exp& (0+255),w,b
  1440  000B0C  0800               	sublw	0
  1441  000B0E  EC22  F009         	call	_scale
  1442  000B12  C024  F06D         	movff	?_scale,sprintf@tmpval
  1443  000B16  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1444  000B1A  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1445                           
  1446                           ;doprnt.c: 847: tmpval.integ *= fval;
  1447  000B1E  C06D  F015         	movff	sprintf@tmpval,___ftmul@f1
  1448  000B22  C06E  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1449  000B26  C06F  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1450  000B2A  C073  F018         	movff	sprintf@fval,___ftmul@f2
  1451  000B2E  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1452  000B32  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1453  000B36  ECEC  F00F         	call	___ftmul	;wreg free
  1454  000B3A  C015  F06D         	movff	?___ftmul,sprintf@tmpval
  1455  000B3E  C016  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  1456  000B42  C017  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  1457                           
  1458                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1459  000B46  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1460  000B4A  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1461  000B4E  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1462  000B52  0E00               	movlw	0
  1463  000B54  6E04               	movwf	___ftge@ff2,c
  1464  000B56  0E80               	movlw	128
  1465  000B58  6E05               	movwf	___ftge@ff2+1,c
  1466  000B5A  0E3F               	movlw	63
  1467  000B5C  6E06               	movwf	___ftge@ff2+2,c
  1468  000B5E  ECB0  F011         	call	___ftge	;wreg free
  1469  000B62  B0D8               	btfsc	status,0,c
  1470  000B64  D005               	goto	l2724
  1471                           
  1472                           ;doprnt.c: 849: exp--;
  1473  000B66  0100               	movlb	0	; () banked
  1474  000B68  0771               	decf	sprintf@exp& (0+255),f,b
  1475  000B6A  A0D8               	btfss	status,0,c
  1476  000B6C  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1477  000B6E  D013               	goto	l2728
  1478  000B70                     l2724:
  1479                           
  1480                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1481  000B70  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1482  000B74  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1483  000B78  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1484  000B7C  0E00               	movlw	0
  1485  000B7E  6E04               	movwf	___ftge@ff2,c
  1486  000B80  0E20               	movlw	32
  1487  000B82  6E05               	movwf	___ftge@ff2+1,c
  1488  000B84  0E41               	movlw	65
  1489  000B86  6E06               	movwf	___ftge@ff2+2,c
  1490  000B88  ECB0  F011         	call	___ftge	;wreg free
  1491  000B8C  A0D8               	btfss	status,0,c
  1492  000B8E  D003               	goto	l2728
  1493                           
  1494                           ;doprnt.c: 851: exp++;
  1495  000B90  0100               	movlb	0	; () banked
  1496  000B92  4B71               	infsnz	sprintf@exp& (0+255),f,b
  1497  000B94  2B72               	incf	(sprintf@exp+1)& (0+255),f,b
  1498  000B96                     l2728:
  1499                           
  1500                           ;doprnt.c: 852: }
  1501                           ;doprnt.c: 1112: if(prec <= 12)
  1502  000B96  0100               	movlb	0	; () banked
  1503  000B98  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1504  000B9A  D008               	goto	l2730
  1505  000B9C  0100               	movlb	0	; () banked
  1506  000B9E  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  1507  000BA0  E11D               	bnz	l2732
  1508  000BA2  0E0D               	movlw	13
  1509  000BA4  0100               	movlb	0	; () banked
  1510  000BA6  5D76               	subwf	sprintf@prec& (0+255),w,b
  1511  000BA8  B0D8               	btfsc	status,0,c
  1512  000BAA  D018               	goto	l2732
  1513  000BAC                     l2730:
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;doprnt.c: 1113: fval += fround(prec);
  1517  000BAC  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  1518  000BB0  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1519  000BB4  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1520  000BB8  0100               	movlb	0	; () banked
  1521  000BBA  5176               	movf	sprintf@prec& (0+255),w,b
  1522  000BBC  EC1A  F00B         	call	_fround
  1523  000BC0  C024  F031         	movff	?_fround,___ftadd@f2
  1524  000BC4  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1525  000BC8  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1526  000BCC  EC3D  F00C         	call	___ftadd	;wreg free
  1527  000BD0  C02E  F073         	movff	?___ftadd,sprintf@fval
  1528  000BD4  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  1529  000BD8  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  1530  000BDC                     l2732:
  1531                           
  1532                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1533  000BDC  0100               	movlb	0	; () banked
  1534  000BDE  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1535  000BE0  D008               	goto	l2734
  1536  000BE2  0100               	movlb	0	; () banked
  1537  000BE4  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1538  000BE6  E126               	bnz	l2740
  1539  000BE8  0E0A               	movlw	10
  1540  000BEA  0100               	movlb	0	; () banked
  1541  000BEC  5D71               	subwf	sprintf@exp& (0+255),w,b
  1542  000BEE  B0D8               	btfsc	status,0,c
  1543  000BF0  D021               	goto	l2740
  1544  000BF2                     l2734:
  1545                           
  1546                           ; BSR set to: 0
  1547  000BF2  0100               	movlb	0	; () banked
  1548  000BF4  5173               	movf	sprintf@fval& (0+255),w,b
  1549  000BF6  0100               	movlb	0	; () banked
  1550  000BF8  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1551  000BFA  0100               	movlb	0	; () banked
  1552  000BFC  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1553  000BFE  B4D8               	btfsc	status,2,c
  1554  000C00  D05B               	goto	l2754
  1555                           
  1556                           ; BSR set to: 0
  1557  000C02  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1558  000C06  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1559  000C0A  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1560  000C0E  EC66  F010         	call	___fttol	;wreg free
  1561  000C12  502B               	movf	?___fttol,w,c
  1562  000C14  102C               	iorwf	?___fttol+1,w,c
  1563  000C16  102D               	iorwf	?___fttol+2,w,c
  1564  000C18  102E               	iorwf	?___fttol+3,w,c
  1565  000C1A  A4D8               	btfss	status,2,c
  1566  000C1C  D04D               	goto	l2754
  1567  000C1E  0100               	movlb	0	; () banked
  1568  000C20  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1569  000C22  D04A               	goto	l2754
  1570  000C24  0100               	movlb	0	; () banked
  1571  000C26  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1572  000C28  E105               	bnz	l2740
  1573  000C2A  0E02               	movlw	2
  1574  000C2C  0100               	movlb	0	; () banked
  1575  000C2E  5D71               	subwf	sprintf@exp& (0+255),w,b
  1576  000C30  A0D8               	btfss	status,0,c
  1577  000C32  D042               	goto	l2754
  1578  000C34                     l2740:
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1582  000C34  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1583  000C38  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1584  000C3C  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1585  000C40  0E70               	movlw	112
  1586  000C42  6E04               	movwf	___ftge@ff2,c
  1587  000C44  0E89               	movlw	137
  1588  000C46  6E05               	movwf	___ftge@ff2+1,c
  1589  000C48  0E40               	movlw	64
  1590  000C4A  6E06               	movwf	___ftge@ff2+2,c
  1591  000C4C  ECB0  F011         	call	___ftge	;wreg free
  1592  000C50  B0D8               	btfsc	status,0,c
  1593  000C52  D003               	goto	l2744
  1594                           
  1595                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1596  000C54  0100               	movlb	0	; () banked
  1597  000C56  0EF7               	movlw	247
  1598  000C58  D002               	goto	L1
  1599  000C5A                     l2744:
  1600                           
  1601                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1602  000C5A  0100               	movlb	0	; () banked
  1603  000C5C  0EF8               	movlw	248
  1604  000C5E                     L1:
  1605  000C5E  2771               	addwf	sprintf@exp& (0+255),f,b
  1606  000C60  0EFF               	movlw	255
  1607  000C62  2372               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;doprnt.c: 1124: }
  1611                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1612                           
  1613                           ; BSR set to: 0
  1614  000C64  0100               	movlb	0	; () banked
  1615  000C66  5171               	movf	sprintf@exp& (0+255),w,b
  1616  000C68  EC22  F009         	call	_scale
  1617  000C6C  C024  F06D         	movff	?_scale,sprintf@tmpval
  1618  000C70  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1619  000C74  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1620                           
  1621                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1622  000C78  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1623  000C7C  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1624  000C80  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1625  000C84  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1626  000C88  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1627  000C8C  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1628  000C90  ECB5  F00D         	call	__tdiv_to_l_	;wreg free
  1629  000C94  C001  F065         	movff	?__tdiv_to_l_,sprintf@val
  1630  000C98  C002  F066         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1631  000C9C  C003  F067         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1632  000CA0  C004  F068         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1633                           
  1634                           ;doprnt.c: 1129: fval = 0.0;
  1635  000CA4  0E00               	movlw	0
  1636  000CA6  0100               	movlb	0	; () banked
  1637  000CA8  6F73               	movwf	sprintf@fval& (0+255),b
  1638  000CAA  0E00               	movlw	0
  1639  000CAC  0100               	movlb	0	; () banked
  1640  000CAE  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  1641  000CB0  0E00               	movlw	0
  1642  000CB2  0100               	movlb	0	; () banked
  1643  000CB4  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  1644                           
  1645                           ;doprnt.c: 1130: } else {
  1646  000CB6  D033               	goto	l2758
  1647  000CB8                     l2754:
  1648                           
  1649                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1650  000CB8  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1651  000CBC  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1652  000CC0  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1653  000CC4  EC66  F010         	call	___fttol	;wreg free
  1654  000CC8  C02B  F065         	movff	?___fttol,sprintf@val
  1655  000CCC  C02C  F066         	movff	?___fttol+1,sprintf@val+1
  1656  000CD0  C02D  F067         	movff	?___fttol+2,sprintf@val+2
  1657  000CD4  C02E  F068         	movff	?___fttol+3,sprintf@val+3
  1658                           
  1659                           ;doprnt.c: 1132: fval -= (double)val;
  1660  000CD8  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  1661  000CDC  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1662  000CE0  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1663  000CE4  C065  F009         	movff	sprintf@val,___lltoft@c
  1664  000CE8  C066  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1665  000CEC  C067  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1666  000CF0  C068  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1667  000CF4  EC2E  F013         	call	___lltoft	;wreg free
  1668  000CF8  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1669  000CFC  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1670  000D00  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1671  000D04  EC5C  F013         	call	___ftsub	;wreg free
  1672  000D08  C03A  F073         	movff	?___ftsub,sprintf@fval
  1673  000D0C  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  1674  000D10  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  1675                           
  1676                           ;doprnt.c: 1133: exp = 0;
  1677  000D14  0E00               	movlw	0
  1678  000D16  0100               	movlb	0	; () banked
  1679  000D18  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  1680  000D1A  0E00               	movlw	0
  1681  000D1C  6F71               	movwf	sprintf@exp& (0+255),b
  1682  000D1E                     l2758:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;doprnt.c: 1134: }
  1686                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1687  000D1E  0E01               	movlw	1
  1688  000D20  0100               	movlb	0	; () banked
  1689  000D22  6F78               	movwf	sprintf@c& (0+255),b
  1690  000D24                     l2760:
  1691                           
  1692                           ; BSR set to: 0
  1693  000D24  0E0A               	movlw	10
  1694  000D26  0100               	movlb	0	; () banked
  1695  000D28  1978               	xorwf	sprintf@c& (0+255),w,b
  1696  000D2A  B4D8               	btfsc	status,2,c
  1697  000D2C  D01E               	goto	l2772
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;doprnt.c: 1137: if(val < dpowers[c])
  1701                           
  1702                           ; BSR set to: 0
  1703                           
  1704                           ; BSR set to: 0
  1705  000D2E  0100               	movlb	0	; () banked
  1706  000D30  5178               	movf	sprintf@c& (0+255),w,b
  1707  000D32  0D04               	mullw	4
  1708  000D34  0E01               	movlw	low _dpowers
  1709  000D36  24F3               	addwf	prodl,w,c
  1710  000D38  6EF6               	movwf	tblptrl,c
  1711  000D3A  0E08               	movlw	high _dpowers
  1712  000D3C  20F4               	addwfc	prodh,w,c
  1713  000D3E  6EF7               	movwf	tblptrh,c
  1714  000D40                     	if	0	;There are less than 3 active tblptr bytes
  1715  000D40                     	endif
  1716  000D40  0009               	tblrd		*+
  1717  000D42  50F5               	movf	tablat,w,c
  1718  000D44  0100               	movlb	0	; () banked
  1719  000D46  5D65               	subwf	sprintf@val& (0+255),w,b
  1720  000D48  0009               	tblrd		*+
  1721  000D4A  50F5               	movf	tablat,w,c
  1722  000D4C  0100               	movlb	0	; () banked
  1723  000D4E  5966               	subwfb	(sprintf@val+1)& (0+255),w,b
  1724  000D50  0009               	tblrd		*+
  1725  000D52  50F5               	movf	tablat,w,c
  1726  000D54  0100               	movlb	0	; () banked
  1727  000D56  5967               	subwfb	(sprintf@val+2)& (0+255),w,b
  1728  000D58  0009               	tblrd		*+
  1729  000D5A  50F5               	movf	tablat,w,c
  1730  000D5C  0100               	movlb	0	; () banked
  1731  000D5E  5968               	subwfb	(sprintf@val+3)& (0+255),w,b
  1732  000D60  A0D8               	btfss	status,0,c
  1733  000D62  D003               	goto	l2772
  1734                           
  1735                           ; BSR set to: 0
  1736                           
  1737                           ; BSR set to: 0
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;doprnt.c: 1138: break;
  1741  000D64  0100               	movlb	0	; () banked
  1742  000D66  2B78               	incf	sprintf@c& (0+255),f,b
  1743  000D68  D7DD               	goto	l2760
  1744  000D6A                     l2772:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;doprnt.c: 1142: width -= prec + c + exp;
  1748  000D6A  C078  F047         	movff	sprintf@c,??_sprintf
  1749  000D6E  6A48               	clrf	(??_sprintf+1)& (0+255),c
  1750  000D70  BE47               	btfsc	??_sprintf& (0+255),7,c
  1751  000D72  0648               	decf	(??_sprintf+1)& (0+255),f,c
  1752  000D74  0100               	movlb	0	; () banked
  1753  000D76  5176               	movf	sprintf@prec& (0+255),w,b
  1754  000D78  2647               	addwf	??_sprintf,f,c
  1755  000D7A  0100               	movlb	0	; () banked
  1756  000D7C  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  1757  000D7E  2248               	addwfc	??_sprintf+1,f,c
  1758  000D80  0100               	movlb	0	; () banked
  1759  000D82  5171               	movf	sprintf@exp& (0+255),w,b
  1760  000D84  2647               	addwf	??_sprintf,f,c
  1761  000D86  0100               	movlb	0	; () banked
  1762  000D88  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1763  000D8A  2248               	addwfc	??_sprintf+1,f,c
  1764  000D8C  5047               	movf	??_sprintf,w,c
  1765  000D8E  0100               	movlb	0	; () banked
  1766  000D90  5F6B               	subwf	sprintf@width& (0+255),f,b
  1767  000D92  5048               	movf	??_sprintf+1,w,c
  1768  000D94  0100               	movlb	0	; () banked
  1769  000D96  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  1770                           
  1771                           ;doprnt.c: 1143: if(
  1772                           ;doprnt.c: 1147: prec)
  1773  000D98  0100               	movlb	0	; () banked
  1774  000D9A  5176               	movf	sprintf@prec& (0+255),w,b
  1775  000D9C  0100               	movlb	0	; () banked
  1776  000D9E  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1777  000DA0  B4D8               	btfsc	status,2,c
  1778  000DA2  D004               	goto	l2776
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;doprnt.c: 1148: width--;
  1782  000DA4  0100               	movlb	0	; () banked
  1783  000DA6  076B               	decf	sprintf@width& (0+255),f,b
  1784  000DA8  A0D8               	btfss	status,0,c
  1785  000DAA  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1786  000DAC                     l2776:
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;doprnt.c: 1149: if(flag & 0x03)
  1790  000DAC  0E03               	movlw	3
  1791  000DAE  0100               	movlb	0	; () banked
  1792  000DB0  1569               	andwf	sprintf@flag& (0+255),w,b
  1793  000DB2  6E47               	movwf	??_sprintf& (0+255),c
  1794  000DB4  0E00               	movlw	0
  1795  000DB6  0100               	movlb	0	; () banked
  1796  000DB8  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  1797  000DBA  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1798  000DBC  5047               	movf	??_sprintf,w,c
  1799  000DBE  1048               	iorwf	??_sprintf+1,w,c
  1800  000DC0  B4D8               	btfsc	status,2,c
  1801  000DC2  D00D               	goto	l2786
  1802  000DC4  D008               	goto	l2784
  1803  000DC6                     l2780:
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  1807  000DC6  C040  FFD9         	movff	sprintf@sp,fsr2l
  1808  000DCA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1809  000DCE  0E20               	movlw	32
  1810  000DD0  6EDF               	movwf	indf2,c
  1811                           
  1812                           ; BSR set to: 0
  1813  000DD2  4A40               	infsnz	sprintf@sp,f,c
  1814  000DD4  2A41               	incf	sprintf@sp+1,f,c
  1815  000DD6                     l2784:
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;doprnt.c: 1182: width--;
  1819  000DD6  0100               	movlb	0	; () banked
  1820  000DD8  076B               	decf	sprintf@width& (0+255),f,b
  1821  000DDA  A0D8               	btfss	status,0,c
  1822  000DDC  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1823  000DDE                     l2786:
  1824                           
  1825                           ; BSR set to: 0
  1826  000DDE  0100               	movlb	0	; () banked
  1827  000DE0  BF6C               	btfsc	(sprintf@width+1)& (0+255),7,b
  1828  000DE2  D007               	goto	l2788
  1829  000DE4  0100               	movlb	0	; () banked
  1830  000DE6  516C               	movf	(sprintf@width+1)& (0+255),w,b
  1831  000DE8  E1EE               	bnz	l2780
  1832  000DEA  0100               	movlb	0	; () banked
  1833  000DEC  056B               	decf	sprintf@width& (0+255),w,b
  1834  000DEE  B0D8               	btfsc	status,0,c
  1835  000DF0  D7EA               	goto	l2780
  1836  000DF2                     l2788:
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;doprnt.c: 1183: }
  1840                           ;doprnt.c: 1188: if(flag & 0x03)
  1841  000DF2  0E03               	movlw	3
  1842  000DF4  0100               	movlb	0	; () banked
  1843  000DF6  1569               	andwf	sprintf@flag& (0+255),w,b
  1844  000DF8  6E47               	movwf	??_sprintf& (0+255),c
  1845  000DFA  0E00               	movlw	0
  1846  000DFC  0100               	movlb	0	; () banked
  1847  000DFE  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  1848  000E00  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1849  000E02  5047               	movf	??_sprintf,w,c
  1850  000E04  1048               	iorwf	??_sprintf+1,w,c
  1851  000E06  B4D8               	btfsc	status,2,c
  1852  000E08  D053               	goto	l2802
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1856  000E0A  C040  FFD9         	movff	sprintf@sp,fsr2l
  1857  000E0E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1858  000E12  0E2D               	movlw	45
  1859  000E14  D04B               	goto	L2
  1860  000E16                     l2792:
  1861                           
  1862                           ; BSR set to: 0
  1863  000E16  4A40               	infsnz	sprintf@sp,f,c
  1864  000E18  2A41               	incf	sprintf@sp+1,f,c
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;doprnt.c: 1195: }
  1868                           ;doprnt.c: 1196: while(c--) {
  1869  000E1A  D04A               	goto	l2802
  1870  000E1C                     l2794:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;doprnt.c: 1200: {
  1874                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1875  000E1C  C065  F001         	movff	sprintf@val,___lldiv@dividend
  1876  000E20  C066  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1877  000E24  C067  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1878  000E28  C068  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1879  000E2C  0100               	movlb	0	; () banked
  1880  000E2E  5178               	movf	sprintf@c& (0+255),w,b
  1881  000E30  0D04               	mullw	4
  1882  000E32  0E01               	movlw	low _dpowers
  1883  000E34  24F3               	addwf	prodl,w,c
  1884  000E36  6EF6               	movwf	tblptrl,c
  1885  000E38  0E08               	movlw	high _dpowers
  1886  000E3A  20F4               	addwfc	prodh,w,c
  1887  000E3C  6EF7               	movwf	tblptrh,c
  1888  000E3E                     	if	0	;There are less than 3 active tblptr bytes
  1889  000E3E                     	endif
  1890  000E3E  0009               	tblrd		*+
  1891  000E40  CFF5 F005          	movff	tablat,___lldiv@divisor
  1892  000E44  0009               	tblrd		*+
  1893  000E46  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1894  000E4A  0009               	tblrd		*+
  1895  000E4C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1896  000E50  000A               	tblrd		*-
  1897  000E52  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1898  000E56  EC82  F012         	call	___lldiv	;wreg free
  1899  000E5A  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  1900  000E5E  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  1901  000E62  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  1902  000E66  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  1903                           
  1904                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1905  000E6A  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  1906  000E6E  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1907  000E72  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1908  000E76  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1909  000E7A  0E0A               	movlw	10
  1910  000E7C  6E05               	movwf	___llmod@divisor,c
  1911  000E7E  0E00               	movlw	0
  1912  000E80  6E06               	movwf	___llmod@divisor+1,c
  1913  000E82  0E00               	movlw	0
  1914  000E84  6E07               	movwf	___llmod@divisor+2,c
  1915  000E86  0E00               	movlw	0
  1916  000E88  6E08               	movwf	___llmod@divisor+3,c
  1917  000E8A  ECFB  F012         	call	___llmod	;wreg free
  1918  000E8E  C001  F06D         	movff	?___llmod,sprintf@tmpval
  1919  000E92  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  1920  000E96  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  1921  000E9A  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  1922                           
  1923                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1924  000E9E  0100               	movlb	0	; () banked
  1925  000EA0  516D               	movf	sprintf@tmpval& (0+255),w,b
  1926  000EA2  0F30               	addlw	48
  1927  000EA4  C040  FFD9         	movff	sprintf@sp,fsr2l
  1928  000EA8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1929  000EAC                     L2:
  1930  000EAC  6EDF               	movwf	indf2,c
  1931  000EAE  D7B3               	goto	l2792
  1932  000EB0                     l2802:
  1933                           
  1934                           ; BSR set to: 0
  1935  000EB0  0100               	movlb	0	; () banked
  1936  000EB2  0778               	decf	sprintf@c& (0+255),f,b
  1937  000EB4  0100               	movlb	0	; () banked
  1938  000EB6  2978               	incf	sprintf@c& (0+255),w,b
  1939  000EB8  B4D8               	btfsc	status,2,c
  1940  000EBA  D00D               	goto	l2810
  1941  000EBC  D7AF               	goto	l2794
  1942  000EBE                     l2804:
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1946  000EBE  C040  FFD9         	movff	sprintf@sp,fsr2l
  1947  000EC2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1948  000EC6  0E30               	movlw	48
  1949  000EC8  6EDF               	movwf	indf2,c
  1950                           
  1951                           ; BSR set to: 0
  1952  000ECA  4A40               	infsnz	sprintf@sp,f,c
  1953  000ECC  2A41               	incf	sprintf@sp+1,f,c
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;doprnt.c: 1209: exp--;
  1957  000ECE  0100               	movlb	0	; () banked
  1958  000ED0  0771               	decf	sprintf@exp& (0+255),f,b
  1959  000ED2  A0D8               	btfss	status,0,c
  1960  000ED4  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1961  000ED6                     l2810:
  1962                           
  1963                           ; BSR set to: 0
  1964  000ED6  0100               	movlb	0	; () banked
  1965  000ED8  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1966  000EDA  D007               	goto	l2812
  1967  000EDC  0100               	movlb	0	; () banked
  1968  000EDE  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1969  000EE0  E1EE               	bnz	l2804
  1970  000EE2  0100               	movlb	0	; () banked
  1971  000EE4  0571               	decf	sprintf@exp& (0+255),w,b
  1972  000EE6  B0D8               	btfsc	status,0,c
  1973  000EE8  D7EA               	goto	l2804
  1974  000EEA                     l2812:
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;doprnt.c: 1210: }
  1978                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1979  000EEA  0100               	movlb	0	; () banked
  1980  000EEC  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1981  000EEE  D00C               	goto	l213
  1982  000EF0  0100               	movlb	0	; () banked
  1983  000EF2  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  1984  000EF4  E105               	bnz	u3490
  1985  000EF6  0E09               	movlw	9
  1986  000EF8  0100               	movlb	0	; () banked
  1987  000EFA  5D76               	subwf	sprintf@prec& (0+255),w,b
  1988  000EFC  A0D8               	btfss	status,0,c
  1989  000EFE  D004               	goto	l213
  1990  000F00                     u3490:
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1994  000F00  0E08               	movlw	8
  1995  000F02  0100               	movlb	0	; () banked
  1996  000F04  6F78               	movwf	sprintf@c& (0+255),b
  1997  000F06  D002               	goto	l2816
  1998  000F08                     l213:
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;doprnt.c: 1213: else
  2002                           ;doprnt.c: 1214: c = prec;
  2003  000F08  C076  F078         	movff	sprintf@prec,sprintf@c
  2004  000F0C                     l2816:
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;doprnt.c: 1215: prec -= c;
  2008  000F0C  0100               	movlb	0	; () banked
  2009  000F0E  5178               	movf	sprintf@c& (0+255),w,b
  2010  000F10  0100               	movlb	0	; () banked
  2011  000F12  5F76               	subwf	sprintf@prec& (0+255),f,b
  2012  000F14  0E00               	movlw	0
  2013  000F16  0100               	movlb	0	; () banked
  2014  000F18  BF78               	btfsc	sprintf@c& (0+255),7,b
  2015  000F1A  0EFF               	movlw	255
  2016  000F1C  0100               	movlb	0	; () banked
  2017  000F1E  5B77               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;doprnt.c: 1219: if(c)
  2021  000F20  0100               	movlb	0	; () banked
  2022  000F22  5178               	movf	sprintf@c& (0+255),w,b
  2023  000F24  0100               	movlb	0	; () banked
  2024  000F26  B4D8               	btfsc	status,2,c
  2025  000F28  D008               	goto	l2824
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2029  000F2A  C040  FFD9         	movff	sprintf@sp,fsr2l
  2030  000F2E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2031  000F32  0E2E               	movlw	46
  2032  000F34  6EDF               	movwf	indf2,c
  2033                           
  2034                           ; BSR set to: 0
  2035  000F36  4A40               	infsnz	sprintf@sp,f,c
  2036  000F38  2A41               	incf	sprintf@sp+1,f,c
  2037  000F3A                     l2824:
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2041  000F3A  0100               	movlb	0	; () banked
  2042  000F3C  5178               	movf	sprintf@c& (0+255),w,b
  2043  000F3E  EC22  F009         	call	_scale
  2044  000F42  C024  F060         	movff	?_scale,_sprintf$712
  2045  000F46  C025  F061         	movff	?_scale+1,_sprintf$712+1
  2046  000F4A  C026  F062         	movff	?_scale+2,_sprintf$712+2
  2047                           
  2048                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2049  000F4E  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2050  000F52  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2051  000F56  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2052  000F5A  C060  F015         	movff	_sprintf$712,___ftmul@f1
  2053  000F5E  C061  F016         	movff	_sprintf$712+1,___ftmul@f1+1
  2054  000F62  C062  F017         	movff	_sprintf$712+2,___ftmul@f1+2
  2055  000F66  ECEC  F00F         	call	___ftmul	;wreg free
  2056  000F6A  C015  F02B         	movff	?___ftmul,___fttol@f1
  2057  000F6E  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2058  000F72  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2059  000F76  EC66  F010         	call	___fttol	;wreg free
  2060  000F7A  C02B  F065         	movff	?___fttol,sprintf@val
  2061  000F7E  C02C  F066         	movff	?___fttol+1,sprintf@val+1
  2062  000F82  C02D  F067         	movff	?___fttol+2,sprintf@val+2
  2063  000F86  C02E  F068         	movff	?___fttol+3,sprintf@val+3
  2064                           
  2065                           ;doprnt.c: 1228: while(c--) {
  2066  000F8A  D072               	goto	l2838
  2067  000F8C                     l2828:
  2068                           
  2069                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2070  000F8C  C065  F001         	movff	sprintf@val,___lldiv@dividend
  2071  000F90  C066  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2072  000F94  C067  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2073  000F98  C068  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2074  000F9C  0100               	movlb	0	; () banked
  2075  000F9E  5178               	movf	sprintf@c& (0+255),w,b
  2076  000FA0  0D04               	mullw	4
  2077  000FA2  0E01               	movlw	low _dpowers
  2078  000FA4  24F3               	addwf	prodl,w,c
  2079  000FA6  6EF6               	movwf	tblptrl,c
  2080  000FA8  0E08               	movlw	high _dpowers
  2081  000FAA  20F4               	addwfc	prodh,w,c
  2082  000FAC  6EF7               	movwf	tblptrh,c
  2083  000FAE                     	if	0	;There are less than 3 active tblptr bytes
  2084  000FAE                     	endif
  2085  000FAE  0009               	tblrd		*+
  2086  000FB0  CFF5 F005          	movff	tablat,___lldiv@divisor
  2087  000FB4  0009               	tblrd		*+
  2088  000FB6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2089  000FBA  0009               	tblrd		*+
  2090  000FBC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2091  000FC0  000A               	tblrd		*-
  2092  000FC2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2093  000FC6  EC82  F012         	call	___lldiv	;wreg free
  2094  000FCA  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2095  000FCE  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2096  000FD2  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2097  000FD6  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2098                           
  2099                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2100  000FDA  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2101  000FDE  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2102  000FE2  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2103  000FE6  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2104  000FEA  0E0A               	movlw	10
  2105  000FEC  6E05               	movwf	___llmod@divisor,c
  2106  000FEE  0E00               	movlw	0
  2107  000FF0  6E06               	movwf	___llmod@divisor+1,c
  2108  000FF2  0E00               	movlw	0
  2109  000FF4  6E07               	movwf	___llmod@divisor+2,c
  2110  000FF6  0E00               	movlw	0
  2111  000FF8  6E08               	movwf	___llmod@divisor+3,c
  2112  000FFA  ECFB  F012         	call	___llmod	;wreg free
  2113  000FFE  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2114  001002  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2115  001006  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2116  00100A  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2117                           
  2118                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2119  00100E  0100               	movlb	0	; () banked
  2120  001010  516D               	movf	sprintf@tmpval& (0+255),w,b
  2121  001012  0F30               	addlw	48
  2122  001014  C040  FFD9         	movff	sprintf@sp,fsr2l
  2123  001018  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2124  00101C  6EDF               	movwf	indf2,c
  2125                           
  2126                           ; BSR set to: 0
  2127  00101E  4A40               	infsnz	sprintf@sp,f,c
  2128  001020  2A41               	incf	sprintf@sp+1,f,c
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;doprnt.c: 1232: val %= dpowers[c];
  2132  001022  C065  F001         	movff	sprintf@val,___llmod@dividend
  2133  001026  C066  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2134  00102A  C067  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2135  00102E  C068  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2136  001032  0100               	movlb	0	; () banked
  2137  001034  5178               	movf	sprintf@c& (0+255),w,b
  2138  001036  0D04               	mullw	4
  2139  001038  0E01               	movlw	low _dpowers
  2140  00103A  24F3               	addwf	prodl,w,c
  2141  00103C  6EF6               	movwf	tblptrl,c
  2142  00103E  0E08               	movlw	high _dpowers
  2143  001040  20F4               	addwfc	prodh,w,c
  2144  001042  6EF7               	movwf	tblptrh,c
  2145  001044                     	if	0	;There are less than 3 active tblptr bytes
  2146  001044                     	endif
  2147  001044  0009               	tblrd		*+
  2148  001046  CFF5 F005          	movff	tablat,___llmod@divisor
  2149  00104A  0009               	tblrd		*+
  2150  00104C  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2151  001050  0009               	tblrd		*+
  2152  001052  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2153  001056  000A               	tblrd		*-
  2154  001058  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2155  00105C  ECFB  F012         	call	___llmod	;wreg free
  2156  001060  C001  F065         	movff	?___llmod,sprintf@val
  2157  001064  C002  F066         	movff	?___llmod+1,sprintf@val+1
  2158  001068  C003  F067         	movff	?___llmod+2,sprintf@val+2
  2159  00106C  C004  F068         	movff	?___llmod+3,sprintf@val+3
  2160  001070                     l2838:
  2161  001070  0100               	movlb	0	; () banked
  2162  001072  0778               	decf	sprintf@c& (0+255),f,b
  2163  001074  0100               	movlb	0	; () banked
  2164  001076  2978               	incf	sprintf@c& (0+255),w,b
  2165  001078  B4D8               	btfsc	status,2,c
  2166  00107A  D00D               	goto	l2846
  2167  00107C  D787               	goto	l2828
  2168  00107E                     l2840:
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2172  00107E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2173  001082  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2174  001086  0E30               	movlw	48
  2175  001088  6EDF               	movwf	indf2,c
  2176                           
  2177                           ; BSR set to: 0
  2178  00108A  4A40               	infsnz	sprintf@sp,f,c
  2179  00108C  2A41               	incf	sprintf@sp+1,f,c
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;doprnt.c: 1237: prec--;
  2183  00108E  0100               	movlb	0	; () banked
  2184  001090  0776               	decf	sprintf@prec& (0+255),f,b
  2185  001092  A0D8               	btfss	status,0,c
  2186  001094  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  2187  001096                     l2846:
  2188                           
  2189                           ; BSR set to: 0
  2190  001096  0100               	movlb	0	; () banked
  2191  001098  5176               	movf	sprintf@prec& (0+255),w,b
  2192  00109A  0100               	movlb	0	; () banked
  2193  00109C  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2194  00109E  B4D8               	btfsc	status,2,c
  2195  0010A0  D0BC               	goto	l2896
  2196  0010A2  D7ED               	goto	l2840
  2197  0010A4                     l2848:
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;doprnt.c: 1246: }
  2201                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2202  0010A4  0100               	movlb	0	; () banked
  2203  0010A6  5176               	movf	sprintf@prec& (0+255),w,b
  2204  0010A8  0100               	movlb	0	; () banked
  2205  0010AA  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2206  0010AC  A4D8               	btfss	status,2,c
  2207  0010AE  D00D               	goto	l2854
  2208                           
  2209                           ; BSR set to: 0
  2210  0010B0  0100               	movlb	0	; () banked
  2211  0010B2  5165               	movf	sprintf@val& (0+255),w,b
  2212  0010B4  0100               	movlb	0	; () banked
  2213  0010B6  1166               	iorwf	(sprintf@val+1)& (0+255),w,b
  2214  0010B8  0100               	movlb	0	; () banked
  2215  0010BA  1167               	iorwf	(sprintf@val+2)& (0+255),w,b
  2216  0010BC  0100               	movlb	0	; () banked
  2217  0010BE  1168               	iorwf	(sprintf@val+3)& (0+255),w,b
  2218  0010C0  A4D8               	btfss	status,2,c
  2219  0010C2  D003               	goto	l2854
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;doprnt.c: 1291: prec++;
  2223  0010C4  0100               	movlb	0	; () banked
  2224  0010C6  4B76               	infsnz	sprintf@prec& (0+255),f,b
  2225  0010C8  2B77               	incf	(sprintf@prec+1)& (0+255),f,b
  2226  0010CA                     l2854:
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;doprnt.c: 1339: if(c < prec)
  2230  0010CA  0E80               	movlw	128
  2231  0010CC  0100               	movlb	0	; () banked
  2232  0010CE  BF78               	btfsc	sprintf@c& (0+255),7,b
  2233  0010D0  0E7F               	movlw	127
  2234  0010D2  6E47               	movwf	??_sprintf& (0+255),c
  2235  0010D4  0100               	movlb	0	; () banked
  2236  0010D6  5176               	movf	sprintf@prec& (0+255),w,b
  2237  0010D8  0100               	movlb	0	; () banked
  2238  0010DA  5D78               	subwf	sprintf@c& (0+255),w,b
  2239  0010DC  0100               	movlb	0	; () banked
  2240  0010DE  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2241  0010E0  0A80               	xorlw	128
  2242  0010E2  5847               	subwfb	??_sprintf& (0+255),w,c
  2243  0010E4  B0D8               	btfsc	status,0,c
  2244  0010E6  D003               	goto	l2858
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;doprnt.c: 1340: c = prec;
  2248  0010E8  C076  F078         	movff	sprintf@prec,sprintf@c
  2249  0010EC  D016               	goto	l2862
  2250  0010EE                     l2858:
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;doprnt.c: 1341: else if(prec < c)
  2254  0010EE  0100               	movlb	0	; () banked
  2255  0010F0  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2256  0010F2  0A80               	xorlw	128
  2257  0010F4  6E47               	movwf	??_sprintf& (0+255),c
  2258  0010F6  0100               	movlb	0	; () banked
  2259  0010F8  5178               	movf	sprintf@c& (0+255),w,b
  2260  0010FA  0100               	movlb	0	; () banked
  2261  0010FC  5D76               	subwf	sprintf@prec& (0+255),w,b
  2262  0010FE  0E80               	movlw	128
  2263  001100  0100               	movlb	0	; () banked
  2264  001102  BF78               	btfsc	sprintf@c& (0+255),7,b
  2265  001104  0E7F               	movlw	127
  2266  001106  5847               	subwfb	??_sprintf& (0+255),w,c
  2267  001108  B0D8               	btfsc	status,0,c
  2268  00110A  D007               	goto	l2862
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;doprnt.c: 1342: prec = c;
  2272  00110C  0100               	movlb	0	; () banked
  2273  00110E  5178               	movf	sprintf@c& (0+255),w,b
  2274  001110  0100               	movlb	0	; () banked
  2275  001112  6F76               	movwf	sprintf@prec& (0+255),b
  2276  001114  6B77               	clrf	(sprintf@prec+1)& (0+255),b
  2277  001116  BF76               	btfsc	sprintf@prec& (0+255),7,b
  2278  001118  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  2279  00111A                     l2862:
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2283  00111A  0100               	movlb	0	; () banked
  2284  00111C  516B               	movf	sprintf@width& (0+255),w,b
  2285  00111E  0100               	movlb	0	; () banked
  2286  001120  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  2287  001122  B4D8               	btfsc	status,2,c
  2288  001124  D010               	goto	l2868
  2289                           
  2290                           ; BSR set to: 0
  2291  001126  0E03               	movlw	3
  2292  001128  0100               	movlb	0	; () banked
  2293  00112A  1569               	andwf	sprintf@flag& (0+255),w,b
  2294  00112C  6E47               	movwf	??_sprintf& (0+255),c
  2295  00112E  0E00               	movlw	0
  2296  001130  0100               	movlb	0	; () banked
  2297  001132  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  2298  001134  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2299  001136  5047               	movf	??_sprintf,w,c
  2300  001138  1048               	iorwf	??_sprintf+1,w,c
  2301  00113A  B4D8               	btfsc	status,2,c
  2302  00113C  D004               	goto	l2868
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;doprnt.c: 1346: width--;
  2306  00113E  0100               	movlb	0	; () banked
  2307  001140  076B               	decf	sprintf@width& (0+255),f,b
  2308  001142  A0D8               	btfss	status,0,c
  2309  001144  076C               	decf	(sprintf@width+1)& (0+255),f,b
  2310  001146                     l2868:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2314  001146  0100               	movlb	0	; () banked
  2315  001148  AD6A               	btfss	(sprintf@flag+1)& (0+255),6,b
  2316  00114A  D01C               	goto	l2876
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 1349: if(width > prec)
  2320  00114C  0100               	movlb	0	; () banked
  2321  00114E  516B               	movf	sprintf@width& (0+255),w,b
  2322  001150  0100               	movlb	0	; () banked
  2323  001152  5D76               	subwf	sprintf@prec& (0+255),w,b
  2324  001154  0100               	movlb	0	; () banked
  2325  001156  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2326  001158  0A80               	xorlw	128
  2327  00115A  6E47               	movwf	??_sprintf& (0+255),c
  2328  00115C  0100               	movlb	0	; () banked
  2329  00115E  516C               	movf	(sprintf@width+1)& (0+255),w,b
  2330  001160  0A80               	xorlw	128
  2331  001162  5847               	subwfb	??_sprintf& (0+255),w,c
  2332  001164  B0D8               	btfsc	status,0,c
  2333  001166  D009               	goto	l2874
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;doprnt.c: 1350: width -= prec;
  2337  001168  0100               	movlb	0	; () banked
  2338  00116A  5176               	movf	sprintf@prec& (0+255),w,b
  2339  00116C  0100               	movlb	0	; () banked
  2340  00116E  5F6B               	subwf	sprintf@width& (0+255),f,b
  2341  001170  0100               	movlb	0	; () banked
  2342  001172  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2343  001174  0100               	movlb	0	; () banked
  2344  001176  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  2345  001178  D005               	goto	l2876
  2346  00117A                     l2874:
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;doprnt.c: 1351: else
  2350                           ;doprnt.c: 1352: width = 0;
  2351  00117A  0E00               	movlw	0
  2352  00117C  0100               	movlb	0	; () banked
  2353  00117E  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  2354  001180  0E00               	movlw	0
  2355  001182  6F6B               	movwf	sprintf@width& (0+255),b
  2356  001184                     l2876:
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;doprnt.c: 1353: }
  2360                           ;doprnt.c: 1381: if(width > c)
  2361  001184  0E80               	movlw	128
  2362  001186  0100               	movlb	0	; () banked
  2363  001188  BF78               	btfsc	sprintf@c& (0+255),7,b
  2364  00118A  0E7F               	movlw	127
  2365  00118C  6E47               	movwf	??_sprintf& (0+255),c
  2366  00118E  0100               	movlb	0	; () banked
  2367  001190  516B               	movf	sprintf@width& (0+255),w,b
  2368  001192  0100               	movlb	0	; () banked
  2369  001194  5D78               	subwf	sprintf@c& (0+255),w,b
  2370  001196  0100               	movlb	0	; () banked
  2371  001198  516C               	movf	(sprintf@width+1)& (0+255),w,b
  2372  00119A  0A80               	xorlw	128
  2373  00119C  5847               	subwfb	??_sprintf& (0+255),w,c
  2374  00119E  B0D8               	btfsc	status,0,c
  2375  0011A0  D00B               	goto	l2880
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;doprnt.c: 1382: width -= c;
  2379  0011A2  0100               	movlb	0	; () banked
  2380  0011A4  5178               	movf	sprintf@c& (0+255),w,b
  2381  0011A6  0100               	movlb	0	; () banked
  2382  0011A8  5F6B               	subwf	sprintf@width& (0+255),f,b
  2383  0011AA  0E00               	movlw	0
  2384  0011AC  0100               	movlb	0	; () banked
  2385  0011AE  BF78               	btfsc	sprintf@c& (0+255),7,b
  2386  0011B0  0EFF               	movlw	255
  2387  0011B2  0100               	movlb	0	; () banked
  2388  0011B4  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  2389  0011B6  D005               	goto	l2882
  2390  0011B8                     l2880:
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;doprnt.c: 1383: else
  2394                           ;doprnt.c: 1384: width = 0;
  2395  0011B8  0E00               	movlw	0
  2396  0011BA  0100               	movlb	0	; () banked
  2397  0011BC  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  2398  0011BE  0E00               	movlw	0
  2399  0011C0  6F6B               	movwf	sprintf@width& (0+255),b
  2400  0011C2                     l2882:
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;doprnt.c: 1422: {
  2404                           ;doprnt.c: 1424: if(width
  2405                           ;doprnt.c: 1428: )
  2406  0011C2  0100               	movlb	0	; () banked
  2407  0011C4  516B               	movf	sprintf@width& (0+255),w,b
  2408  0011C6  0100               	movlb	0	; () banked
  2409  0011C8  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  2410  0011CA  B4D8               	btfsc	status,2,c
  2411  0011CC  D012               	goto	l2890
  2412  0011CE                     l2884:
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2416  0011CE  C040  FFD9         	movff	sprintf@sp,fsr2l
  2417  0011D2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2418  0011D6  0E20               	movlw	32
  2419  0011D8  6EDF               	movwf	indf2,c
  2420                           
  2421                           ; BSR set to: 0
  2422  0011DA  4A40               	infsnz	sprintf@sp,f,c
  2423  0011DC  2A41               	incf	sprintf@sp+1,f,c
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;doprnt.c: 1431: while(--width);
  2427  0011DE  0100               	movlb	0	; () banked
  2428  0011E0  076B               	decf	sprintf@width& (0+255),f,b
  2429  0011E2  A0D8               	btfss	status,0,c
  2430  0011E4  076C               	decf	(sprintf@width+1)& (0+255),f,b
  2431  0011E6  0100               	movlb	0	; () banked
  2432  0011E8  516B               	movf	sprintf@width& (0+255),w,b
  2433  0011EA  0100               	movlb	0	; () banked
  2434  0011EC  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  2435  0011EE  A4D8               	btfss	status,2,c
  2436  0011F0  D7EE               	goto	l2884
  2437  0011F2                     l2890:
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;doprnt.c: 1438: if(flag & 0x03)
  2441  0011F2  0E03               	movlw	3
  2442  0011F4  0100               	movlb	0	; () banked
  2443  0011F6  1569               	andwf	sprintf@flag& (0+255),w,b
  2444  0011F8  6E47               	movwf	??_sprintf& (0+255),c
  2445  0011FA  0E00               	movlw	0
  2446  0011FC  0100               	movlb	0	; () banked
  2447  0011FE  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  2448  001200  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2449  001202  5047               	movf	??_sprintf,w,c
  2450  001204  1048               	iorwf	??_sprintf+1,w,c
  2451  001206  B4D8               	btfsc	status,2,c
  2452  001208  D008               	goto	l2896
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2456  00120A  C040  FFD9         	movff	sprintf@sp,fsr2l
  2457  00120E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2458  001212  0E2D               	movlw	45
  2459  001214  6EDF               	movwf	indf2,c
  2460  001216                     l2894:
  2461                           
  2462                           ; BSR set to: 0
  2463  001216  4A40               	infsnz	sprintf@sp,f,c
  2464  001218  2A41               	incf	sprintf@sp+1,f,c
  2465  00121A                     l2896:
  2466                           
  2467                           ; BSR set to: 0
  2468  00121A  C042  FFF6         	movff	sprintf@f,tblptrl
  2469  00121E  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2470  001222  4A42               	infsnz	sprintf@f,f,c
  2471  001224  2A43               	incf	sprintf@f+1,f,c
  2472  001226                     	if	0	;tblptru may be non-zero
  2473  001226                     	endif
  2474  001226                     	if	0	;tblptru may be non-zero
  2475  001226                     	endif
  2476  001226  0008               	tblrd		*
  2477  001228  CFF5 F078          	movff	tablat,sprintf@c
  2478  00122C  0100               	movlb	0	; () banked
  2479  00122E  5178               	movf	sprintf@c& (0+255),w,b
  2480  001230  A4D8               	btfss	status,2,c
  2481  001232  EF53  F004         	goto	l2642
  2482  001236                     l2898:
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;doprnt.c: 1538: *sp = 0;
  2486  001236  C040  FFD9         	movff	sprintf@sp,fsr2l
  2487  00123A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2488  00123E  0E00               	movlw	0
  2489  001240  6EDF               	movwf	indf2,c
  2490  001242  0012               	return	
  2491  001244                     __end_of_sprintf:
  2492                           	opt stack 0
  2493                           tblptru	equ	0xFF8
  2494                           tblptrh	equ	0xFF7
  2495                           tblptrl	equ	0xFF6
  2496                           tablat	equ	0xFF5
  2497                           prodh	equ	0xFF4
  2498                           prodl	equ	0xFF3
  2499                           wreg	equ	0xFE8
  2500                           indf2	equ	0xFDF
  2501                           postinc2	equ	0xFDE
  2502                           postdec2	equ	0xFDD
  2503                           fsr2h	equ	0xFDA
  2504                           fsr2l	equ	0xFD9
  2505                           status	equ	0xFD8
  2506                           
  2507 ;; *************** function _scale *****************
  2508 ;; Defined at:
  2509 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;  scl             1    wreg     char 
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  scl             1   41[COMRAM] char 
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  3   35[COMRAM] char 
  2516 ;; Registers used:
  2517 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2523 ;;      Params:         3       0       0       0       0       0       0       0       0
  2524 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2525 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2526 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2527 ;;Total ram usage:        7 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    2
  2530 ;; This function calls:
  2531 ;;		___awdiv
  2532 ;;		___awmod
  2533 ;;		___ftmul
  2534 ;;		___wmul
  2535 ;; This function is called by:
  2536 ;;		_sprintf
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text2
  2541  001244                     __ptext2:
  2542                           	opt stack 0
  2543  001244                     _scale:
  2544                           	opt stack 27
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;incstack = 0
  2548                           ;scale@scl stored from wreg
  2549  001244  6E2A               	movwf	scale@scl,c
  2550                           
  2551                           ;doprnt.c: 428: if(scl < 0) {
  2552  001246  AE2A               	btfss	scale@scl,7,c
  2553  001248  D0FB               	goto	l2274
  2554                           
  2555                           ;doprnt.c: 429: scl = -scl;
  2556  00124A  6C2A               	negf	scale@scl,c
  2557                           
  2558                           ;doprnt.c: 430: if(scl>=110)
  2559  00124C  502A               	movf	scale@scl,w,c
  2560  00124E  0A80               	xorlw	128
  2561  001250  0F12               	addlw	-238
  2562  001252  A0D8               	btfss	status,0,c
  2563  001254  D091               	goto	l2264
  2564                           
  2565                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2566  001256  0E00               	movlw	0
  2567  001258  6E12               	movwf	___wmul@multiplicand+1,c
  2568  00125A  0E03               	movlw	3
  2569  00125C  6E11               	movwf	___wmul@multiplicand,c
  2570  00125E  0E00               	movlw	0
  2571  001260  6E0A               	movwf	___awdiv@divisor+1,c
  2572  001262  0E0A               	movlw	10
  2573  001264  6E09               	movwf	___awdiv@divisor,c
  2574  001266  0E00               	movlw	0
  2575  001268  6E04               	movwf	___awmod@divisor+1,c
  2576  00126A  0E64               	movlw	100
  2577  00126C  6E03               	movwf	___awmod@divisor,c
  2578  00126E  502A               	movf	scale@scl,w,c
  2579  001270  6E01               	movwf	___awmod@dividend,c
  2580  001272  6A02               	clrf	___awmod@dividend+1,c
  2581  001274  BE01               	btfsc	___awmod@dividend,7,c
  2582  001276  0602               	decf	___awmod@dividend+1,f,c
  2583  001278  ECC3  F012         	call	___awmod	;wreg free
  2584  00127C  C001  F007         	movff	?___awmod,___awdiv@dividend
  2585  001280  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2586  001284  EC40  F012         	call	___awdiv	;wreg free
  2587  001288  0E09               	movlw	9
  2588  00128A  2407               	addwf	?___awdiv,w,c
  2589  00128C  6E0F               	movwf	___wmul@multiplier,c
  2590  00128E  0E00               	movlw	0
  2591  001290  2008               	addwfc	?___awdiv+1,w,c
  2592  001292  6E10               	movwf	___wmul@multiplier+1,c
  2593  001294  EC98  F013         	call	___wmul	;wreg free
  2594  001298  0E50               	movlw	low __npowers_
  2595  00129A  240F               	addwf	?___wmul,w,c
  2596  00129C  6EF6               	movwf	tblptrl,c
  2597  00129E  0E08               	movlw	high __npowers_
  2598  0012A0  2010               	addwfc	?___wmul+1,w,c
  2599  0012A2  6EF7               	movwf	tblptrh,c
  2600  0012A4                     	if	0	;There are less than 3 active tblptr bytes
  2601  0012A4                     	endif
  2602  0012A4  0009               	tblrd		*+
  2603  0012A6  CFF5 F018          	movff	tablat,___ftmul@f2
  2604  0012AA  0009               	tblrd		*+
  2605  0012AC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2606  0012B0  000A               	tblrd		*-
  2607  0012B2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2608  0012B6  0E00               	movlw	0
  2609  0012B8  6E0A               	movwf	___awdiv@divisor+1,c
  2610  0012BA  0E64               	movlw	100
  2611  0012BC  6E09               	movwf	___awdiv@divisor,c
  2612  0012BE  502A               	movf	scale@scl,w,c
  2613  0012C0  6E07               	movwf	___awdiv@dividend,c
  2614  0012C2  6A08               	clrf	___awdiv@dividend+1,c
  2615  0012C4  BE07               	btfsc	___awdiv@dividend,7,c
  2616  0012C6  0608               	decf	___awdiv@dividend+1,f,c
  2617  0012C8  EC40  F012         	call	___awdiv	;wreg free
  2618  0012CC  0E12               	movlw	18
  2619  0012CE  2407               	addwf	?___awdiv,w,c
  2620  0012D0  6E0F               	movwf	___wmul@multiplier,c
  2621  0012D2  0E00               	movlw	0
  2622  0012D4  2008               	addwfc	?___awdiv+1,w,c
  2623  0012D6  6E10               	movwf	___wmul@multiplier+1,c
  2624  0012D8  0E00               	movlw	0
  2625  0012DA  6E12               	movwf	___wmul@multiplicand+1,c
  2626  0012DC  0E03               	movlw	3
  2627  0012DE  6E11               	movwf	___wmul@multiplicand,c
  2628  0012E0  EC98  F013         	call	___wmul	;wreg free
  2629  0012E4  0E50               	movlw	low __npowers_
  2630  0012E6  240F               	addwf	?___wmul,w,c
  2631  0012E8  6EF6               	movwf	tblptrl,c
  2632  0012EA  0E08               	movlw	high __npowers_
  2633  0012EC  2010               	addwfc	?___wmul+1,w,c
  2634  0012EE  6EF7               	movwf	tblptrh,c
  2635  0012F0                     	if	0	;There are less than 3 active tblptr bytes
  2636  0012F0                     	endif
  2637  0012F0  0009               	tblrd		*+
  2638  0012F2  CFF5 F015          	movff	tablat,___ftmul@f1
  2639  0012F6  0009               	tblrd		*+
  2640  0012F8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2641  0012FC  000A               	tblrd		*-
  2642  0012FE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2643  001302  ECEC  F00F         	call	___ftmul	;wreg free
  2644  001306  C015  F027         	movff	?___ftmul,_scale$711
  2645  00130A  C016  F028         	movff	?___ftmul+1,_scale$711+1
  2646  00130E  C017  F029         	movff	?___ftmul+2,_scale$711+2
  2647                           
  2648                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2649  001312  C027  F015         	movff	_scale$711,___ftmul@f1
  2650  001316  C028  F016         	movff	_scale$711+1,___ftmul@f1+1
  2651  00131A  C029  F017         	movff	_scale$711+2,___ftmul@f1+2
  2652  00131E  0E00               	movlw	0
  2653  001320  6E12               	movwf	___wmul@multiplicand+1,c
  2654  001322  0E03               	movlw	3
  2655  001324  6E11               	movwf	___wmul@multiplicand,c
  2656  001326  0E00               	movlw	0
  2657  001328  6E04               	movwf	___awmod@divisor+1,c
  2658  00132A  0E0A               	movlw	10
  2659  00132C  6E03               	movwf	___awmod@divisor,c
  2660  00132E  502A               	movf	scale@scl,w,c
  2661  001330  6E01               	movwf	___awmod@dividend,c
  2662  001332  6A02               	clrf	___awmod@dividend+1,c
  2663  001334  BE01               	btfsc	___awmod@dividend,7,c
  2664  001336  0602               	decf	___awmod@dividend+1,f,c
  2665  001338  ECC3  F012         	call	___awmod	;wreg free
  2666  00133C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2667  001340  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2668  001344  EC98  F013         	call	___wmul	;wreg free
  2669  001348  0E50               	movlw	low __npowers_
  2670  00134A  240F               	addwf	?___wmul,w,c
  2671  00134C  6EF6               	movwf	tblptrl,c
  2672  00134E  0E08               	movlw	high __npowers_
  2673  001350  2010               	addwfc	?___wmul+1,w,c
  2674  001352  6EF7               	movwf	tblptrh,c
  2675  001354                     	if	0	;There are less than 3 active tblptr bytes
  2676  001354                     	endif
  2677  001354  0009               	tblrd		*+
  2678  001356  CFF5 F018          	movff	tablat,___ftmul@f2
  2679  00135A  0009               	tblrd		*+
  2680  00135C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2681  001360  000A               	tblrd		*-
  2682  001362  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2683  001366  ECEC  F00F         	call	___ftmul	;wreg free
  2684  00136A  C015  F024         	movff	?___ftmul,?_scale
  2685  00136E  C016  F025         	movff	?___ftmul+1,?_scale+1
  2686  001372  C017  F026         	movff	?___ftmul+2,?_scale+2
  2687  001376  0012               	return	
  2688  001378                     l2264:
  2689                           
  2690                           ;doprnt.c: 432: else if(scl > 10)
  2691  001378  502A               	movf	scale@scl,w,c
  2692  00137A  0A80               	xorlw	128
  2693  00137C  0F75               	addlw	-139
  2694  00137E  A0D8               	btfss	status,0,c
  2695  001380  D04D               	goto	l2270
  2696                           
  2697                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2698  001382  0E00               	movlw	0
  2699  001384  6E0A               	movwf	___awdiv@divisor+1,c
  2700  001386  0E0A               	movlw	10
  2701  001388  6E09               	movwf	___awdiv@divisor,c
  2702  00138A  502A               	movf	scale@scl,w,c
  2703  00138C  6E07               	movwf	___awdiv@dividend,c
  2704  00138E  6A08               	clrf	___awdiv@dividend+1,c
  2705  001390  BE07               	btfsc	___awdiv@dividend,7,c
  2706  001392  0608               	decf	___awdiv@dividend+1,f,c
  2707  001394  EC40  F012         	call	___awdiv	;wreg free
  2708  001398  0E09               	movlw	9
  2709  00139A  2407               	addwf	?___awdiv,w,c
  2710  00139C  6E0F               	movwf	___wmul@multiplier,c
  2711  00139E  0E00               	movlw	0
  2712  0013A0  2008               	addwfc	?___awdiv+1,w,c
  2713  0013A2  6E10               	movwf	___wmul@multiplier+1,c
  2714  0013A4  0E00               	movlw	0
  2715  0013A6  6E12               	movwf	___wmul@multiplicand+1,c
  2716  0013A8  0E03               	movlw	3
  2717  0013AA  6E11               	movwf	___wmul@multiplicand,c
  2718  0013AC  EC98  F013         	call	___wmul	;wreg free
  2719  0013B0  0E50               	movlw	low __npowers_
  2720  0013B2  240F               	addwf	?___wmul,w,c
  2721  0013B4  6EF6               	movwf	tblptrl,c
  2722  0013B6  0E08               	movlw	high __npowers_
  2723  0013B8  2010               	addwfc	?___wmul+1,w,c
  2724  0013BA  6EF7               	movwf	tblptrh,c
  2725  0013BC                     	if	0	;There are less than 3 active tblptr bytes
  2726  0013BC                     	endif
  2727  0013BC  0009               	tblrd		*+
  2728  0013BE  CFF5 F015          	movff	tablat,___ftmul@f1
  2729  0013C2  0009               	tblrd		*+
  2730  0013C4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2731  0013C8  000A               	tblrd		*-
  2732  0013CA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2733  0013CE  0E00               	movlw	0
  2734  0013D0  6E12               	movwf	___wmul@multiplicand+1,c
  2735  0013D2  0E03               	movlw	3
  2736  0013D4  6E11               	movwf	___wmul@multiplicand,c
  2737  0013D6  0E00               	movlw	0
  2738  0013D8  6E04               	movwf	___awmod@divisor+1,c
  2739  0013DA  0E0A               	movlw	10
  2740  0013DC  6E03               	movwf	___awmod@divisor,c
  2741  0013DE  502A               	movf	scale@scl,w,c
  2742  0013E0  6E01               	movwf	___awmod@dividend,c
  2743  0013E2  6A02               	clrf	___awmod@dividend+1,c
  2744  0013E4  BE01               	btfsc	___awmod@dividend,7,c
  2745  0013E6  0602               	decf	___awmod@dividend+1,f,c
  2746  0013E8  ECC3  F012         	call	___awmod	;wreg free
  2747  0013EC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2748  0013F0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2749  0013F4  EC98  F013         	call	___wmul	;wreg free
  2750  0013F8  0E50               	movlw	low __npowers_
  2751  0013FA  240F               	addwf	?___wmul,w,c
  2752  0013FC  6EF6               	movwf	tblptrl,c
  2753  0013FE  0E08               	movlw	high __npowers_
  2754  001400  2010               	addwfc	?___wmul+1,w,c
  2755  001402  6EF7               	movwf	tblptrh,c
  2756  001404                     	if	0	;There are less than 3 active tblptr bytes
  2757  001404                     	endif
  2758  001404  0009               	tblrd		*+
  2759  001406  CFF5 F018          	movff	tablat,___ftmul@f2
  2760  00140A  0009               	tblrd		*+
  2761  00140C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2762  001410  000A               	tblrd		*-
  2763  001412  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2764  001416  ECEC  F00F         	call	___ftmul	;wreg free
  2765  00141A  D7A7               	goto	L3
  2766  00141C                     l2270:
  2767                           
  2768                           ;doprnt.c: 434: return _npowers_[scl];
  2769  00141C  502A               	movf	scale@scl,w,c
  2770  00141E  0D03               	mullw	3
  2771  001420  0E50               	movlw	low __npowers_
  2772  001422  24F3               	addwf	prodl,w,c
  2773  001424  6EF6               	movwf	tblptrl,c
  2774  001426  0E08               	movlw	high __npowers_
  2775  001428  20F4               	addwfc	prodh,w,c
  2776  00142A  6EF7               	movwf	tblptrh,c
  2777  00142C                     	if	0	;There are less than 3 active tblptr bytes
  2778  00142C                     	endif
  2779  00142C  0009               	tblrd		*+
  2780  00142E  CFF5 F024          	movff	tablat,?_scale
  2781  001432  0009               	tblrd		*+
  2782  001434  CFF5 F025          	movff	tablat,?_scale+1
  2783  001438  000A               	tblrd		*-
  2784  00143A  CFF5 F026          	movff	tablat,?_scale+2
  2785  00143E  0012               	return	
  2786  001440                     l2274:
  2787                           
  2788                           ;doprnt.c: 435: }
  2789                           ;doprnt.c: 436: if(scl>=110)
  2790  001440  502A               	movf	scale@scl,w,c
  2791  001442  0A80               	xorlw	128
  2792  001444  0F12               	addlw	-238
  2793  001446  A0D8               	btfss	status,0,c
  2794  001448  D091               	goto	l2282
  2795                           
  2796                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2797  00144A  0E00               	movlw	0
  2798  00144C  6E12               	movwf	___wmul@multiplicand+1,c
  2799  00144E  0E03               	movlw	3
  2800  001450  6E11               	movwf	___wmul@multiplicand,c
  2801  001452  0E00               	movlw	0
  2802  001454  6E0A               	movwf	___awdiv@divisor+1,c
  2803  001456  0E0A               	movlw	10
  2804  001458  6E09               	movwf	___awdiv@divisor,c
  2805  00145A  0E00               	movlw	0
  2806  00145C  6E04               	movwf	___awmod@divisor+1,c
  2807  00145E  0E64               	movlw	100
  2808  001460  6E03               	movwf	___awmod@divisor,c
  2809  001462  502A               	movf	scale@scl,w,c
  2810  001464  6E01               	movwf	___awmod@dividend,c
  2811  001466  6A02               	clrf	___awmod@dividend+1,c
  2812  001468  BE01               	btfsc	___awmod@dividend,7,c
  2813  00146A  0602               	decf	___awmod@dividend+1,f,c
  2814  00146C  ECC3  F012         	call	___awmod	;wreg free
  2815  001470  C001  F007         	movff	?___awmod,___awdiv@dividend
  2816  001474  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2817  001478  EC40  F012         	call	___awdiv	;wreg free
  2818  00147C  0E09               	movlw	9
  2819  00147E  2407               	addwf	?___awdiv,w,c
  2820  001480  6E0F               	movwf	___wmul@multiplier,c
  2821  001482  0E00               	movlw	0
  2822  001484  2008               	addwfc	?___awdiv+1,w,c
  2823  001486  6E10               	movwf	___wmul@multiplier+1,c
  2824  001488  EC98  F013         	call	___wmul	;wreg free
  2825  00148C  0E29               	movlw	low __powers_
  2826  00148E  240F               	addwf	?___wmul,w,c
  2827  001490  6EF6               	movwf	tblptrl,c
  2828  001492  0E08               	movlw	high __powers_
  2829  001494  2010               	addwfc	?___wmul+1,w,c
  2830  001496  6EF7               	movwf	tblptrh,c
  2831  001498                     	if	0	;There are less than 3 active tblptr bytes
  2832  001498                     	endif
  2833  001498  0009               	tblrd		*+
  2834  00149A  CFF5 F018          	movff	tablat,___ftmul@f2
  2835  00149E  0009               	tblrd		*+
  2836  0014A0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2837  0014A4  000A               	tblrd		*-
  2838  0014A6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2839  0014AA  0E00               	movlw	0
  2840  0014AC  6E0A               	movwf	___awdiv@divisor+1,c
  2841  0014AE  0E64               	movlw	100
  2842  0014B0  6E09               	movwf	___awdiv@divisor,c
  2843  0014B2  502A               	movf	scale@scl,w,c
  2844  0014B4  6E07               	movwf	___awdiv@dividend,c
  2845  0014B6  6A08               	clrf	___awdiv@dividend+1,c
  2846  0014B8  BE07               	btfsc	___awdiv@dividend,7,c
  2847  0014BA  0608               	decf	___awdiv@dividend+1,f,c
  2848  0014BC  EC40  F012         	call	___awdiv	;wreg free
  2849  0014C0  0E12               	movlw	18
  2850  0014C2  2407               	addwf	?___awdiv,w,c
  2851  0014C4  6E0F               	movwf	___wmul@multiplier,c
  2852  0014C6  0E00               	movlw	0
  2853  0014C8  2008               	addwfc	?___awdiv+1,w,c
  2854  0014CA  6E10               	movwf	___wmul@multiplier+1,c
  2855  0014CC  0E00               	movlw	0
  2856  0014CE  6E12               	movwf	___wmul@multiplicand+1,c
  2857  0014D0  0E03               	movlw	3
  2858  0014D2  6E11               	movwf	___wmul@multiplicand,c
  2859  0014D4  EC98  F013         	call	___wmul	;wreg free
  2860  0014D8  0E29               	movlw	low __powers_
  2861  0014DA  240F               	addwf	?___wmul,w,c
  2862  0014DC  6EF6               	movwf	tblptrl,c
  2863  0014DE  0E08               	movlw	high __powers_
  2864  0014E0  2010               	addwfc	?___wmul+1,w,c
  2865  0014E2  6EF7               	movwf	tblptrh,c
  2866  0014E4                     	if	0	;There are less than 3 active tblptr bytes
  2867  0014E4                     	endif
  2868  0014E4  0009               	tblrd		*+
  2869  0014E6  CFF5 F015          	movff	tablat,___ftmul@f1
  2870  0014EA  0009               	tblrd		*+
  2871  0014EC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2872  0014F0  000A               	tblrd		*-
  2873  0014F2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2874  0014F6  ECEC  F00F         	call	___ftmul	;wreg free
  2875  0014FA  C015  F027         	movff	?___ftmul,_scale$711
  2876  0014FE  C016  F028         	movff	?___ftmul+1,_scale$711+1
  2877  001502  C017  F029         	movff	?___ftmul+2,_scale$711+2
  2878                           
  2879                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2880  001506  C027  F015         	movff	_scale$711,___ftmul@f1
  2881  00150A  C028  F016         	movff	_scale$711+1,___ftmul@f1+1
  2882  00150E  C029  F017         	movff	_scale$711+2,___ftmul@f1+2
  2883  001512  0E00               	movlw	0
  2884  001514  6E12               	movwf	___wmul@multiplicand+1,c
  2885  001516  0E03               	movlw	3
  2886  001518  6E11               	movwf	___wmul@multiplicand,c
  2887  00151A  0E00               	movlw	0
  2888  00151C  6E04               	movwf	___awmod@divisor+1,c
  2889  00151E  0E0A               	movlw	10
  2890  001520  6E03               	movwf	___awmod@divisor,c
  2891  001522  502A               	movf	scale@scl,w,c
  2892  001524  6E01               	movwf	___awmod@dividend,c
  2893  001526  6A02               	clrf	___awmod@dividend+1,c
  2894  001528  BE01               	btfsc	___awmod@dividend,7,c
  2895  00152A  0602               	decf	___awmod@dividend+1,f,c
  2896  00152C  ECC3  F012         	call	___awmod	;wreg free
  2897  001530  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2898  001534  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2899  001538  EC98  F013         	call	___wmul	;wreg free
  2900  00153C  0E29               	movlw	low __powers_
  2901  00153E  240F               	addwf	?___wmul,w,c
  2902  001540  6EF6               	movwf	tblptrl,c
  2903  001542  0E08               	movlw	high __powers_
  2904  001544  2010               	addwfc	?___wmul+1,w,c
  2905  001546  6EF7               	movwf	tblptrh,c
  2906  001548                     	if	0	;There are less than 3 active tblptr bytes
  2907  001548                     	endif
  2908  001548  0009               	tblrd		*+
  2909  00154A  CFF5 F018          	movff	tablat,___ftmul@f2
  2910  00154E  0009               	tblrd		*+
  2911  001550  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2912  001554  000A               	tblrd		*-
  2913  001556  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2914  00155A  ECEC  F00F         	call	___ftmul	;wreg free
  2915  00155E  C015  F024         	movff	?___ftmul,?_scale
  2916  001562  C016  F025         	movff	?___ftmul+1,?_scale+1
  2917  001566  C017  F026         	movff	?___ftmul+2,?_scale+2
  2918  00156A  0012               	return	
  2919  00156C                     l2282:
  2920                           
  2921                           ;doprnt.c: 438: else if(scl > 10)
  2922  00156C  502A               	movf	scale@scl,w,c
  2923  00156E  0A80               	xorlw	128
  2924  001570  0F75               	addlw	-139
  2925  001572  A0D8               	btfss	status,0,c
  2926  001574  D04D               	goto	l2288
  2927                           
  2928                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2929  001576  0E00               	movlw	0
  2930  001578  6E0A               	movwf	___awdiv@divisor+1,c
  2931  00157A  0E0A               	movlw	10
  2932  00157C  6E09               	movwf	___awdiv@divisor,c
  2933  00157E  502A               	movf	scale@scl,w,c
  2934  001580  6E07               	movwf	___awdiv@dividend,c
  2935  001582  6A08               	clrf	___awdiv@dividend+1,c
  2936  001584  BE07               	btfsc	___awdiv@dividend,7,c
  2937  001586  0608               	decf	___awdiv@dividend+1,f,c
  2938  001588  EC40  F012         	call	___awdiv	;wreg free
  2939  00158C  0E09               	movlw	9
  2940  00158E  2407               	addwf	?___awdiv,w,c
  2941  001590  6E0F               	movwf	___wmul@multiplier,c
  2942  001592  0E00               	movlw	0
  2943  001594  2008               	addwfc	?___awdiv+1,w,c
  2944  001596  6E10               	movwf	___wmul@multiplier+1,c
  2945  001598  0E00               	movlw	0
  2946  00159A  6E12               	movwf	___wmul@multiplicand+1,c
  2947  00159C  0E03               	movlw	3
  2948  00159E  6E11               	movwf	___wmul@multiplicand,c
  2949  0015A0  EC98  F013         	call	___wmul	;wreg free
  2950  0015A4  0E29               	movlw	low __powers_
  2951  0015A6  240F               	addwf	?___wmul,w,c
  2952  0015A8  6EF6               	movwf	tblptrl,c
  2953  0015AA  0E08               	movlw	high __powers_
  2954  0015AC  2010               	addwfc	?___wmul+1,w,c
  2955  0015AE  6EF7               	movwf	tblptrh,c
  2956  0015B0                     	if	0	;There are less than 3 active tblptr bytes
  2957  0015B0                     	endif
  2958  0015B0  0009               	tblrd		*+
  2959  0015B2  CFF5 F015          	movff	tablat,___ftmul@f1
  2960  0015B6  0009               	tblrd		*+
  2961  0015B8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2962  0015BC  000A               	tblrd		*-
  2963  0015BE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2964  0015C2  0E00               	movlw	0
  2965  0015C4  6E12               	movwf	___wmul@multiplicand+1,c
  2966  0015C6  0E03               	movlw	3
  2967  0015C8  6E11               	movwf	___wmul@multiplicand,c
  2968  0015CA  0E00               	movlw	0
  2969  0015CC  6E04               	movwf	___awmod@divisor+1,c
  2970  0015CE  0E0A               	movlw	10
  2971  0015D0  6E03               	movwf	___awmod@divisor,c
  2972  0015D2  502A               	movf	scale@scl,w,c
  2973  0015D4  6E01               	movwf	___awmod@dividend,c
  2974  0015D6  6A02               	clrf	___awmod@dividend+1,c
  2975  0015D8  BE01               	btfsc	___awmod@dividend,7,c
  2976  0015DA  0602               	decf	___awmod@dividend+1,f,c
  2977  0015DC  ECC3  F012         	call	___awmod	;wreg free
  2978  0015E0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2979  0015E4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2980  0015E8  EC98  F013         	call	___wmul	;wreg free
  2981  0015EC  0E29               	movlw	low __powers_
  2982  0015EE  240F               	addwf	?___wmul,w,c
  2983  0015F0  6EF6               	movwf	tblptrl,c
  2984  0015F2  0E08               	movlw	high __powers_
  2985  0015F4  2010               	addwfc	?___wmul+1,w,c
  2986  0015F6  6EF7               	movwf	tblptrh,c
  2987  0015F8                     	if	0	;There are less than 3 active tblptr bytes
  2988  0015F8                     	endif
  2989  0015F8  0009               	tblrd		*+
  2990  0015FA  CFF5 F018          	movff	tablat,___ftmul@f2
  2991  0015FE  0009               	tblrd		*+
  2992  001600  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2993  001604  000A               	tblrd		*-
  2994  001606  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2995  00160A  ECEC  F00F         	call	___ftmul	;wreg free
  2996  00160E  D7A7               	goto	L4
  2997  001610                     l2288:
  2998                           
  2999                           ;doprnt.c: 440: return _powers_[scl];
  3000  001610  502A               	movf	scale@scl,w,c
  3001  001612  0D03               	mullw	3
  3002  001614  0E29               	movlw	low __powers_
  3003  001616  24F3               	addwf	prodl,w,c
  3004  001618  6EF6               	movwf	tblptrl,c
  3005  00161A  0E08               	movlw	high __powers_
  3006  00161C  20F4               	addwfc	prodh,w,c
  3007  00161E  6EF7               	movwf	tblptrh,c
  3008  001620                     	if	0	;There are less than 3 active tblptr bytes
  3009  001620                     	endif
  3010  001620  0009               	tblrd		*+
  3011  001622  CFF5 F024          	movff	tablat,?_scale
  3012  001626  0009               	tblrd		*+
  3013  001628  CFF5 F025          	movff	tablat,?_scale+1
  3014  00162C  000A               	tblrd		*-
  3015  00162E  CFF5 F026          	movff	tablat,?_scale+2
  3016  001632  0012               	return	
  3017  001634                     __end_of_scale:
  3018                           	opt stack 0
  3019                           tblptru	equ	0xFF8
  3020                           tblptrh	equ	0xFF7
  3021                           tblptrl	equ	0xFF6
  3022                           tablat	equ	0xFF5
  3023                           prodh	equ	0xFF4
  3024                           prodl	equ	0xFF3
  3025                           wreg	equ	0xFE8
  3026                           indf2	equ	0xFDF
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           fsr2h	equ	0xFDA
  3030                           fsr2l	equ	0xFD9
  3031                           status	equ	0xFD8
  3032                           
  3033 ;; *************** function _isdigit *****************
  3034 ;; Defined at:
  3035 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  c               1    wreg     unsigned char 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  c               1    2[COMRAM] unsigned char 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;		None               void
  3042 ;; Registers used:
  3043 ;;		wreg, status,2, status,0
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3049 ;;      Params:         0       0       0       0       0       0       0       0       0
  3050 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3051 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3052 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3053 ;;Total ram usage:        3 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; This function calls:
  3056 ;;		Nothing
  3057 ;; This function is called by:
  3058 ;;		_sprintf
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text3
  3063  0027A0                     __ptext3:
  3064                           	opt stack 0
  3065  0027A0                     _isdigit:
  3066                           	opt stack 29
  3067                           
  3068                           ;incstack = 0
  3069                           ;isdigit@c stored from wreg
  3070  0027A0  6E03               	movwf	isdigit@c,c
  3071  0027A2  0E00               	movlw	0
  3072  0027A4  6E02               	movwf	_isdigit$383,c
  3073  0027A6  0E3A               	movlw	58
  3074  0027A8  6003               	cpfslt	isdigit@c,c
  3075  0027AA  D005               	goto	l2300
  3076  0027AC  0E2F               	movlw	47
  3077  0027AE  6403               	cpfsgt	isdigit@c,c
  3078  0027B0  D002               	goto	l2300
  3079  0027B2  0E01               	movlw	1
  3080  0027B4  6E02               	movwf	_isdigit$383,c
  3081  0027B6                     l2300:
  3082  0027B6  C002  F001         	movff	_isdigit$383,??_isdigit
  3083  0027BA  3001               	rrcf	??_isdigit,w,c
  3084  0027BC  0012               	return	
  3085  0027BE                     __end_of_isdigit:
  3086                           	opt stack 0
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           prodh	equ	0xFF4
  3092                           prodl	equ	0xFF3
  3093                           wreg	equ	0xFE8
  3094                           indf2	equ	0xFDF
  3095                           postinc2	equ	0xFDE
  3096                           postdec2	equ	0xFDD
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _fround *****************
  3102 ;; Defined at:
  3103 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  prec            1    wreg     unsigned char 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;  prec            1   44[COMRAM] unsigned char 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  3   35[COMRAM] unsigned char 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3117 ;;      Params:         3       0       0       0       0       0       0       0       0
  3118 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3120 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3121 ;;Total ram usage:       10 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    2
  3124 ;; This function calls:
  3125 ;;		___awdiv
  3126 ;;		___awmod
  3127 ;;		___ftmul
  3128 ;;		___wmul
  3129 ;; This function is called by:
  3130 ;;		_sprintf
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text4
  3135  001634                     __ptext4:
  3136                           	opt stack 0
  3137  001634                     _fround:
  3138                           	opt stack 27
  3139                           
  3140                           ;incstack = 0
  3141                           ;fround@prec stored from wreg
  3142  001634  6E2D               	movwf	fround@prec,c
  3143                           
  3144                           ;doprnt.c: 413: if(prec>=110)
  3145  001636  0E6D               	movlw	109
  3146  001638  642D               	cpfsgt	fround@prec,c
  3147  00163A  D09F               	goto	l2242
  3148                           
  3149                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3150  00163C  0E00               	movlw	0
  3151  00163E  6E12               	movwf	___wmul@multiplicand+1,c
  3152  001640  0E03               	movlw	3
  3153  001642  6E11               	movwf	___wmul@multiplicand,c
  3154  001644  0E00               	movlw	0
  3155  001646  6E0A               	movwf	___awdiv@divisor+1,c
  3156  001648  0E0A               	movlw	10
  3157  00164A  6E09               	movwf	___awdiv@divisor,c
  3158  00164C  0E00               	movlw	0
  3159  00164E  6E04               	movwf	___awmod@divisor+1,c
  3160  001650  0E64               	movlw	100
  3161  001652  6E03               	movwf	___awmod@divisor,c
  3162  001654  C02D  F001         	movff	fround@prec,___awmod@dividend
  3163  001658  6A02               	clrf	___awmod@dividend+1,c
  3164  00165A  ECC3  F012         	call	___awmod	;wreg free
  3165  00165E  C001  F007         	movff	?___awmod,___awdiv@dividend
  3166  001662  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3167  001666  EC40  F012         	call	___awdiv	;wreg free
  3168  00166A  0E09               	movlw	9
  3169  00166C  2407               	addwf	?___awdiv,w,c
  3170  00166E  6E0F               	movwf	___wmul@multiplier,c
  3171  001670  0E00               	movlw	0
  3172  001672  2008               	addwfc	?___awdiv+1,w,c
  3173  001674  6E10               	movwf	___wmul@multiplier+1,c
  3174  001676  EC98  F013         	call	___wmul	;wreg free
  3175  00167A  0E50               	movlw	low __npowers_
  3176  00167C  240F               	addwf	?___wmul,w,c
  3177  00167E  6EF6               	movwf	tblptrl,c
  3178  001680  0E08               	movlw	high __npowers_
  3179  001682  2010               	addwfc	?___wmul+1,w,c
  3180  001684  6EF7               	movwf	tblptrh,c
  3181  001686                     	if	0	;There are less than 3 active tblptr bytes
  3182  001686                     	endif
  3183  001686  0009               	tblrd		*+
  3184  001688  CFF5 F018          	movff	tablat,___ftmul@f2
  3185  00168C  0009               	tblrd		*+
  3186  00168E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3187  001692  000A               	tblrd		*-
  3188  001694  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3189  001698  0E00               	movlw	0
  3190  00169A  6E0A               	movwf	___awdiv@divisor+1,c
  3191  00169C  0E64               	movlw	100
  3192  00169E  6E09               	movwf	___awdiv@divisor,c
  3193  0016A0  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3194  0016A4  6A08               	clrf	___awdiv@dividend+1,c
  3195  0016A6  EC40  F012         	call	___awdiv	;wreg free
  3196  0016AA  0E12               	movlw	18
  3197  0016AC  2407               	addwf	?___awdiv,w,c
  3198  0016AE  6E0F               	movwf	___wmul@multiplier,c
  3199  0016B0  0E00               	movlw	0
  3200  0016B2  2008               	addwfc	?___awdiv+1,w,c
  3201  0016B4  6E10               	movwf	___wmul@multiplier+1,c
  3202  0016B6  0E00               	movlw	0
  3203  0016B8  6E12               	movwf	___wmul@multiplicand+1,c
  3204  0016BA  0E03               	movlw	3
  3205  0016BC  6E11               	movwf	___wmul@multiplicand,c
  3206  0016BE  EC98  F013         	call	___wmul	;wreg free
  3207  0016C2  0E50               	movlw	low __npowers_
  3208  0016C4  240F               	addwf	?___wmul,w,c
  3209  0016C6  6EF6               	movwf	tblptrl,c
  3210  0016C8  0E08               	movlw	high __npowers_
  3211  0016CA  2010               	addwfc	?___wmul+1,w,c
  3212  0016CC  6EF7               	movwf	tblptrh,c
  3213  0016CE                     	if	0	;There are less than 3 active tblptr bytes
  3214  0016CE                     	endif
  3215  0016CE  0009               	tblrd		*+
  3216  0016D0  CFF5 F015          	movff	tablat,___ftmul@f1
  3217  0016D4  0009               	tblrd		*+
  3218  0016D6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3219  0016DA  000A               	tblrd		*-
  3220  0016DC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3221  0016E0  ECEC  F00F         	call	___ftmul	;wreg free
  3222  0016E4  C015  F02A         	movff	?___ftmul,_fround$709
  3223  0016E8  C016  F02B         	movff	?___ftmul+1,_fround$709+1
  3224  0016EC  C017  F02C         	movff	?___ftmul+2,_fround$709+2
  3225                           
  3226                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3227  0016F0  0E00               	movlw	0
  3228  0016F2  6E12               	movwf	___wmul@multiplicand+1,c
  3229  0016F4  0E03               	movlw	3
  3230  0016F6  6E11               	movwf	___wmul@multiplicand,c
  3231  0016F8  0E00               	movlw	0
  3232  0016FA  6E04               	movwf	___awmod@divisor+1,c
  3233  0016FC  0E0A               	movlw	10
  3234  0016FE  6E03               	movwf	___awmod@divisor,c
  3235  001700  C02D  F001         	movff	fround@prec,___awmod@dividend
  3236  001704  6A02               	clrf	___awmod@dividend+1,c
  3237  001706  ECC3  F012         	call	___awmod	;wreg free
  3238  00170A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3239  00170E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3240  001712  EC98  F013         	call	___wmul	;wreg free
  3241  001716  0E50               	movlw	low __npowers_
  3242  001718  240F               	addwf	?___wmul,w,c
  3243  00171A  6EF6               	movwf	tblptrl,c
  3244  00171C  0E08               	movlw	high __npowers_
  3245  00171E  2010               	addwfc	?___wmul+1,w,c
  3246  001720  6EF7               	movwf	tblptrh,c
  3247  001722                     	if	0	;There are less than 3 active tblptr bytes
  3248  001722                     	endif
  3249  001722  0009               	tblrd		*+
  3250  001724  CFF5 F018          	movff	tablat,___ftmul@f2
  3251  001728  0009               	tblrd		*+
  3252  00172A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3253  00172E  000A               	tblrd		*-
  3254  001730  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3255  001734  C02A  F015         	movff	_fround$709,___ftmul@f1
  3256  001738  C02B  F016         	movff	_fround$709+1,___ftmul@f1+1
  3257  00173C  C02C  F017         	movff	_fround$709+2,___ftmul@f1+2
  3258  001740  ECEC  F00F         	call	___ftmul	;wreg free
  3259  001744  C015  F027         	movff	?___ftmul,_fround$710
  3260  001748  C016  F028         	movff	?___ftmul+1,_fround$710+1
  3261  00174C  C017  F029         	movff	?___ftmul+2,_fround$710+2
  3262                           
  3263                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3264  001750  C027  F015         	movff	_fround$710,___ftmul@f1
  3265  001754  C028  F016         	movff	_fround$710+1,___ftmul@f1+1
  3266  001758  C029  F017         	movff	_fround$710+2,___ftmul@f1+2
  3267  00175C  0E00               	movlw	0
  3268  00175E  6E18               	movwf	___ftmul@f2,c
  3269  001760  0E00               	movlw	0
  3270  001762  6E19               	movwf	___ftmul@f2+1,c
  3271  001764  0E3F               	movlw	63
  3272  001766  6E1A               	movwf	___ftmul@f2+2,c
  3273  001768  ECEC  F00F         	call	___ftmul	;wreg free
  3274  00176C  C015  F024         	movff	?___ftmul,?_fround
  3275  001770  C016  F025         	movff	?___ftmul+1,?_fround+1
  3276  001774  C017  F026         	movff	?___ftmul+2,?_fround+2
  3277  001778  0012               	return	
  3278  00177A                     l2242:
  3279                           
  3280                           ;doprnt.c: 415: else if(prec > 10)
  3281  00177A  0E0A               	movlw	10
  3282  00177C  642D               	cpfsgt	fround@prec,c
  3283  00177E  D05D               	goto	l2250
  3284                           
  3285                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3286  001780  0E00               	movlw	0
  3287  001782  6E12               	movwf	___wmul@multiplicand+1,c
  3288  001784  0E03               	movlw	3
  3289  001786  6E11               	movwf	___wmul@multiplicand,c
  3290  001788  0E00               	movlw	0
  3291  00178A  6E04               	movwf	___awmod@divisor+1,c
  3292  00178C  0E0A               	movlw	10
  3293  00178E  6E03               	movwf	___awmod@divisor,c
  3294  001790  C02D  F001         	movff	fround@prec,___awmod@dividend
  3295  001794  6A02               	clrf	___awmod@dividend+1,c
  3296  001796  ECC3  F012         	call	___awmod	;wreg free
  3297  00179A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3298  00179E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3299  0017A2  EC98  F013         	call	___wmul	;wreg free
  3300  0017A6  0E50               	movlw	low __npowers_
  3301  0017A8  240F               	addwf	?___wmul,w,c
  3302  0017AA  6EF6               	movwf	tblptrl,c
  3303  0017AC  0E08               	movlw	high __npowers_
  3304  0017AE  2010               	addwfc	?___wmul+1,w,c
  3305  0017B0  6EF7               	movwf	tblptrh,c
  3306  0017B2                     	if	0	;There are less than 3 active tblptr bytes
  3307  0017B2                     	endif
  3308  0017B2  0009               	tblrd		*+
  3309  0017B4  CFF5 F018          	movff	tablat,___ftmul@f2
  3310  0017B8  0009               	tblrd		*+
  3311  0017BA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3312  0017BE  000A               	tblrd		*-
  3313  0017C0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3314  0017C4  0E00               	movlw	0
  3315  0017C6  6E0A               	movwf	___awdiv@divisor+1,c
  3316  0017C8  0E0A               	movlw	10
  3317  0017CA  6E09               	movwf	___awdiv@divisor,c
  3318  0017CC  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3319  0017D0  6A08               	clrf	___awdiv@dividend+1,c
  3320  0017D2  EC40  F012         	call	___awdiv	;wreg free
  3321  0017D6  0E09               	movlw	9
  3322  0017D8  2407               	addwf	?___awdiv,w,c
  3323  0017DA  6E0F               	movwf	___wmul@multiplier,c
  3324  0017DC  0E00               	movlw	0
  3325  0017DE  2008               	addwfc	?___awdiv+1,w,c
  3326  0017E0  6E10               	movwf	___wmul@multiplier+1,c
  3327  0017E2  0E00               	movlw	0
  3328  0017E4  6E12               	movwf	___wmul@multiplicand+1,c
  3329  0017E6  0E03               	movlw	3
  3330  0017E8  6E11               	movwf	___wmul@multiplicand,c
  3331  0017EA  EC98  F013         	call	___wmul	;wreg free
  3332  0017EE  0E50               	movlw	low __npowers_
  3333  0017F0  240F               	addwf	?___wmul,w,c
  3334  0017F2  6EF6               	movwf	tblptrl,c
  3335  0017F4  0E08               	movlw	high __npowers_
  3336  0017F6  2010               	addwfc	?___wmul+1,w,c
  3337  0017F8  6EF7               	movwf	tblptrh,c
  3338  0017FA                     	if	0	;There are less than 3 active tblptr bytes
  3339  0017FA                     	endif
  3340  0017FA  0009               	tblrd		*+
  3341  0017FC  CFF5 F015          	movff	tablat,___ftmul@f1
  3342  001800  0009               	tblrd		*+
  3343  001802  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3344  001806  000A               	tblrd		*-
  3345  001808  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3346  00180C  ECEC  F00F         	call	___ftmul	;wreg free
  3347  001810  C015  F02A         	movff	?___ftmul,_fround$709
  3348  001814  C016  F02B         	movff	?___ftmul+1,_fround$709+1
  3349  001818  C017  F02C         	movff	?___ftmul+2,_fround$709+2
  3350                           
  3351                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3352  00181C  C02A  F015         	movff	_fround$709,___ftmul@f1
  3353  001820  C02B  F016         	movff	_fround$709+1,___ftmul@f1+1
  3354  001824  C02C  F017         	movff	_fround$709+2,___ftmul@f1+2
  3355  001828  0E00               	movlw	0
  3356  00182A  6E18               	movwf	___ftmul@f2,c
  3357  00182C  0E00               	movlw	0
  3358  00182E  6E19               	movwf	___ftmul@f2+1,c
  3359  001830  0E3F               	movlw	63
  3360  001832  6E1A               	movwf	___ftmul@f2+2,c
  3361  001834  ECEC  F00F         	call	___ftmul	;wreg free
  3362  001838  D799               	goto	L5
  3363  00183A                     l2250:
  3364                           
  3365                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3366  00183A  502D               	movf	fround@prec,w,c
  3367  00183C  0D03               	mullw	3
  3368  00183E  0E50               	movlw	low __npowers_
  3369  001840  24F3               	addwf	prodl,w,c
  3370  001842  6EF6               	movwf	tblptrl,c
  3371  001844  0E08               	movlw	high __npowers_
  3372  001846  20F4               	addwfc	prodh,w,c
  3373  001848  6EF7               	movwf	tblptrh,c
  3374  00184A                     	if	0	;There are less than 3 active tblptr bytes
  3375  00184A                     	endif
  3376  00184A  0009               	tblrd		*+
  3377  00184C  CFF5 F015          	movff	tablat,___ftmul@f1
  3378  001850  0009               	tblrd		*+
  3379  001852  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3380  001856  000A               	tblrd		*-
  3381  001858  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3382  00185C  0E00               	movlw	0
  3383  00185E  6E18               	movwf	___ftmul@f2,c
  3384  001860  0E00               	movlw	0
  3385  001862  6E19               	movwf	___ftmul@f2+1,c
  3386  001864  0E3F               	movlw	63
  3387  001866  6E1A               	movwf	___ftmul@f2+2,c
  3388  001868  ECEC  F00F         	call	___ftmul	;wreg free
  3389  00186C  C015  F024         	movff	?___ftmul,?_fround
  3390  001870  C016  F025         	movff	?___ftmul+1,?_fround+1
  3391  001874  C017  F026         	movff	?___ftmul+2,?_fround+2
  3392  001878  0012               	return	
  3393  00187A                     __end_of_fround:
  3394                           	opt stack 0
  3395                           tblptru	equ	0xFF8
  3396                           tblptrh	equ	0xFF7
  3397                           tblptrl	equ	0xFF6
  3398                           tablat	equ	0xFF5
  3399                           prodh	equ	0xFF4
  3400                           prodl	equ	0xFF3
  3401                           wreg	equ	0xFE8
  3402                           indf2	equ	0xFDF
  3403                           postinc2	equ	0xFDE
  3404                           postdec2	equ	0xFDD
  3405                           fsr2h	equ	0xFDA
  3406                           fsr2l	equ	0xFD9
  3407                           status	equ	0xFD8
  3408                           
  3409 ;; *************** function ___wmul *****************
  3410 ;; Defined at:
  3411 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  multiplier      2   14[COMRAM] unsigned int 
  3414 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;  product         2   18[COMRAM] unsigned int 
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  2   14[COMRAM] unsigned int 
  3419 ;; Registers used:
  3420 ;;		wreg, status,2, status,0, prodl, prodh
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3426 ;;      Params:         4       0       0       0       0       0       0       0       0
  3427 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3428 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3429 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3430 ;;Total ram usage:        6 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; This function calls:
  3433 ;;		Nothing
  3434 ;; This function is called by:
  3435 ;;		_fround
  3436 ;;		_scale
  3437 ;;		_sprintf
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text5
  3442  002730                     __ptext5:
  3443                           	opt stack 0
  3444  002730                     ___wmul:
  3445                           	opt stack 28
  3446                           
  3447                           ;incstack = 0
  3448  002730  500F               	movf	___wmul@multiplier,w,c
  3449  002732  0211               	mulwf	___wmul@multiplicand,c
  3450  002734  CFF3 F013          	movff	prodl,___wmul@product
  3451  002738  CFF4 F014          	movff	prodh,___wmul@product+1
  3452  00273C  500F               	movf	___wmul@multiplier,w,c
  3453  00273E  0212               	mulwf	___wmul@multiplicand+1,c
  3454  002740  50F3               	movf	prodl,w,c
  3455  002742  2614               	addwf	___wmul@product+1,f,c
  3456  002744  5010               	movf	___wmul@multiplier+1,w,c
  3457  002746  0211               	mulwf	___wmul@multiplicand,c
  3458  002748  50F3               	movf	prodl,w,c
  3459  00274A  2614               	addwf	___wmul@product+1,f,c
  3460  00274C  C013  F00F         	movff	___wmul@product,?___wmul
  3461  002750  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3462  002754  0012               	return	
  3463  002756                     __end_of___wmul:
  3464                           	opt stack 0
  3465                           tblptru	equ	0xFF8
  3466                           tblptrh	equ	0xFF7
  3467                           tblptrl	equ	0xFF6
  3468                           tablat	equ	0xFF5
  3469                           prodh	equ	0xFF4
  3470                           prodl	equ	0xFF3
  3471                           wreg	equ	0xFE8
  3472                           indf2	equ	0xFDF
  3473                           postinc2	equ	0xFDE
  3474                           postdec2	equ	0xFDD
  3475                           fsr2h	equ	0xFDA
  3476                           fsr2l	equ	0xFD9
  3477                           status	equ	0xFD8
  3478                           
  3479 ;; *************** function ___ftmul *****************
  3480 ;; Defined at:
  3481 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  f1              3   20[COMRAM] float 
  3484 ;;  f2              3   23[COMRAM] float 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3487 ;;  sign            1   34[COMRAM] unsigned char 
  3488 ;;  cntr            1   33[COMRAM] unsigned char 
  3489 ;;  exp             1   29[COMRAM] unsigned char 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  3   20[COMRAM] float 
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3499 ;;      Params:         6       0       0       0       0       0       0       0       0
  3500 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3501 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3502 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3503 ;;Total ram usage:       15 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    1
  3506 ;; This function calls:
  3507 ;;		___ftpack
  3508 ;; This function is called by:
  3509 ;;		_main
  3510 ;;		_fround
  3511 ;;		_scale
  3512 ;;		_sprintf
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text6
  3517  001FD8                     __ptext6:
  3518                           	opt stack 0
  3519  001FD8                     ___ftmul:
  3520                           	opt stack 27
  3521                           
  3522                           ;incstack = 0
  3523  001FD8  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3524  001FDC  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3525  001FDE  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3526  001FE0  3416               	rlcf	___ftmul@f1+1,w,c
  3527  001FE2  361B               	rlcf	??___ftmul& (0+255),f,c
  3528  001FE4  E301               	bnc	u2151
  3529  001FE6  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3530  001FE8                     u2151:
  3531  001FE8  501B               	movf	??___ftmul,w,c
  3532  001FEA  6E1E               	movwf	___ftmul@exp,c
  3533  001FEC  501E               	movf	___ftmul@exp,w,c
  3534  001FEE  A4D8               	btfss	status,2,c
  3535  001FF0  D007               	goto	l2060
  3536  001FF2  0E00               	movlw	0
  3537  001FF4  6E15               	movwf	?___ftmul,c
  3538  001FF6  0E00               	movlw	0
  3539  001FF8  6E16               	movwf	?___ftmul+1,c
  3540  001FFA  0E00               	movlw	0
  3541  001FFC  6E17               	movwf	?___ftmul+2,c
  3542  001FFE  0012               	return	
  3543  002000                     l2060:
  3544  002000  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3545  002004  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3546  002006  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3547  002008  3419               	rlcf	___ftmul@f2+1,w,c
  3548  00200A  361B               	rlcf	??___ftmul& (0+255),f,c
  3549  00200C  E301               	bnc	u2171
  3550  00200E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3551  002010                     u2171:
  3552  002010  501B               	movf	??___ftmul,w,c
  3553  002012  6E23               	movwf	___ftmul@sign,c
  3554  002014  5023               	movf	___ftmul@sign,w,c
  3555  002016  A4D8               	btfss	status,2,c
  3556  002018  D007               	goto	l2066
  3557  00201A  0E00               	movlw	0
  3558  00201C  6E15               	movwf	?___ftmul,c
  3559  00201E  0E00               	movlw	0
  3560  002020  6E16               	movwf	?___ftmul+1,c
  3561  002022  0E00               	movlw	0
  3562  002024  6E17               	movwf	?___ftmul+2,c
  3563  002026  0012               	return	
  3564  002028                     l2066:
  3565  002028  5023               	movf	___ftmul@sign,w,c
  3566  00202A  0F7B               	addlw	123
  3567  00202C  261E               	addwf	___ftmul@exp,f,c
  3568  00202E  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3569  002032  501A               	movf	___ftmul@f2+2,w,c
  3570  002034  1A23               	xorwf	___ftmul@sign,f,c
  3571  002036  0E80               	movlw	128
  3572  002038  1623               	andwf	___ftmul@sign,f,c
  3573  00203A  8E16               	bsf	___ftmul@f1+1,7,c
  3574  00203C  8E19               	bsf	___ftmul@f2+1,7,c
  3575  00203E  0EFF               	movlw	255
  3576  002040  1618               	andwf	___ftmul@f2,f,c
  3577  002042  0EFF               	movlw	255
  3578  002044  1619               	andwf	___ftmul@f2+1,f,c
  3579  002046  0E00               	movlw	0
  3580  002048  161A               	andwf	___ftmul@f2+2,f,c
  3581  00204A  0E00               	movlw	0
  3582  00204C  6E1F               	movwf	___ftmul@f3_as_product,c
  3583  00204E  0E00               	movlw	0
  3584  002050  6E20               	movwf	___ftmul@f3_as_product+1,c
  3585  002052  0E00               	movlw	0
  3586  002054  6E21               	movwf	___ftmul@f3_as_product+2,c
  3587  002056  0E07               	movlw	7
  3588  002058  6E22               	movwf	___ftmul@cntr,c
  3589  00205A                     l2080:
  3590  00205A  A015               	btfss	___ftmul@f1,0,c
  3591  00205C  D006               	goto	l2084
  3592  00205E  5018               	movf	___ftmul@f2,w,c
  3593  002060  261F               	addwf	___ftmul@f3_as_product,f,c
  3594  002062  5019               	movf	___ftmul@f2+1,w,c
  3595  002064  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3596  002066  501A               	movf	___ftmul@f2+2,w,c
  3597  002068  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3598  00206A                     l2084:
  3599  00206A  90D8               	bcf	status,0,c
  3600  00206C  3217               	rrcf	___ftmul@f1+2,f,c
  3601  00206E  3216               	rrcf	___ftmul@f1+1,f,c
  3602  002070  3215               	rrcf	___ftmul@f1,f,c
  3603  002072  90D8               	bcf	status,0,c
  3604  002074  3618               	rlcf	___ftmul@f2,f,c
  3605  002076  3619               	rlcf	___ftmul@f2+1,f,c
  3606  002078  361A               	rlcf	___ftmul@f2+2,f,c
  3607  00207A  2E22               	decfsz	___ftmul@cntr,f,c
  3608  00207C  D7EE               	goto	l2080
  3609  00207E  0E09               	movlw	9
  3610  002080  6E22               	movwf	___ftmul@cntr,c
  3611  002082                     l2090:
  3612  002082  A015               	btfss	___ftmul@f1,0,c
  3613  002084  D006               	goto	l2094
  3614  002086  5018               	movf	___ftmul@f2,w,c
  3615  002088  261F               	addwf	___ftmul@f3_as_product,f,c
  3616  00208A  5019               	movf	___ftmul@f2+1,w,c
  3617  00208C  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3618  00208E  501A               	movf	___ftmul@f2+2,w,c
  3619  002090  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3620  002092                     l2094:
  3621  002092  90D8               	bcf	status,0,c
  3622  002094  3217               	rrcf	___ftmul@f1+2,f,c
  3623  002096  3216               	rrcf	___ftmul@f1+1,f,c
  3624  002098  3215               	rrcf	___ftmul@f1,f,c
  3625  00209A  90D8               	bcf	status,0,c
  3626  00209C  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3627  00209E  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3628  0020A0  321F               	rrcf	___ftmul@f3_as_product,f,c
  3629  0020A2  2E22               	decfsz	___ftmul@cntr,f,c
  3630  0020A4  D7EE               	goto	l2090
  3631  0020A6  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3632  0020AA  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3633  0020AE  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3634  0020B2  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3635  0020B6  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3636  0020BA  EC59  F011         	call	___ftpack	;wreg free
  3637  0020BE  C001  F015         	movff	?___ftpack,?___ftmul
  3638  0020C2  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3639  0020C6  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3640  0020CA  0012               	return	
  3641  0020CC                     __end_of___ftmul:
  3642                           	opt stack 0
  3643                           tblptru	equ	0xFF8
  3644                           tblptrh	equ	0xFF7
  3645                           tblptrl	equ	0xFF6
  3646                           tablat	equ	0xFF5
  3647                           prodh	equ	0xFF4
  3648                           prodl	equ	0xFF3
  3649                           wreg	equ	0xFE8
  3650                           indf2	equ	0xFDF
  3651                           postinc2	equ	0xFDE
  3652                           postdec2	equ	0xFDD
  3653                           fsr2h	equ	0xFDA
  3654                           fsr2l	equ	0xFD9
  3655                           status	equ	0xFD8
  3656                           
  3657 ;; *************** function ___awmod *****************
  3658 ;; Defined at:
  3659 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;  dividend        2    0[COMRAM] int 
  3662 ;;  divisor         2    2[COMRAM] int 
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;  sign            1    5[COMRAM] unsigned char 
  3665 ;;  counter         1    4[COMRAM] unsigned char 
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  2    0[COMRAM] int 
  3668 ;; Registers used:
  3669 ;;		wreg, status,2, status,0
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3675 ;;      Params:         4       0       0       0       0       0       0       0       0
  3676 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3677 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3678 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3679 ;;Total ram usage:        6 bytes
  3680 ;; Hardware stack levels used:    1
  3681 ;; This function calls:
  3682 ;;		Nothing
  3683 ;; This function is called by:
  3684 ;;		_fround
  3685 ;;		_scale
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text7
  3690  002586                     __ptext7:
  3691                           	opt stack 0
  3692  002586                     ___awmod:
  3693                           	opt stack 28
  3694                           
  3695                           ;incstack = 0
  3696  002586  0E00               	movlw	0
  3697  002588  6E06               	movwf	___awmod@sign,c
  3698  00258A  AE02               	btfss	___awmod@dividend+1,7,c
  3699  00258C  D006               	goto	l2154
  3700  00258E  6C01               	negf	___awmod@dividend,c
  3701  002590  1E02               	comf	___awmod@dividend+1,f,c
  3702  002592  B0D8               	btfsc	status,0,c
  3703  002594  2A02               	incf	___awmod@dividend+1,f,c
  3704  002596  0E01               	movlw	1
  3705  002598  6E06               	movwf	___awmod@sign,c
  3706  00259A                     l2154:
  3707  00259A  AE04               	btfss	___awmod@divisor+1,7,c
  3708  00259C  D004               	goto	l2158
  3709  00259E  6C03               	negf	___awmod@divisor,c
  3710  0025A0  1E04               	comf	___awmod@divisor+1,f,c
  3711  0025A2  B0D8               	btfsc	status,0,c
  3712  0025A4  2A04               	incf	___awmod@divisor+1,f,c
  3713  0025A6                     l2158:
  3714  0025A6  5003               	movf	___awmod@divisor,w,c
  3715  0025A8  1004               	iorwf	___awmod@divisor+1,w,c
  3716  0025AA  B4D8               	btfsc	status,2,c
  3717  0025AC  D018               	goto	l2174
  3718  0025AE  0E01               	movlw	1
  3719  0025B0  6E05               	movwf	___awmod@counter,c
  3720  0025B2  D004               	goto	l2164
  3721  0025B4                     l2162:
  3722  0025B4  90D8               	bcf	status,0,c
  3723  0025B6  3603               	rlcf	___awmod@divisor,f,c
  3724  0025B8  3604               	rlcf	___awmod@divisor+1,f,c
  3725  0025BA  2A05               	incf	___awmod@counter,f,c
  3726  0025BC                     l2164:
  3727  0025BC  AE04               	btfss	___awmod@divisor+1,7,c
  3728  0025BE  D7FA               	goto	l2162
  3729  0025C0                     l2166:
  3730  0025C0  5003               	movf	___awmod@divisor,w,c
  3731  0025C2  5C01               	subwf	___awmod@dividend,w,c
  3732  0025C4  5004               	movf	___awmod@divisor+1,w,c
  3733  0025C6  5802               	subwfb	___awmod@dividend+1,w,c
  3734  0025C8  A0D8               	btfss	status,0,c
  3735  0025CA  D004               	goto	l2170
  3736  0025CC  5003               	movf	___awmod@divisor,w,c
  3737  0025CE  5E01               	subwf	___awmod@dividend,f,c
  3738  0025D0  5004               	movf	___awmod@divisor+1,w,c
  3739  0025D2  5A02               	subwfb	___awmod@dividend+1,f,c
  3740  0025D4                     l2170:
  3741  0025D4  90D8               	bcf	status,0,c
  3742  0025D6  3204               	rrcf	___awmod@divisor+1,f,c
  3743  0025D8  3203               	rrcf	___awmod@divisor,f,c
  3744  0025DA  2E05               	decfsz	___awmod@counter,f,c
  3745  0025DC  D7F1               	goto	l2166
  3746  0025DE                     l2174:
  3747  0025DE  5006               	movf	___awmod@sign,w,c
  3748  0025E0  B4D8               	btfsc	status,2,c
  3749  0025E2  D004               	goto	l2178
  3750  0025E4  6C01               	negf	___awmod@dividend,c
  3751  0025E6  1E02               	comf	___awmod@dividend+1,f,c
  3752  0025E8  B0D8               	btfsc	status,0,c
  3753  0025EA  2A02               	incf	___awmod@dividend+1,f,c
  3754  0025EC                     l2178:
  3755  0025EC  C001  F001         	movff	___awmod@dividend,?___awmod
  3756  0025F0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3757  0025F4  0012               	return	
  3758  0025F6                     __end_of___awmod:
  3759                           	opt stack 0
  3760                           tblptru	equ	0xFF8
  3761                           tblptrh	equ	0xFF7
  3762                           tblptrl	equ	0xFF6
  3763                           tablat	equ	0xFF5
  3764                           prodh	equ	0xFF4
  3765                           prodl	equ	0xFF3
  3766                           wreg	equ	0xFE8
  3767                           indf2	equ	0xFDF
  3768                           postinc2	equ	0xFDE
  3769                           postdec2	equ	0xFDD
  3770                           fsr2h	equ	0xFDA
  3771                           fsr2l	equ	0xFD9
  3772                           status	equ	0xFD8
  3773                           
  3774 ;; *************** function ___awdiv *****************
  3775 ;; Defined at:
  3776 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;  dividend        2    6[COMRAM] int 
  3779 ;;  divisor         2    8[COMRAM] int 
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  quotient        2   12[COMRAM] int 
  3782 ;;  sign            1   11[COMRAM] unsigned char 
  3783 ;;  counter         1   10[COMRAM] unsigned char 
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  2    6[COMRAM] int 
  3786 ;; Registers used:
  3787 ;;		wreg, status,2, status,0
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3793 ;;      Params:         4       0       0       0       0       0       0       0       0
  3794 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3795 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3796 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3797 ;;Total ram usage:        8 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_fround
  3803 ;;		_scale
  3804 ;;		_sprintf
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text8
  3809  002480                     __ptext8:
  3810                           	opt stack 0
  3811  002480                     ___awdiv:
  3812                           	opt stack 28
  3813                           
  3814                           ;incstack = 0
  3815  002480  0E00               	movlw	0
  3816  002482  6E0C               	movwf	___awdiv@sign,c
  3817  002484  AE0A               	btfss	___awdiv@divisor+1,7,c
  3818  002486  D006               	goto	l2110
  3819  002488  6C09               	negf	___awdiv@divisor,c
  3820  00248A  1E0A               	comf	___awdiv@divisor+1,f,c
  3821  00248C  B0D8               	btfsc	status,0,c
  3822  00248E  2A0A               	incf	___awdiv@divisor+1,f,c
  3823  002490  0E01               	movlw	1
  3824  002492  6E0C               	movwf	___awdiv@sign,c
  3825  002494                     l2110:
  3826  002494  AE08               	btfss	___awdiv@dividend+1,7,c
  3827  002496  D006               	goto	l2116
  3828  002498  6C07               	negf	___awdiv@dividend,c
  3829  00249A  1E08               	comf	___awdiv@dividend+1,f,c
  3830  00249C  B0D8               	btfsc	status,0,c
  3831  00249E  2A08               	incf	___awdiv@dividend+1,f,c
  3832  0024A0  0E01               	movlw	1
  3833  0024A2  1A0C               	xorwf	___awdiv@sign,f,c
  3834  0024A4                     l2116:
  3835  0024A4  0E00               	movlw	0
  3836  0024A6  6E0E               	movwf	___awdiv@quotient+1,c
  3837  0024A8  0E00               	movlw	0
  3838  0024AA  6E0D               	movwf	___awdiv@quotient,c
  3839  0024AC  5009               	movf	___awdiv@divisor,w,c
  3840  0024AE  100A               	iorwf	___awdiv@divisor+1,w,c
  3841  0024B0  B4D8               	btfsc	status,2,c
  3842  0024B2  D01C               	goto	l2138
  3843  0024B4  0E01               	movlw	1
  3844  0024B6  6E0B               	movwf	___awdiv@counter,c
  3845  0024B8  D004               	goto	l2124
  3846  0024BA                     l2122:
  3847  0024BA  90D8               	bcf	status,0,c
  3848  0024BC  3609               	rlcf	___awdiv@divisor,f,c
  3849  0024BE  360A               	rlcf	___awdiv@divisor+1,f,c
  3850  0024C0  2A0B               	incf	___awdiv@counter,f,c
  3851  0024C2                     l2124:
  3852  0024C2  AE0A               	btfss	___awdiv@divisor+1,7,c
  3853  0024C4  D7FA               	goto	l2122
  3854  0024C6                     l2126:
  3855  0024C6  90D8               	bcf	status,0,c
  3856  0024C8  360D               	rlcf	___awdiv@quotient,f,c
  3857  0024CA  360E               	rlcf	___awdiv@quotient+1,f,c
  3858  0024CC  5009               	movf	___awdiv@divisor,w,c
  3859  0024CE  5C07               	subwf	___awdiv@dividend,w,c
  3860  0024D0  500A               	movf	___awdiv@divisor+1,w,c
  3861  0024D2  5808               	subwfb	___awdiv@dividend+1,w,c
  3862  0024D4  A0D8               	btfss	status,0,c
  3863  0024D6  D005               	goto	l2134
  3864  0024D8  5009               	movf	___awdiv@divisor,w,c
  3865  0024DA  5E07               	subwf	___awdiv@dividend,f,c
  3866  0024DC  500A               	movf	___awdiv@divisor+1,w,c
  3867  0024DE  5A08               	subwfb	___awdiv@dividend+1,f,c
  3868  0024E0  800D               	bsf	___awdiv@quotient,0,c
  3869  0024E2                     l2134:
  3870  0024E2  90D8               	bcf	status,0,c
  3871  0024E4  320A               	rrcf	___awdiv@divisor+1,f,c
  3872  0024E6  3209               	rrcf	___awdiv@divisor,f,c
  3873  0024E8  2E0B               	decfsz	___awdiv@counter,f,c
  3874  0024EA  D7ED               	goto	l2126
  3875  0024EC                     l2138:
  3876  0024EC  500C               	movf	___awdiv@sign,w,c
  3877  0024EE  B4D8               	btfsc	status,2,c
  3878  0024F0  D004               	goto	l2142
  3879  0024F2  6C0D               	negf	___awdiv@quotient,c
  3880  0024F4  1E0E               	comf	___awdiv@quotient+1,f,c
  3881  0024F6  B0D8               	btfsc	status,0,c
  3882  0024F8  2A0E               	incf	___awdiv@quotient+1,f,c
  3883  0024FA                     l2142:
  3884  0024FA  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3885  0024FE  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3886  002502  0012               	return	
  3887  002504                     __end_of___awdiv:
  3888                           	opt stack 0
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           prodh	equ	0xFF4
  3894                           prodl	equ	0xFF3
  3895                           wreg	equ	0xFE8
  3896                           indf2	equ	0xFDF
  3897                           postinc2	equ	0xFDE
  3898                           postdec2	equ	0xFDD
  3899                           fsr2h	equ	0xFDA
  3900                           fsr2l	equ	0xFD9
  3901                           status	equ	0xFD8
  3902                           
  3903 ;; *************** function __tdiv_to_l_ *****************
  3904 ;; Defined at:
  3905 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;  f1              3    0[COMRAM] float 
  3908 ;;  f2              3    3[COMRAM] float 
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;  quot            4    9[COMRAM] unsigned long 
  3911 ;;  exp1            1   14[COMRAM] unsigned char 
  3912 ;;  cntr            1   13[COMRAM] unsigned char 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  4    0[COMRAM] unsigned long 
  3915 ;; Registers used:
  3916 ;;		wreg, status,2, status,0
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3922 ;;      Params:         6       0       0       0       0       0       0       0       0
  3923 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3924 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3925 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3926 ;;Total ram usage:       15 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; This function calls:
  3929 ;;		Nothing
  3930 ;; This function is called by:
  3931 ;;		_sprintf
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           	psect	text9
  3936  001B6A                     __ptext9:
  3937                           	opt stack 0
  3938  001B6A                     __tdiv_to_l_:
  3939                           	opt stack 29
  3940                           
  3941                           ;incstack = 0
  3942  001B6A  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3943  001B6E  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3944  001B70  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3945  001B72  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3946  001B74  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3947  001B76  E301               	bnc	u2801
  3948  001B78  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3949  001B7A                     u2801:
  3950  001B7A  5007               	movf	??__tdiv_to_l_,w,c
  3951  001B7C  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3952  001B7E  500F               	movf	__tdiv_to_l_@exp1,w,c
  3953  001B80  A4D8               	btfss	status,2,c
  3954  001B82  D009               	goto	l2310
  3955  001B84  0E00               	movlw	0
  3956  001B86  6E01               	movwf	?__tdiv_to_l_,c
  3957  001B88  0E00               	movlw	0
  3958  001B8A  6E02               	movwf	?__tdiv_to_l_+1,c
  3959  001B8C  0E00               	movlw	0
  3960  001B8E  6E03               	movwf	?__tdiv_to_l_+2,c
  3961  001B90  0E00               	movlw	0
  3962  001B92  6E04               	movwf	?__tdiv_to_l_+3,c
  3963  001B94  0012               	return	
  3964  001B96                     l2310:
  3965  001B96  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3966  001B9A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3967  001B9C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3968  001B9E  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3969  001BA0  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3970  001BA2  E301               	bnc	u2821
  3971  001BA4  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3972  001BA6                     u2821:
  3973  001BA6  5007               	movf	??__tdiv_to_l_,w,c
  3974  001BA8  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3975  001BAA  500E               	movf	__tdiv_to_l_@cntr,w,c
  3976  001BAC  A4D8               	btfss	status,2,c
  3977  001BAE  D009               	goto	l2316
  3978  001BB0  0E00               	movlw	0
  3979  001BB2  6E01               	movwf	?__tdiv_to_l_,c
  3980  001BB4  0E00               	movlw	0
  3981  001BB6  6E02               	movwf	?__tdiv_to_l_+1,c
  3982  001BB8  0E00               	movlw	0
  3983  001BBA  6E03               	movwf	?__tdiv_to_l_+2,c
  3984  001BBC  0E00               	movlw	0
  3985  001BBE  6E04               	movwf	?__tdiv_to_l_+3,c
  3986  001BC0  0012               	return	
  3987  001BC2                     l2316:
  3988  001BC2  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3989  001BC4  0EFF               	movlw	255
  3990  001BC6  1601               	andwf	__tdiv_to_l_@f1,f,c
  3991  001BC8  0EFF               	movlw	255
  3992  001BCA  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3993  001BCC  0E00               	movlw	0
  3994  001BCE  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3995  001BD0  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3996  001BD2  0EFF               	movlw	255
  3997  001BD4  1604               	andwf	__tdiv_to_l_@f2,f,c
  3998  001BD6  0EFF               	movlw	255
  3999  001BD8  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4000  001BDA  0E00               	movlw	0
  4001  001BDC  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4002  001BDE  0E00               	movlw	0
  4003  001BE0  6E0A               	movwf	__tdiv_to_l_@quot,c
  4004  001BE2  0E00               	movlw	0
  4005  001BE4  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4006  001BE6  0E00               	movlw	0
  4007  001BE8  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4008  001BEA  0E00               	movlw	0
  4009  001BEC  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4010  001BEE  0E7F               	movlw	127
  4011  001BF0  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4012  001BF2  500E               	movf	__tdiv_to_l_@cntr,w,c
  4013  001BF4  0F98               	addlw	152
  4014  001BF6  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4015  001BF8  0E18               	movlw	24
  4016  001BFA  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4017  001BFC                     l544:
  4018  001BFC  90D8               	bcf	status,0,c
  4019  001BFE  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4020  001C00  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4021  001C02  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4022  001C04  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4023  001C06  5004               	movf	__tdiv_to_l_@f2,w,c
  4024  001C08  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4025  001C0A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4026  001C0C  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4027  001C0E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4028  001C10  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4029  001C12  A0D8               	btfss	status,0,c
  4030  001C14  D007               	goto	l545
  4031  001C16  5004               	movf	__tdiv_to_l_@f2,w,c
  4032  001C18  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4033  001C1A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4034  001C1C  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4035  001C1E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4036  001C20  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4037  001C22  800A               	bsf	__tdiv_to_l_@quot,0,c
  4038  001C24                     l545:
  4039  001C24  90D8               	bcf	status,0,c
  4040  001C26  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4041  001C28  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4042  001C2A  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4043  001C2C  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4044  001C2E  D7E6               	goto	l544
  4045  001C30  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4046  001C32  D016               	goto	l2350
  4047  001C34  500F               	movf	__tdiv_to_l_@exp1,w,c
  4048  001C36  0A80               	xorlw	128
  4049  001C38  0F97               	addlw	151
  4050  001C3A  B0D8               	btfsc	status,0,c
  4051  001C3C  D009               	goto	l2346
  4052  001C3E  0E00               	movlw	0
  4053  001C40  6E01               	movwf	?__tdiv_to_l_,c
  4054  001C42  0E00               	movlw	0
  4055  001C44  6E02               	movwf	?__tdiv_to_l_+1,c
  4056  001C46  0E00               	movlw	0
  4057  001C48  6E03               	movwf	?__tdiv_to_l_+2,c
  4058  001C4A  0E00               	movlw	0
  4059  001C4C  6E04               	movwf	?__tdiv_to_l_+3,c
  4060  001C4E  0012               	return	
  4061  001C50                     l2346:
  4062  001C50  90D8               	bcf	status,0,c
  4063  001C52  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4064  001C54  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4065  001C56  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4066  001C58  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4067  001C5A  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4068  001C5C  D7F9               	goto	l2346
  4069  001C5E  D015               	goto	l551
  4070  001C60                     l2350:
  4071  001C60  0E17               	movlw	23
  4072  001C62  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4073  001C64  D00F               	goto	l2358
  4074  001C66  0E00               	movlw	0
  4075  001C68  6E01               	movwf	?__tdiv_to_l_,c
  4076  001C6A  0E00               	movlw	0
  4077  001C6C  6E02               	movwf	?__tdiv_to_l_+1,c
  4078  001C6E  0E00               	movlw	0
  4079  001C70  6E03               	movwf	?__tdiv_to_l_+2,c
  4080  001C72  0E00               	movlw	0
  4081  001C74  6E04               	movwf	?__tdiv_to_l_+3,c
  4082  001C76  0012               	return	
  4083  001C78                     l2356:
  4084  001C78  90D8               	bcf	status,0,c
  4085  001C7A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4086  001C7C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4087  001C7E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4088  001C80  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4089  001C82  060F               	decf	__tdiv_to_l_@exp1,f,c
  4090  001C84                     l2358:
  4091  001C84  500F               	movf	__tdiv_to_l_@exp1,w,c
  4092  001C86  A4D8               	btfss	status,2,c
  4093  001C88  D7F7               	goto	l2356
  4094  001C8A                     l551:
  4095  001C8A  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4096  001C8E  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4097  001C92  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4098  001C96  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4099  001C9A  0012               	return		;funcret
  4100  001C9C                     __end_of__tdiv_to_l_:
  4101                           	opt stack 0
  4102                           tblptru	equ	0xFF8
  4103                           tblptrh	equ	0xFF7
  4104                           tblptrl	equ	0xFF6
  4105                           tablat	equ	0xFF5
  4106                           prodh	equ	0xFF4
  4107                           prodl	equ	0xFF3
  4108                           wreg	equ	0xFE8
  4109                           indf2	equ	0xFDF
  4110                           postinc2	equ	0xFDE
  4111                           postdec2	equ	0xFDD
  4112                           fsr2h	equ	0xFDA
  4113                           fsr2l	equ	0xFD9
  4114                           status	equ	0xFD8
  4115                           
  4116 ;; *************** function __div_to_l_ *****************
  4117 ;; Defined at:
  4118 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  f1              3    0[COMRAM] unsigned long 
  4121 ;;  f2              3    3[COMRAM] unsigned long 
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;  quot            4    6[COMRAM] unsigned long 
  4124 ;;  exp1            1   11[COMRAM] unsigned char 
  4125 ;;  cntr            1   10[COMRAM] unsigned char 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  4    0[COMRAM] unsigned long 
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4135 ;;      Params:         6       0       0       0       0       0       0       0       0
  4136 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4137 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4138 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4139 ;;Total ram usage:       12 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; This function calls:
  4142 ;;		Nothing
  4143 ;; This function is called by:
  4144 ;;		_sprintf
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           	psect	text10
  4149  001C9C                     __ptext10:
  4150                           	opt stack 0
  4151  001C9C                     __div_to_l_:
  4152                           	opt stack 29
  4153                           
  4154                           ;incstack = 0
  4155  001C9C  3403               	rlcf	__div_to_l_@f1+2,w,c
  4156  001C9E  3404               	rlcf	__div_to_l_@f1+3,w,c
  4157  001CA0  6E0C               	movwf	__div_to_l_@exp1,c
  4158  001CA2  500C               	movf	__div_to_l_@exp1,w,c
  4159  001CA4  A4D8               	btfss	status,2,c
  4160  001CA6  D009               	goto	l2366
  4161  001CA8  0E00               	movlw	0
  4162  001CAA  6E01               	movwf	?__div_to_l_,c
  4163  001CAC  0E00               	movlw	0
  4164  001CAE  6E02               	movwf	?__div_to_l_+1,c
  4165  001CB0  0E00               	movlw	0
  4166  001CB2  6E03               	movwf	?__div_to_l_+2,c
  4167  001CB4  0E00               	movlw	0
  4168  001CB6  6E04               	movwf	?__div_to_l_+3,c
  4169  001CB8  0012               	return	
  4170  001CBA                     l2366:
  4171  001CBA  3406               	rlcf	__div_to_l_@f2+2,w,c
  4172  001CBC  3407               	rlcf	__div_to_l_@f2+3,w,c
  4173  001CBE  6E0B               	movwf	__div_to_l_@cntr,c
  4174  001CC0  500B               	movf	__div_to_l_@cntr,w,c
  4175  001CC2  A4D8               	btfss	status,2,c
  4176  001CC4  D009               	goto	l2372
  4177  001CC6  0E00               	movlw	0
  4178  001CC8  6E01               	movwf	?__div_to_l_,c
  4179  001CCA  0E00               	movlw	0
  4180  001CCC  6E02               	movwf	?__div_to_l_+1,c
  4181  001CCE  0E00               	movlw	0
  4182  001CD0  6E03               	movwf	?__div_to_l_+2,c
  4183  001CD2  0E00               	movlw	0
  4184  001CD4  6E04               	movwf	?__div_to_l_+3,c
  4185  001CD6  0012               	return	
  4186  001CD8                     l2372:
  4187  001CD8  8E03               	bsf	__div_to_l_@f1+2,7,c
  4188  001CDA  0EFF               	movlw	255
  4189  001CDC  1601               	andwf	__div_to_l_@f1,f,c
  4190  001CDE  0EFF               	movlw	255
  4191  001CE0  1602               	andwf	__div_to_l_@f1+1,f,c
  4192  001CE2  0EFF               	movlw	255
  4193  001CE4  1603               	andwf	__div_to_l_@f1+2,f,c
  4194  001CE6  0E00               	movlw	0
  4195  001CE8  1604               	andwf	__div_to_l_@f1+3,f,c
  4196  001CEA  8E06               	bsf	__div_to_l_@f2+2,7,c
  4197  001CEC  0EFF               	movlw	255
  4198  001CEE  1604               	andwf	__div_to_l_@f2,f,c
  4199  001CF0  0EFF               	movlw	255
  4200  001CF2  1605               	andwf	__div_to_l_@f2+1,f,c
  4201  001CF4  0EFF               	movlw	255
  4202  001CF6  1606               	andwf	__div_to_l_@f2+2,f,c
  4203  001CF8  0E00               	movlw	0
  4204  001CFA  1607               	andwf	__div_to_l_@f2+3,f,c
  4205  001CFC  0E00               	movlw	0
  4206  001CFE  6E07               	movwf	__div_to_l_@quot,c
  4207  001D00  0E00               	movlw	0
  4208  001D02  6E08               	movwf	__div_to_l_@quot+1,c
  4209  001D04  0E00               	movlw	0
  4210  001D06  6E09               	movwf	__div_to_l_@quot+2,c
  4211  001D08  0E00               	movlw	0
  4212  001D0A  6E0A               	movwf	__div_to_l_@quot+3,c
  4213  001D0C  0E7F               	movlw	127
  4214  001D0E  5E0C               	subwf	__div_to_l_@exp1,f,c
  4215  001D10  500B               	movf	__div_to_l_@cntr,w,c
  4216  001D12  0FA0               	addlw	160
  4217  001D14  5E0C               	subwf	__div_to_l_@exp1,f,c
  4218  001D16  0E20               	movlw	32
  4219  001D18  6E0B               	movwf	__div_to_l_@cntr,c
  4220  001D1A                     l2386:
  4221  001D1A  90D8               	bcf	status,0,c
  4222  001D1C  3607               	rlcf	__div_to_l_@quot,f,c
  4223  001D1E  3608               	rlcf	__div_to_l_@quot+1,f,c
  4224  001D20  3609               	rlcf	__div_to_l_@quot+2,f,c
  4225  001D22  360A               	rlcf	__div_to_l_@quot+3,f,c
  4226  001D24  5004               	movf	__div_to_l_@f2,w,c
  4227  001D26  5C01               	subwf	__div_to_l_@f1,w,c
  4228  001D28  5005               	movf	__div_to_l_@f2+1,w,c
  4229  001D2A  5802               	subwfb	__div_to_l_@f1+1,w,c
  4230  001D2C  5006               	movf	__div_to_l_@f2+2,w,c
  4231  001D2E  5803               	subwfb	__div_to_l_@f1+2,w,c
  4232  001D30  5007               	movf	__div_to_l_@f2+3,w,c
  4233  001D32  5804               	subwfb	__div_to_l_@f1+3,w,c
  4234  001D34  A0D8               	btfss	status,0,c
  4235  001D36  D009               	goto	l2394
  4236  001D38  5004               	movf	__div_to_l_@f2,w,c
  4237  001D3A  5E01               	subwf	__div_to_l_@f1,f,c
  4238  001D3C  5005               	movf	__div_to_l_@f2+1,w,c
  4239  001D3E  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4240  001D40  5006               	movf	__div_to_l_@f2+2,w,c
  4241  001D42  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4242  001D44  5007               	movf	__div_to_l_@f2+3,w,c
  4243  001D46  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4244  001D48  8007               	bsf	__div_to_l_@quot,0,c
  4245  001D4A                     l2394:
  4246  001D4A  90D8               	bcf	status,0,c
  4247  001D4C  3601               	rlcf	__div_to_l_@f1,f,c
  4248  001D4E  3602               	rlcf	__div_to_l_@f1+1,f,c
  4249  001D50  3603               	rlcf	__div_to_l_@f1+2,f,c
  4250  001D52  3604               	rlcf	__div_to_l_@f1+3,f,c
  4251  001D54  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4252  001D56  D7E1               	goto	l2386
  4253  001D58  AE0C               	btfss	__div_to_l_@exp1,7,c
  4254  001D5A  D016               	goto	l2410
  4255  001D5C  500C               	movf	__div_to_l_@exp1,w,c
  4256  001D5E  0A80               	xorlw	128
  4257  001D60  0F9F               	addlw	159
  4258  001D62  B0D8               	btfsc	status,0,c
  4259  001D64  D009               	goto	l2406
  4260  001D66  0E00               	movlw	0
  4261  001D68  6E01               	movwf	?__div_to_l_,c
  4262  001D6A  0E00               	movlw	0
  4263  001D6C  6E02               	movwf	?__div_to_l_+1,c
  4264  001D6E  0E00               	movlw	0
  4265  001D70  6E03               	movwf	?__div_to_l_+2,c
  4266  001D72  0E00               	movlw	0
  4267  001D74  6E04               	movwf	?__div_to_l_+3,c
  4268  001D76  0012               	return	
  4269  001D78                     l2406:
  4270  001D78  90D8               	bcf	status,0,c
  4271  001D7A  320A               	rrcf	__div_to_l_@quot+3,f,c
  4272  001D7C  3209               	rrcf	__div_to_l_@quot+2,f,c
  4273  001D7E  3208               	rrcf	__div_to_l_@quot+1,f,c
  4274  001D80  3207               	rrcf	__div_to_l_@quot,f,c
  4275  001D82  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4276  001D84  D7F9               	goto	l2406
  4277  001D86  D015               	goto	l447
  4278  001D88                     l2410:
  4279  001D88  0E1F               	movlw	31
  4280  001D8A  640C               	cpfsgt	__div_to_l_@exp1,c
  4281  001D8C  D00F               	goto	l2418
  4282  001D8E  0E00               	movlw	0
  4283  001D90  6E01               	movwf	?__div_to_l_,c
  4284  001D92  0E00               	movlw	0
  4285  001D94  6E02               	movwf	?__div_to_l_+1,c
  4286  001D96  0E00               	movlw	0
  4287  001D98  6E03               	movwf	?__div_to_l_+2,c
  4288  001D9A  0E00               	movlw	0
  4289  001D9C  6E04               	movwf	?__div_to_l_+3,c
  4290  001D9E  0012               	return	
  4291  001DA0                     l2416:
  4292  001DA0  90D8               	bcf	status,0,c
  4293  001DA2  3607               	rlcf	__div_to_l_@quot,f,c
  4294  001DA4  3608               	rlcf	__div_to_l_@quot+1,f,c
  4295  001DA6  3609               	rlcf	__div_to_l_@quot+2,f,c
  4296  001DA8  360A               	rlcf	__div_to_l_@quot+3,f,c
  4297  001DAA  060C               	decf	__div_to_l_@exp1,f,c
  4298  001DAC                     l2418:
  4299  001DAC  500C               	movf	__div_to_l_@exp1,w,c
  4300  001DAE  A4D8               	btfss	status,2,c
  4301  001DB0  D7F7               	goto	l2416
  4302  001DB2                     l447:
  4303  001DB2  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4304  001DB6  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4305  001DBA  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4306  001DBE  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4307  001DC2  0012               	return		;funcret
  4308  001DC4                     __end_of__div_to_l_:
  4309                           	opt stack 0
  4310                           tblptru	equ	0xFF8
  4311                           tblptrh	equ	0xFF7
  4312                           tblptrl	equ	0xFF6
  4313                           tablat	equ	0xFF5
  4314                           prodh	equ	0xFF4
  4315                           prodl	equ	0xFF3
  4316                           wreg	equ	0xFE8
  4317                           indf2	equ	0xFDF
  4318                           postinc2	equ	0xFDE
  4319                           postdec2	equ	0xFDD
  4320                           fsr2h	equ	0xFDA
  4321                           fsr2l	equ	0xFD9
  4322                           status	equ	0xFD8
  4323                           
  4324 ;; *************** function ___lltoft *****************
  4325 ;; Defined at:
  4326 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  c               4    8[COMRAM] unsigned long 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  exp             1   16[COMRAM] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  3    8[COMRAM] float 
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4340 ;;      Params:         4       0       0       0       0       0       0       0       0
  4341 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4342 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4343 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4344 ;;Total ram usage:        9 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    1
  4347 ;; This function calls:
  4348 ;;		___ftpack
  4349 ;; This function is called by:
  4350 ;;		_sprintf
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text11
  4355  00265C                     __ptext11:
  4356                           	opt stack 0
  4357  00265C                     ___lltoft:
  4358                           	opt stack 28
  4359                           
  4360                           ;incstack = 0
  4361  00265C  0E8E               	movlw	142
  4362  00265E  6E11               	movwf	___lltoft@exp,c
  4363  002660  D006               	goto	l2538
  4364  002662                     l2536:
  4365  002662  90D8               	bcf	status,0,c
  4366  002664  320C               	rrcf	___lltoft@c+3,f,c
  4367  002666  320B               	rrcf	___lltoft@c+2,f,c
  4368  002668  320A               	rrcf	___lltoft@c+1,f,c
  4369  00266A  3209               	rrcf	___lltoft@c,f,c
  4370  00266C  2A11               	incf	___lltoft@exp,f,c
  4371  00266E                     l2538:
  4372  00266E  0E00               	movlw	0
  4373  002670  1409               	andwf	___lltoft@c,w,c
  4374  002672  6E0D               	movwf	??___lltoft& (0+255),c
  4375  002674  0E00               	movlw	0
  4376  002676  140A               	andwf	___lltoft@c+1,w,c
  4377  002678  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4378  00267A  0E00               	movlw	0
  4379  00267C  140B               	andwf	___lltoft@c+2,w,c
  4380  00267E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4381  002680  0EFF               	movlw	255
  4382  002682  140C               	andwf	___lltoft@c+3,w,c
  4383  002684  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4384  002686  500D               	movf	??___lltoft,w,c
  4385  002688  100E               	iorwf	??___lltoft+1,w,c
  4386  00268A  100F               	iorwf	??___lltoft+2,w,c
  4387  00268C  1010               	iorwf	??___lltoft+3,w,c
  4388  00268E  A4D8               	btfss	status,2,c
  4389  002690  D7E8               	goto	l2536
  4390  002692  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4391  002696  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4392  00269A  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4393  00269E  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4394  0026A2  0E00               	movlw	0
  4395  0026A4  6E05               	movwf	___ftpack@sign,c
  4396  0026A6  EC59  F011         	call	___ftpack	;wreg free
  4397  0026AA  C001  F009         	movff	?___ftpack,?___lltoft
  4398  0026AE  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4399  0026B2  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4400  0026B6  0012               	return	
  4401  0026B8                     __end_of___lltoft:
  4402                           	opt stack 0
  4403                           tblptru	equ	0xFF8
  4404                           tblptrh	equ	0xFF7
  4405                           tblptrl	equ	0xFF6
  4406                           tablat	equ	0xFF5
  4407                           prodh	equ	0xFF4
  4408                           prodl	equ	0xFF3
  4409                           wreg	equ	0xFE8
  4410                           indf2	equ	0xFDF
  4411                           postinc2	equ	0xFDE
  4412                           postdec2	equ	0xFDD
  4413                           fsr2h	equ	0xFDA
  4414                           fsr2l	equ	0xFD9
  4415                           status	equ	0xFD8
  4416                           
  4417 ;; *************** function ___llmod *****************
  4418 ;; Defined at:
  4419 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;  dividend        4    0[COMRAM] unsigned long 
  4422 ;;  divisor         4    4[COMRAM] unsigned long 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  counter         1    8[COMRAM] unsigned char 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  4    0[COMRAM] unsigned long 
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4434 ;;      Params:         8       0       0       0       0       0       0       0       0
  4435 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4436 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4437 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4438 ;;Total ram usage:        9 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; This function calls:
  4441 ;;		Nothing
  4442 ;; This function is called by:
  4443 ;;		_sprintf
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text12
  4448  0025F6                     __ptext12:
  4449                           	opt stack 0
  4450  0025F6                     ___llmod:
  4451                           	opt stack 29
  4452                           
  4453                           ;incstack = 0
  4454  0025F6  5005               	movf	___llmod@divisor,w,c
  4455  0025F8  1006               	iorwf	___llmod@divisor+1,w,c
  4456  0025FA  1007               	iorwf	___llmod@divisor+2,w,c
  4457  0025FC  1008               	iorwf	___llmod@divisor+3,w,c
  4458  0025FE  B4D8               	btfsc	status,2,c
  4459  002600  D024               	goto	l636
  4460  002602  0E01               	movlw	1
  4461  002604  6E09               	movwf	___llmod@counter,c
  4462  002606  D006               	goto	l2524
  4463  002608                     l2522:
  4464  002608  90D8               	bcf	status,0,c
  4465  00260A  3605               	rlcf	___llmod@divisor,f,c
  4466  00260C  3606               	rlcf	___llmod@divisor+1,f,c
  4467  00260E  3607               	rlcf	___llmod@divisor+2,f,c
  4468  002610  3608               	rlcf	___llmod@divisor+3,f,c
  4469  002612  2A09               	incf	___llmod@counter,f,c
  4470  002614                     l2524:
  4471  002614  AE08               	btfss	___llmod@divisor+3,7,c
  4472  002616  D7F8               	goto	l2522
  4473  002618                     l2526:
  4474  002618  5005               	movf	___llmod@divisor,w,c
  4475  00261A  5C01               	subwf	___llmod@dividend,w,c
  4476  00261C  5006               	movf	___llmod@divisor+1,w,c
  4477  00261E  5802               	subwfb	___llmod@dividend+1,w,c
  4478  002620  5007               	movf	___llmod@divisor+2,w,c
  4479  002622  5803               	subwfb	___llmod@dividend+2,w,c
  4480  002624  5008               	movf	___llmod@divisor+3,w,c
  4481  002626  5804               	subwfb	___llmod@dividend+3,w,c
  4482  002628  A0D8               	btfss	status,0,c
  4483  00262A  D008               	goto	l2530
  4484  00262C  5005               	movf	___llmod@divisor,w,c
  4485  00262E  5E01               	subwf	___llmod@dividend,f,c
  4486  002630  5006               	movf	___llmod@divisor+1,w,c
  4487  002632  5A02               	subwfb	___llmod@dividend+1,f,c
  4488  002634  5007               	movf	___llmod@divisor+2,w,c
  4489  002636  5A03               	subwfb	___llmod@dividend+2,f,c
  4490  002638  5008               	movf	___llmod@divisor+3,w,c
  4491  00263A  5A04               	subwfb	___llmod@dividend+3,f,c
  4492  00263C                     l2530:
  4493  00263C  90D8               	bcf	status,0,c
  4494  00263E  3208               	rrcf	___llmod@divisor+3,f,c
  4495  002640  3207               	rrcf	___llmod@divisor+2,f,c
  4496  002642  3206               	rrcf	___llmod@divisor+1,f,c
  4497  002644  3205               	rrcf	___llmod@divisor,f,c
  4498  002646  2E09               	decfsz	___llmod@counter,f,c
  4499  002648  D7E7               	goto	l2526
  4500  00264A                     l636:
  4501  00264A  C001  F001         	movff	___llmod@dividend,?___llmod
  4502  00264E  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4503  002652  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4504  002656  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4505  00265A  0012               	return		;funcret
  4506  00265C                     __end_of___llmod:
  4507                           	opt stack 0
  4508                           tblptru	equ	0xFF8
  4509                           tblptrh	equ	0xFF7
  4510                           tblptrl	equ	0xFF6
  4511                           tablat	equ	0xFF5
  4512                           prodh	equ	0xFF4
  4513                           prodl	equ	0xFF3
  4514                           wreg	equ	0xFE8
  4515                           indf2	equ	0xFDF
  4516                           postinc2	equ	0xFDE
  4517                           postdec2	equ	0xFDD
  4518                           fsr2h	equ	0xFDA
  4519                           fsr2l	equ	0xFD9
  4520                           status	equ	0xFD8
  4521                           
  4522 ;; *************** function ___lldiv *****************
  4523 ;; Defined at:
  4524 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  dividend        4    0[COMRAM] unsigned long 
  4527 ;;  divisor         4    4[COMRAM] unsigned long 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  quotient        4    8[COMRAM] unsigned long 
  4530 ;;  counter         1   12[COMRAM] unsigned char 
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  4    0[COMRAM] unsigned long 
  4533 ;; Registers used:
  4534 ;;		wreg, status,2, status,0
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4540 ;;      Params:         8       0       0       0       0       0       0       0       0
  4541 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4543 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4544 ;;Total ram usage:       13 bytes
  4545 ;; Hardware stack levels used:    1
  4546 ;; This function calls:
  4547 ;;		Nothing
  4548 ;; This function is called by:
  4549 ;;		_sprintf
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text13
  4554  002504                     __ptext13:
  4555                           	opt stack 0
  4556  002504                     ___lldiv:
  4557                           	opt stack 29
  4558                           
  4559                           ;incstack = 0
  4560  002504  0E00               	movlw	0
  4561  002506  6E09               	movwf	___lldiv@quotient,c
  4562  002508  0E00               	movlw	0
  4563  00250A  6E0A               	movwf	___lldiv@quotient+1,c
  4564  00250C  0E00               	movlw	0
  4565  00250E  6E0B               	movwf	___lldiv@quotient+2,c
  4566  002510  0E00               	movlw	0
  4567  002512  6E0C               	movwf	___lldiv@quotient+3,c
  4568  002514  5005               	movf	___lldiv@divisor,w,c
  4569  002516  1006               	iorwf	___lldiv@divisor+1,w,c
  4570  002518  1007               	iorwf	___lldiv@divisor+2,w,c
  4571  00251A  1008               	iorwf	___lldiv@divisor+3,w,c
  4572  00251C  B4D8               	btfsc	status,2,c
  4573  00251E  D02A               	goto	l626
  4574  002520  0E01               	movlw	1
  4575  002522  6E0D               	movwf	___lldiv@counter,c
  4576  002524  D006               	goto	l2504
  4577  002526                     l2502:
  4578  002526  90D8               	bcf	status,0,c
  4579  002528  3605               	rlcf	___lldiv@divisor,f,c
  4580  00252A  3606               	rlcf	___lldiv@divisor+1,f,c
  4581  00252C  3607               	rlcf	___lldiv@divisor+2,f,c
  4582  00252E  3608               	rlcf	___lldiv@divisor+3,f,c
  4583  002530  2A0D               	incf	___lldiv@counter,f,c
  4584  002532                     l2504:
  4585  002532  AE08               	btfss	___lldiv@divisor+3,7,c
  4586  002534  D7F8               	goto	l2502
  4587  002536                     l2506:
  4588  002536  90D8               	bcf	status,0,c
  4589  002538  3609               	rlcf	___lldiv@quotient,f,c
  4590  00253A  360A               	rlcf	___lldiv@quotient+1,f,c
  4591  00253C  360B               	rlcf	___lldiv@quotient+2,f,c
  4592  00253E  360C               	rlcf	___lldiv@quotient+3,f,c
  4593  002540  5005               	movf	___lldiv@divisor,w,c
  4594  002542  5C01               	subwf	___lldiv@dividend,w,c
  4595  002544  5006               	movf	___lldiv@divisor+1,w,c
  4596  002546  5802               	subwfb	___lldiv@dividend+1,w,c
  4597  002548  5007               	movf	___lldiv@divisor+2,w,c
  4598  00254A  5803               	subwfb	___lldiv@dividend+2,w,c
  4599  00254C  5008               	movf	___lldiv@divisor+3,w,c
  4600  00254E  5804               	subwfb	___lldiv@dividend+3,w,c
  4601  002550  A0D8               	btfss	status,0,c
  4602  002552  D009               	goto	l2514
  4603  002554  5005               	movf	___lldiv@divisor,w,c
  4604  002556  5E01               	subwf	___lldiv@dividend,f,c
  4605  002558  5006               	movf	___lldiv@divisor+1,w,c
  4606  00255A  5A02               	subwfb	___lldiv@dividend+1,f,c
  4607  00255C  5007               	movf	___lldiv@divisor+2,w,c
  4608  00255E  5A03               	subwfb	___lldiv@dividend+2,f,c
  4609  002560  5008               	movf	___lldiv@divisor+3,w,c
  4610  002562  5A04               	subwfb	___lldiv@dividend+3,f,c
  4611  002564  8009               	bsf	___lldiv@quotient,0,c
  4612  002566                     l2514:
  4613  002566  90D8               	bcf	status,0,c
  4614  002568  3208               	rrcf	___lldiv@divisor+3,f,c
  4615  00256A  3207               	rrcf	___lldiv@divisor+2,f,c
  4616  00256C  3206               	rrcf	___lldiv@divisor+1,f,c
  4617  00256E  3205               	rrcf	___lldiv@divisor,f,c
  4618  002570  2E0D               	decfsz	___lldiv@counter,f,c
  4619  002572  D7E1               	goto	l2506
  4620  002574                     l626:
  4621  002574  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4622  002578  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4623  00257C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4624  002580  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4625  002584  0012               	return		;funcret
  4626  002586                     __end_of___lldiv:
  4627                           	opt stack 0
  4628                           tblptru	equ	0xFF8
  4629                           tblptrh	equ	0xFF7
  4630                           tblptrl	equ	0xFF6
  4631                           tablat	equ	0xFF5
  4632                           prodh	equ	0xFF4
  4633                           prodl	equ	0xFF3
  4634                           wreg	equ	0xFE8
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function ___fttol *****************
  4643 ;; Defined at:
  4644 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;  f1              3   42[COMRAM] float 
  4647 ;; Auto vars:     Size  Location     Type
  4648 ;;  lval            4   52[COMRAM] unsigned long 
  4649 ;;  exp1            1   56[COMRAM] unsigned char 
  4650 ;;  sign1           1   51[COMRAM] unsigned char 
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  4   42[COMRAM] long 
  4653 ;; Registers used:
  4654 ;;		wreg, status,2, status,0
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4660 ;;      Params:         4       0       0       0       0       0       0       0       0
  4661 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4662 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4663 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4664 ;;Total ram usage:       15 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; This function calls:
  4667 ;;		Nothing
  4668 ;; This function is called by:
  4669 ;;		_sprintf
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text14
  4674  0020CC                     __ptext14:
  4675                           	opt stack 0
  4676  0020CC                     ___fttol:
  4677                           	opt stack 29
  4678                           
  4679                           ;incstack = 0
  4680  0020CC  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4681  0020D0  6A30               	clrf	(??___fttol+1)& (0+255),c
  4682  0020D2  6A31               	clrf	(??___fttol+2)& (0+255),c
  4683  0020D4  342C               	rlcf	___fttol@f1+1,w,c
  4684  0020D6  362F               	rlcf	??___fttol& (0+255),f,c
  4685  0020D8  E301               	bnc	u3011
  4686  0020DA  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4687  0020DC                     u3011:
  4688  0020DC  502F               	movf	??___fttol,w,c
  4689  0020DE  6E39               	movwf	___fttol@exp1,c
  4690  0020E0  5039               	movf	___fttol@exp1,w,c
  4691  0020E2  A4D8               	btfss	status,2,c
  4692  0020E4  D009               	goto	l2456
  4693  0020E6  0E00               	movlw	0
  4694  0020E8  6E2B               	movwf	?___fttol,c
  4695  0020EA  0E00               	movlw	0
  4696  0020EC  6E2C               	movwf	?___fttol+1,c
  4697  0020EE  0E00               	movlw	0
  4698  0020F0  6E2D               	movwf	?___fttol+2,c
  4699  0020F2  0E00               	movlw	0
  4700  0020F4  6E2E               	movwf	?___fttol+3,c
  4701  0020F6  0012               	return	
  4702  0020F8                     l2456:
  4703  0020F8  0E17               	movlw	23
  4704  0020FA  6E2F               	movwf	??___fttol& (0+255),c
  4705  0020FC  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4706  002100  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4707  002104  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4708  002108  282F               	incf	??___fttol,w,c
  4709  00210A  6E33               	movwf	(??___fttol+4)& (0+255),c
  4710  00210C  D004               	goto	u3030
  4711  00210E                     u3035:
  4712  00210E  90D8               	bcf	status,0,c
  4713  002110  3232               	rrcf	??___fttol+3,f,c
  4714  002112  3231               	rrcf	??___fttol+2,f,c
  4715  002114  3230               	rrcf	??___fttol+1,f,c
  4716  002116                     u3030:
  4717  002116  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4718  002118  D7FA               	goto	u3035
  4719  00211A  5030               	movf	??___fttol+1,w,c
  4720  00211C  6E34               	movwf	___fttol@sign1,c
  4721  00211E  8E2C               	bsf	___fttol@f1+1,7,c
  4722  002120  0EFF               	movlw	255
  4723  002122  162B               	andwf	___fttol@f1,f,c
  4724  002124  0EFF               	movlw	255
  4725  002126  162C               	andwf	___fttol@f1+1,f,c
  4726  002128  0E00               	movlw	0
  4727  00212A  162D               	andwf	___fttol@f1+2,f,c
  4728  00212C  502B               	movf	___fttol@f1,w,c
  4729  00212E  6E35               	movwf	___fttol@lval,c
  4730  002130  502C               	movf	___fttol@f1+1,w,c
  4731  002132  6E36               	movwf	___fttol@lval+1,c
  4732  002134  502D               	movf	___fttol@f1+2,w,c
  4733  002136  6E37               	movwf	___fttol@lval+2,c
  4734  002138  6A38               	clrf	___fttol@lval+3,c
  4735  00213A  0E8E               	movlw	142
  4736  00213C  5E39               	subwf	___fttol@exp1,f,c
  4737  00213E  AE39               	btfss	___fttol@exp1,7,c
  4738  002140  D016               	goto	l2478
  4739  002142  5039               	movf	___fttol@exp1,w,c
  4740  002144  0A80               	xorlw	128
  4741  002146  0F8F               	addlw	143
  4742  002148  B0D8               	btfsc	status,0,c
  4743  00214A  D009               	goto	l2474
  4744  00214C  0E00               	movlw	0
  4745  00214E  6E2B               	movwf	?___fttol,c
  4746  002150  0E00               	movlw	0
  4747  002152  6E2C               	movwf	?___fttol+1,c
  4748  002154  0E00               	movlw	0
  4749  002156  6E2D               	movwf	?___fttol+2,c
  4750  002158  0E00               	movlw	0
  4751  00215A  6E2E               	movwf	?___fttol+3,c
  4752  00215C  0012               	return	
  4753  00215E                     l2474:
  4754  00215E  90D8               	bcf	status,0,c
  4755  002160  3238               	rrcf	___fttol@lval+3,f,c
  4756  002162  3237               	rrcf	___fttol@lval+2,f,c
  4757  002164  3236               	rrcf	___fttol@lval+1,f,c
  4758  002166  3235               	rrcf	___fttol@lval,f,c
  4759  002168  3E39               	incfsz	___fttol@exp1,f,c
  4760  00216A  D7F9               	goto	l2474
  4761  00216C  D015               	goto	l2488
  4762  00216E                     l2478:
  4763  00216E  0E17               	movlw	23
  4764  002170  6439               	cpfsgt	___fttol@exp1,c
  4765  002172  D00F               	goto	l2486
  4766  002174  0E00               	movlw	0
  4767  002176  6E2B               	movwf	?___fttol,c
  4768  002178  0E00               	movlw	0
  4769  00217A  6E2C               	movwf	?___fttol+1,c
  4770  00217C  0E00               	movlw	0
  4771  00217E  6E2D               	movwf	?___fttol+2,c
  4772  002180  0E00               	movlw	0
  4773  002182  6E2E               	movwf	?___fttol+3,c
  4774  002184  0012               	return	
  4775  002186                     l2484:
  4776  002186  90D8               	bcf	status,0,c
  4777  002188  3635               	rlcf	___fttol@lval,f,c
  4778  00218A  3636               	rlcf	___fttol@lval+1,f,c
  4779  00218C  3637               	rlcf	___fttol@lval+2,f,c
  4780  00218E  3638               	rlcf	___fttol@lval+3,f,c
  4781  002190  0639               	decf	___fttol@exp1,f,c
  4782  002192                     l2486:
  4783  002192  5039               	movf	___fttol@exp1,w,c
  4784  002194  A4D8               	btfss	status,2,c
  4785  002196  D7F7               	goto	l2484
  4786  002198                     l2488:
  4787  002198  5034               	movf	___fttol@sign1,w,c
  4788  00219A  B4D8               	btfsc	status,2,c
  4789  00219C  D008               	goto	l2492
  4790  00219E  1E38               	comf	___fttol@lval+3,f,c
  4791  0021A0  1E37               	comf	___fttol@lval+2,f,c
  4792  0021A2  1E36               	comf	___fttol@lval+1,f,c
  4793  0021A4  6C35               	negf	___fttol@lval,c
  4794  0021A6  0E00               	movlw	0
  4795  0021A8  2236               	addwfc	___fttol@lval+1,f,c
  4796  0021AA  2237               	addwfc	___fttol@lval+2,f,c
  4797  0021AC  2238               	addwfc	___fttol@lval+3,f,c
  4798  0021AE                     l2492:
  4799  0021AE  C035  F02B         	movff	___fttol@lval,?___fttol
  4800  0021B2  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4801  0021B6  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4802  0021BA  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4803  0021BE  0012               	return	
  4804  0021C0                     __end_of___fttol:
  4805                           	opt stack 0
  4806                           tblptru	equ	0xFF8
  4807                           tblptrh	equ	0xFF7
  4808                           tblptrl	equ	0xFF6
  4809                           tablat	equ	0xFF5
  4810                           prodh	equ	0xFF4
  4811                           prodl	equ	0xFF3
  4812                           wreg	equ	0xFE8
  4813                           indf2	equ	0xFDF
  4814                           postinc2	equ	0xFDE
  4815                           postdec2	equ	0xFDD
  4816                           fsr2h	equ	0xFDA
  4817                           fsr2l	equ	0xFD9
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function ___ftsub *****************
  4821 ;; Defined at:
  4822 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  f1              3   57[COMRAM] float 
  4825 ;;  f2              3   60[COMRAM] float 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  3   57[COMRAM] float 
  4830 ;; Registers used:
  4831 ;;		wreg, status,2, status,0, cstack
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4837 ;;      Params:         6       0       0       0       0       0       0       0       0
  4838 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4839 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4840 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4841 ;;Total ram usage:        6 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    2
  4844 ;; This function calls:
  4845 ;;		___ftadd
  4846 ;; This function is called by:
  4847 ;;		_sprintf
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           	psect	text15
  4852  0026B8                     __ptext15:
  4853                           	opt stack 0
  4854  0026B8                     ___ftsub:
  4855                           	opt stack 27
  4856                           
  4857                           ;incstack = 0
  4858  0026B8  503D               	movf	___ftsub@f2,w,c
  4859  0026BA  103E               	iorwf	___ftsub@f2+1,w,c
  4860  0026BC  103F               	iorwf	___ftsub@f2+2,w,c
  4861  0026BE  B4D8               	btfsc	status,2,c
  4862  0026C0  D006               	goto	l2424
  4863  0026C2  0E00               	movlw	0
  4864  0026C4  1A3D               	xorwf	___ftsub@f2,f,c
  4865  0026C6  0E00               	movlw	0
  4866  0026C8  1A3E               	xorwf	___ftsub@f2+1,f,c
  4867  0026CA  0E80               	movlw	128
  4868  0026CC  1A3F               	xorwf	___ftsub@f2+2,f,c
  4869  0026CE                     l2424:
  4870  0026CE  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4871  0026D2  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4872  0026D6  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4873  0026DA  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4874  0026DE  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4875  0026E2  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4876  0026E6  EC3D  F00C         	call	___ftadd	;wreg free
  4877  0026EA  C02E  F03A         	movff	?___ftadd,?___ftsub
  4878  0026EE  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4879  0026F2  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4880  0026F6  0012               	return	
  4881  0026F8                     __end_of___ftsub:
  4882                           	opt stack 0
  4883                           tblptru	equ	0xFF8
  4884                           tblptrh	equ	0xFF7
  4885                           tblptrl	equ	0xFF6
  4886                           tablat	equ	0xFF5
  4887                           prodh	equ	0xFF4
  4888                           prodl	equ	0xFF3
  4889                           wreg	equ	0xFE8
  4890                           indf2	equ	0xFDF
  4891                           postinc2	equ	0xFDE
  4892                           postdec2	equ	0xFDD
  4893                           fsr2h	equ	0xFDA
  4894                           fsr2l	equ	0xFD9
  4895                           status	equ	0xFD8
  4896                           
  4897 ;; *************** function ___ftadd *****************
  4898 ;; Defined at:
  4899 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;  f1              3   45[COMRAM] float 
  4902 ;;  f2              3   48[COMRAM] float 
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;  exp1            1   56[COMRAM] unsigned char 
  4905 ;;  exp2            1   55[COMRAM] unsigned char 
  4906 ;;  sign            1   54[COMRAM] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  3   45[COMRAM] float 
  4909 ;; Registers used:
  4910 ;;		wreg, status,2, status,0, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4916 ;;      Params:         6       0       0       0       0       0       0       0       0
  4917 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4918 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4919 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4920 ;;Total ram usage:       12 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    1
  4923 ;; This function calls:
  4924 ;;		___ftpack
  4925 ;; This function is called by:
  4926 ;;		_sprintf
  4927 ;;		___ftsub
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           	psect	text16
  4932  00187A                     __ptext16:
  4933                           	opt stack 0
  4934  00187A                     ___ftadd:
  4935                           	opt stack 27
  4936                           
  4937                           ;incstack = 0
  4938  00187A  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4939  00187E  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4940  001880  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4941  001882  342F               	rlcf	___ftadd@f1+1,w,c
  4942  001884  3634               	rlcf	??___ftadd& (0+255),f,c
  4943  001886  E301               	bnc	u1941
  4944  001888  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4945  00188A                     u1941:
  4946  00188A  5034               	movf	??___ftadd,w,c
  4947  00188C  6E39               	movwf	___ftadd@exp1,c
  4948  00188E  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4949  001892  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4950  001894  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4951  001896  3432               	rlcf	___ftadd@f2+1,w,c
  4952  001898  3634               	rlcf	??___ftadd& (0+255),f,c
  4953  00189A  E301               	bnc	u1951
  4954  00189C  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4955  00189E                     u1951:
  4956  00189E  5034               	movf	??___ftadd,w,c
  4957  0018A0  6E38               	movwf	___ftadd@exp2,c
  4958  0018A2  5039               	movf	___ftadd@exp1,w,c
  4959  0018A4  B4D8               	btfsc	status,2,c
  4960  0018A6  D00B               	goto	l502
  4961  0018A8  5038               	movf	___ftadd@exp2,w,c
  4962  0018AA  5C39               	subwf	___ftadd@exp1,w,c
  4963  0018AC  B0D8               	btfsc	status,0,c
  4964  0018AE  D00E               	goto	l1992
  4965  0018B0  5039               	movf	___ftadd@exp1,w,c
  4966  0018B2  0800               	sublw	0
  4967  0018B4  2438               	addwf	___ftadd@exp2,w,c
  4968  0018B6  6E34               	movwf	??___ftadd& (0+255),c
  4969  0018B8  0E18               	movlw	24
  4970  0018BA  6434               	cpfsgt	??___ftadd,c
  4971  0018BC  D007               	goto	l1992
  4972  0018BE                     l502:
  4973  0018BE  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4974  0018C2  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4975  0018C6  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4976  0018CA  0012               	return	
  4977  0018CC                     l1992:
  4978  0018CC  5038               	movf	___ftadd@exp2,w,c
  4979  0018CE  B4D8               	btfsc	status,2,c
  4980  0018D0  D00B               	goto	l506
  4981  0018D2  5039               	movf	___ftadd@exp1,w,c
  4982  0018D4  5C38               	subwf	___ftadd@exp2,w,c
  4983  0018D6  B0D8               	btfsc	status,0,c
  4984  0018D8  D00E               	goto	l1998
  4985  0018DA  5038               	movf	___ftadd@exp2,w,c
  4986  0018DC  0800               	sublw	0
  4987  0018DE  2439               	addwf	___ftadd@exp1,w,c
  4988  0018E0  6E34               	movwf	??___ftadd& (0+255),c
  4989  0018E2  0E18               	movlw	24
  4990  0018E4  6434               	cpfsgt	??___ftadd,c
  4991  0018E6  D007               	goto	l1998
  4992  0018E8                     l506:
  4993  0018E8  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4994  0018EC  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4995  0018F0  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4996  0018F4  0012               	return	
  4997  0018F6                     l1998:
  4998  0018F6  0E06               	movlw	6
  4999  0018F8  6E37               	movwf	___ftadd@sign,c
  5000  0018FA  BE30               	btfsc	___ftadd@f1+2,7,c
  5001  0018FC  8E37               	bsf	___ftadd@sign,7,c
  5002  0018FE  BE33               	btfsc	___ftadd@f2+2,7,c
  5003  001900  8C37               	bsf	___ftadd@sign,6,c
  5004  001902  8E2F               	bsf	___ftadd@f1+1,7,c
  5005  001904  0EFF               	movlw	255
  5006  001906  162E               	andwf	___ftadd@f1,f,c
  5007  001908  0EFF               	movlw	255
  5008  00190A  162F               	andwf	___ftadd@f1+1,f,c
  5009  00190C  0E00               	movlw	0
  5010  00190E  1630               	andwf	___ftadd@f1+2,f,c
  5011  001910  8E32               	bsf	___ftadd@f2+1,7,c
  5012  001912  0EFF               	movlw	255
  5013  001914  1631               	andwf	___ftadd@f2,f,c
  5014  001916  0EFF               	movlw	255
  5015  001918  1632               	andwf	___ftadd@f2+1,f,c
  5016  00191A  0E00               	movlw	0
  5017  00191C  1633               	andwf	___ftadd@f2+2,f,c
  5018  00191E  5038               	movf	___ftadd@exp2,w,c
  5019  001920  5C39               	subwf	___ftadd@exp1,w,c
  5020  001922  B0D8               	btfsc	status,0,c
  5021  001924  D01B               	goto	l2024
  5022  001926                     l2014:
  5023  001926  90D8               	bcf	status,0,c
  5024  001928  3631               	rlcf	___ftadd@f2,f,c
  5025  00192A  3632               	rlcf	___ftadd@f2+1,f,c
  5026  00192C  3633               	rlcf	___ftadd@f2+2,f,c
  5027  00192E  0638               	decf	___ftadd@exp2,f,c
  5028  001930  5039               	movf	___ftadd@exp1,w,c
  5029  001932  1838               	xorwf	___ftadd@exp2,w,c
  5030  001934  B4D8               	btfsc	status,2,c
  5031  001936  D00D               	goto	l2022
  5032  001938  0637               	decf	___ftadd@sign,f,c
  5033  00193A  C037  F034         	movff	___ftadd@sign,??___ftadd
  5034  00193E  0E07               	movlw	7
  5035  001940  1634               	andwf	??___ftadd,f,c
  5036  001942  B4D8               	btfsc	status,2,c
  5037  001944  D006               	goto	l2022
  5038  001946  D7EF               	goto	l2014
  5039  001948                     l2020:
  5040  001948  90D8               	bcf	status,0,c
  5041  00194A  3230               	rrcf	___ftadd@f1+2,f,c
  5042  00194C  322F               	rrcf	___ftadd@f1+1,f,c
  5043  00194E  322E               	rrcf	___ftadd@f1,f,c
  5044  001950  2A39               	incf	___ftadd@exp1,f,c
  5045  001952                     l2022:
  5046  001952  5038               	movf	___ftadd@exp2,w,c
  5047  001954  1839               	xorwf	___ftadd@exp1,w,c
  5048  001956  B4D8               	btfsc	status,2,c
  5049  001958  D01F               	goto	l517
  5050  00195A  D7F6               	goto	l2020
  5051  00195C                     l2024:
  5052  00195C  5039               	movf	___ftadd@exp1,w,c
  5053  00195E  5C38               	subwf	___ftadd@exp2,w,c
  5054  001960  B0D8               	btfsc	status,0,c
  5055  001962  D01A               	goto	l517
  5056  001964                     l2026:
  5057  001964  90D8               	bcf	status,0,c
  5058  001966  362E               	rlcf	___ftadd@f1,f,c
  5059  001968  362F               	rlcf	___ftadd@f1+1,f,c
  5060  00196A  3630               	rlcf	___ftadd@f1+2,f,c
  5061  00196C  0639               	decf	___ftadd@exp1,f,c
  5062  00196E  5039               	movf	___ftadd@exp1,w,c
  5063  001970  1838               	xorwf	___ftadd@exp2,w,c
  5064  001972  B4D8               	btfsc	status,2,c
  5065  001974  D00D               	goto	l2034
  5066  001976  0637               	decf	___ftadd@sign,f,c
  5067  001978  C037  F034         	movff	___ftadd@sign,??___ftadd
  5068  00197C  0E07               	movlw	7
  5069  00197E  1634               	andwf	??___ftadd,f,c
  5070  001980  B4D8               	btfsc	status,2,c
  5071  001982  D006               	goto	l2034
  5072  001984  D7EF               	goto	l2026
  5073  001986                     l2032:
  5074  001986  90D8               	bcf	status,0,c
  5075  001988  3233               	rrcf	___ftadd@f2+2,f,c
  5076  00198A  3232               	rrcf	___ftadd@f2+1,f,c
  5077  00198C  3231               	rrcf	___ftadd@f2,f,c
  5078  00198E  2A38               	incf	___ftadd@exp2,f,c
  5079  001990                     l2034:
  5080  001990  5038               	movf	___ftadd@exp2,w,c
  5081  001992  1839               	xorwf	___ftadd@exp1,w,c
  5082  001994  A4D8               	btfss	status,2,c
  5083  001996  D7F7               	goto	l2032
  5084  001998                     l517:
  5085  001998  AE37               	btfss	___ftadd@sign,7,c
  5086  00199A  D00C               	goto	l526
  5087  00199C  0EFF               	movlw	255
  5088  00199E  1A2E               	xorwf	___ftadd@f1,f,c
  5089  0019A0  0EFF               	movlw	255
  5090  0019A2  1A2F               	xorwf	___ftadd@f1+1,f,c
  5091  0019A4  0EFF               	movlw	255
  5092  0019A6  1A30               	xorwf	___ftadd@f1+2,f,c
  5093  0019A8  0E01               	movlw	1
  5094  0019AA  262E               	addwf	___ftadd@f1,f,c
  5095  0019AC  0E00               	movlw	0
  5096  0019AE  222F               	addwfc	___ftadd@f1+1,f,c
  5097  0019B0  0E00               	movlw	0
  5098  0019B2  2230               	addwfc	___ftadd@f1+2,f,c
  5099  0019B4                     l526:
  5100  0019B4  AC37               	btfss	___ftadd@sign,6,c
  5101  0019B6  D00C               	goto	l2040
  5102  0019B8  0EFF               	movlw	255
  5103  0019BA  1A31               	xorwf	___ftadd@f2,f,c
  5104  0019BC  0EFF               	movlw	255
  5105  0019BE  1A32               	xorwf	___ftadd@f2+1,f,c
  5106  0019C0  0EFF               	movlw	255
  5107  0019C2  1A33               	xorwf	___ftadd@f2+2,f,c
  5108  0019C4  0E01               	movlw	1
  5109  0019C6  2631               	addwf	___ftadd@f2,f,c
  5110  0019C8  0E00               	movlw	0
  5111  0019CA  2232               	addwfc	___ftadd@f2+1,f,c
  5112  0019CC  0E00               	movlw	0
  5113  0019CE  2233               	addwfc	___ftadd@f2+2,f,c
  5114  0019D0                     l2040:
  5115  0019D0  0E00               	movlw	0
  5116  0019D2  6E37               	movwf	___ftadd@sign,c
  5117  0019D4  502E               	movf	___ftadd@f1,w,c
  5118  0019D6  2631               	addwf	___ftadd@f2,f,c
  5119  0019D8  502F               	movf	___ftadd@f1+1,w,c
  5120  0019DA  2232               	addwfc	___ftadd@f2+1,f,c
  5121  0019DC  5030               	movf	___ftadd@f1+2,w,c
  5122  0019DE  2233               	addwfc	___ftadd@f2+2,f,c
  5123  0019E0  AE33               	btfss	___ftadd@f2+2,7,c
  5124  0019E2  D00E               	goto	l2050
  5125  0019E4  0EFF               	movlw	255
  5126  0019E6  1A31               	xorwf	___ftadd@f2,f,c
  5127  0019E8  0EFF               	movlw	255
  5128  0019EA  1A32               	xorwf	___ftadd@f2+1,f,c
  5129  0019EC  0EFF               	movlw	255
  5130  0019EE  1A33               	xorwf	___ftadd@f2+2,f,c
  5131  0019F0  0E01               	movlw	1
  5132  0019F2  2631               	addwf	___ftadd@f2,f,c
  5133  0019F4  0E00               	movlw	0
  5134  0019F6  2232               	addwfc	___ftadd@f2+1,f,c
  5135  0019F8  0E00               	movlw	0
  5136  0019FA  2233               	addwfc	___ftadd@f2+2,f,c
  5137  0019FC  0E01               	movlw	1
  5138  0019FE  6E37               	movwf	___ftadd@sign,c
  5139  001A00                     l2050:
  5140  001A00  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5141  001A04  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5142  001A08  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5143  001A0C  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5144  001A10  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5145  001A14  EC59  F011         	call	___ftpack	;wreg free
  5146  001A18  C001  F02E         	movff	?___ftpack,?___ftadd
  5147  001A1C  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5148  001A20  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5149  001A24  0012               	return	
  5150  001A26                     __end_of___ftadd:
  5151                           	opt stack 0
  5152                           tblptru	equ	0xFF8
  5153                           tblptrh	equ	0xFF7
  5154                           tblptrl	equ	0xFF6
  5155                           tablat	equ	0xFF5
  5156                           prodh	equ	0xFF4
  5157                           prodl	equ	0xFF3
  5158                           wreg	equ	0xFE8
  5159                           indf2	equ	0xFDF
  5160                           postinc2	equ	0xFDE
  5161                           postdec2	equ	0xFDD
  5162                           fsr2h	equ	0xFDA
  5163                           fsr2l	equ	0xFD9
  5164                           status	equ	0xFD8
  5165                           
  5166 ;; *************** function ___ftneg *****************
  5167 ;; Defined at:
  5168 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;  f1              3    0[COMRAM] float 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;		None
  5173 ;; Return value:  Size  Location     Type
  5174 ;;                  3    0[COMRAM] float 
  5175 ;; Registers used:
  5176 ;;		wreg, status,2, status,0
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5182 ;;      Params:         3       0       0       0       0       0       0       0       0
  5183 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5185 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5186 ;;Total ram usage:        3 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		_sprintf
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text17
  5196  00277C                     __ptext17:
  5197                           	opt stack 0
  5198  00277C                     ___ftneg:
  5199                           	opt stack 29
  5200                           
  5201                           ;incstack = 0
  5202  00277C  5001               	movf	___ftneg@f1,w,c
  5203  00277E  1002               	iorwf	___ftneg@f1+1,w,c
  5204  002780  1003               	iorwf	___ftneg@f1+2,w,c
  5205  002782  B4D8               	btfsc	status,2,c
  5206  002784  D006               	goto	l576
  5207  002786  0E00               	movlw	0
  5208  002788  1A01               	xorwf	___ftneg@f1,f,c
  5209  00278A  0E00               	movlw	0
  5210  00278C  1A02               	xorwf	___ftneg@f1+1,f,c
  5211  00278E  0E80               	movlw	128
  5212  002790  1A03               	xorwf	___ftneg@f1+2,f,c
  5213  002792                     l576:
  5214  002792  C001  F001         	movff	___ftneg@f1,?___ftneg
  5215  002796  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5216  00279A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5217  00279E  0012               	return		;funcret
  5218  0027A0                     __end_of___ftneg:
  5219                           	opt stack 0
  5220                           tblptru	equ	0xFF8
  5221                           tblptrh	equ	0xFF7
  5222                           tblptrl	equ	0xFF6
  5223                           tablat	equ	0xFF5
  5224                           prodh	equ	0xFF4
  5225                           prodl	equ	0xFF3
  5226                           wreg	equ	0xFE8
  5227                           indf2	equ	0xFDF
  5228                           postinc2	equ	0xFDE
  5229                           postdec2	equ	0xFDD
  5230                           fsr2h	equ	0xFDA
  5231                           fsr2l	equ	0xFD9
  5232                           status	equ	0xFD8
  5233                           
  5234 ;; *************** function ___ftge *****************
  5235 ;; Defined at:
  5236 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;  ff1             3    0[COMRAM] float 
  5239 ;;  ff2             3    3[COMRAM] float 
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;		None
  5242 ;; Return value:  Size  Location     Type
  5243 ;;		None               void
  5244 ;; Registers used:
  5245 ;;		wreg, status,2, status,0
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5251 ;;      Params:         6       0       0       0       0       0       0       0       0
  5252 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5253 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5254 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5255 ;;Total ram usage:        9 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; This function calls:
  5258 ;;		Nothing
  5259 ;; This function is called by:
  5260 ;;		_main
  5261 ;;		_sprintf
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           	psect	text18
  5266  002360                     __ptext18:
  5267                           	opt stack 0
  5268  002360                     ___ftge:
  5269                           	opt stack 29
  5270                           
  5271                           ;incstack = 0
  5272  002360  AE03               	btfss	___ftge@ff1+2,7,c
  5273  002362  D016               	goto	l2432
  5274  002364  C001  F007         	movff	___ftge@ff1,??___ftge
  5275  002368  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5276  00236C  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5277  002370  1E07               	comf	??___ftge,f,c
  5278  002372  1E08               	comf	??___ftge+1,f,c
  5279  002374  1E09               	comf	??___ftge+2,f,c
  5280  002376  2A07               	incf	??___ftge,f,c
  5281  002378  0E00               	movlw	0
  5282  00237A  2208               	addwfc	??___ftge+1,f,c
  5283  00237C  2209               	addwfc	??___ftge+2,f,c
  5284  00237E  0E00               	movlw	0
  5285  002380  2407               	addwf	??___ftge,w,c
  5286  002382  6E01               	movwf	___ftge@ff1,c
  5287  002384  0E00               	movlw	0
  5288  002386  2008               	addwfc	??___ftge+1,w,c
  5289  002388  6E02               	movwf	___ftge@ff1+1,c
  5290  00238A  0E80               	movlw	128
  5291  00238C  2009               	addwfc	??___ftge+2,w,c
  5292  00238E  6E03               	movwf	___ftge@ff1+2,c
  5293  002390                     l2432:
  5294  002390  AE06               	btfss	___ftge@ff2+2,7,c
  5295  002392  D016               	goto	l2436
  5296  002394  C004  F007         	movff	___ftge@ff2,??___ftge
  5297  002398  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5298  00239C  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5299  0023A0  1E07               	comf	??___ftge,f,c
  5300  0023A2  1E08               	comf	??___ftge+1,f,c
  5301  0023A4  1E09               	comf	??___ftge+2,f,c
  5302  0023A6  2A07               	incf	??___ftge,f,c
  5303  0023A8  0E00               	movlw	0
  5304  0023AA  2208               	addwfc	??___ftge+1,f,c
  5305  0023AC  2209               	addwfc	??___ftge+2,f,c
  5306  0023AE  0E00               	movlw	0
  5307  0023B0  2407               	addwf	??___ftge,w,c
  5308  0023B2  6E04               	movwf	___ftge@ff2,c
  5309  0023B4  0E00               	movlw	0
  5310  0023B6  2008               	addwfc	??___ftge+1,w,c
  5311  0023B8  6E05               	movwf	___ftge@ff2+1,c
  5312  0023BA  0E80               	movlw	128
  5313  0023BC  2009               	addwfc	??___ftge+2,w,c
  5314  0023BE  6E06               	movwf	___ftge@ff2+2,c
  5315  0023C0                     l2436:
  5316  0023C0  0E00               	movlw	0
  5317  0023C2  1A01               	xorwf	___ftge@ff1,f,c
  5318  0023C4  0E00               	movlw	0
  5319  0023C6  1A02               	xorwf	___ftge@ff1+1,f,c
  5320  0023C8  0E80               	movlw	128
  5321  0023CA  1A03               	xorwf	___ftge@ff1+2,f,c
  5322  0023CC  0E00               	movlw	0
  5323  0023CE  1A04               	xorwf	___ftge@ff2,f,c
  5324  0023D0  0E00               	movlw	0
  5325  0023D2  1A05               	xorwf	___ftge@ff2+1,f,c
  5326  0023D4  0E80               	movlw	128
  5327  0023D6  1A06               	xorwf	___ftge@ff2+2,f,c
  5328  0023D8  5004               	movf	___ftge@ff2,w,c
  5329  0023DA  5C01               	subwf	___ftge@ff1,w,c
  5330  0023DC  5005               	movf	___ftge@ff2+1,w,c
  5331  0023DE  5802               	subwfb	___ftge@ff1+1,w,c
  5332  0023E0  5006               	movf	___ftge@ff2+2,w,c
  5333  0023E2  5803               	subwfb	___ftge@ff1+2,w,c
  5334  0023E4  B0D8               	btfsc	status,0,c
  5335  0023E6  D002               	goto	l2442
  5336  0023E8  90D8               	bcf	status,0,c
  5337  0023EA  0012               	return	
  5338  0023EC                     l2442:
  5339  0023EC  80D8               	bsf	status,0,c
  5340  0023EE  0012               	return	
  5341  0023F0                     __end_of___ftge:
  5342                           	opt stack 0
  5343                           tblptru	equ	0xFF8
  5344                           tblptrh	equ	0xFF7
  5345                           tblptrl	equ	0xFF6
  5346                           tablat	equ	0xFF5
  5347                           prodh	equ	0xFF4
  5348                           prodl	equ	0xFF3
  5349                           wreg	equ	0xFE8
  5350                           indf2	equ	0xFDF
  5351                           postinc2	equ	0xFDE
  5352                           postdec2	equ	0xFDD
  5353                           fsr2h	equ	0xFDA
  5354                           fsr2l	equ	0xFD9
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function _getCad *****************
  5358 ;; Defined at:
  5359 ;;		line 29 in file "Robot.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;  canal           1    wreg     unsigned char 
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;  canal           1    2[COMRAM] unsigned char 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  2    0[COMRAM] short 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5373 ;;      Params:         2       0       0       0       0       0       0       0       0
  5374 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5376 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5377 ;;Total ram usage:        3 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_main
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text19
  5387  002756                     __ptext19:
  5388                           	opt stack 0
  5389  002756                     _getCad:
  5390                           	opt stack 30
  5391                           
  5392                           ;incstack = 0
  5393                           ;getCad@canal stored from wreg
  5394  002756  6E03               	movwf	getCad@canal,c
  5395                           
  5396                           ;Robot.c: 30: ADCON1 = 0b00001101;
  5397  002758  0E0D               	movlw	13
  5398  00275A  6EC1               	movwf	4033,c	;volatile
  5399                           
  5400                           ;Robot.c: 31: switch(canal){
  5401  00275C  D003               	goto	l2628
  5402  00275E                     l2624:
  5403                           
  5404                           ;Robot.c: 33: ADCON0 = 0b00000010;
  5405  00275E  0E02               	movlw	2
  5406  002760  6EC2               	movwf	4034,c	;volatile
  5407                           
  5408                           ;Robot.c: 35: }
  5409                           
  5410                           ;Robot.c: 34: break;
  5411  002762  D004               	goto	l2630
  5412  002764                     l2628:
  5413  002764  5003               	movf	getCad@canal,w,c
  5414                           
  5415                           ; Switch size 1, requested type "space"
  5416                           ; Number of cases is 1, Range of values is 0 to 0
  5417                           ; switch strategies available:
  5418                           ; Name         Instructions Cycles
  5419                           ; simple_byte            4     3 (average)
  5420                           ;	Chosen strategy is simple_byte
  5421  002766  0A00               	xorlw	0	; case 0
  5422  002768  B4D8               	btfsc	status,2,c
  5423  00276A  D7F9               	goto	l2624
  5424  00276C                     l2630:
  5425                           
  5426                           ;Robot.c: 36: ADCON2 = 0b00101001;
  5427  00276C  0E29               	movlw	41
  5428  00276E  6EC0               	movwf	4032,c	;volatile
  5429                           
  5430                           ;Robot.c: 37: ADON = 1;
  5431  002770  80C2               	bsf	4034,0,c	;volatile
  5432                           
  5433                           ;Robot.c: 38: GO_DONE = 1;
  5434  002772  82C2               	bsf	4034,1,c	;volatile
  5435                           
  5436                           ;Robot.c: 40: return ADRESH;
  5437  002774  CFC4 F001          	movff	4036,?_getCad	;volatile
  5438  002778  6A02               	clrf	?_getCad+1,c
  5439  00277A  0012               	return	
  5440  00277C                     __end_of_getCad:
  5441                           	opt stack 0
  5442                           tblptru	equ	0xFF8
  5443                           tblptrh	equ	0xFF7
  5444                           tblptrl	equ	0xFF6
  5445                           tablat	equ	0xFF5
  5446                           prodh	equ	0xFF4
  5447                           prodl	equ	0xFF3
  5448                           wreg	equ	0xFE8
  5449                           indf2	equ	0xFDF
  5450                           postinc2	equ	0xFDE
  5451                           postdec2	equ	0xFDD
  5452                           fsr2h	equ	0xFDA
  5453                           fsr2l	equ	0xFD9
  5454                           status	equ	0xFD8
  5455                           
  5456 ;; *************** function ___awtoft *****************
  5457 ;; Defined at:
  5458 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;  c               2    8[COMRAM] int 
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;  sign            1   11[COMRAM] unsigned char 
  5463 ;; Return value:  Size  Location     Type
  5464 ;;                  3    8[COMRAM] float 
  5465 ;; Registers used:
  5466 ;;		wreg, status,2, status,0, cstack
  5467 ;; Tracked objects:
  5468 ;;		On entry : 0/0
  5469 ;;		On exit  : 0/0
  5470 ;;		Unchanged: 0/0
  5471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5472 ;;      Params:         3       0       0       0       0       0       0       0       0
  5473 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5474 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5475 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5476 ;;Total ram usage:        4 bytes
  5477 ;; Hardware stack levels used:    1
  5478 ;; Hardware stack levels required when called:    1
  5479 ;; This function calls:
  5480 ;;		___ftpack
  5481 ;; This function is called by:
  5482 ;;		_main
  5483 ;; This function uses a non-reentrant model
  5484 ;;
  5485                           
  5486                           	psect	text20
  5487  0026F8                     __ptext20:
  5488                           	opt stack 0
  5489  0026F8                     ___awtoft:
  5490                           	opt stack 29
  5491                           
  5492                           ;incstack = 0
  5493  0026F8  0E00               	movlw	0
  5494  0026FA  6E0C               	movwf	___awtoft@sign,c
  5495  0026FC  AE0A               	btfss	___awtoft@c+1,7,c
  5496  0026FE  D006               	goto	l2910
  5497  002700  6C09               	negf	___awtoft@c,c
  5498  002702  1E0A               	comf	___awtoft@c+1,f,c
  5499  002704  B0D8               	btfsc	status,0,c
  5500  002706  2A0A               	incf	___awtoft@c+1,f,c
  5501  002708  0E01               	movlw	1
  5502  00270A  6E0C               	movwf	___awtoft@sign,c
  5503  00270C                     l2910:
  5504  00270C  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5505  002710  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5506  002714  6A03               	clrf	___ftpack@arg+2,c
  5507  002716  0E8E               	movlw	142
  5508  002718  6E04               	movwf	___ftpack@exp,c
  5509  00271A  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5510  00271E  EC59  F011         	call	___ftpack	;wreg free
  5511  002722  C001  F009         	movff	?___ftpack,?___awtoft
  5512  002726  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5513  00272A  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5514  00272E  0012               	return	
  5515  002730                     __end_of___awtoft:
  5516                           	opt stack 0
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           wreg	equ	0xFE8
  5524                           indf2	equ	0xFDF
  5525                           postinc2	equ	0xFDE
  5526                           postdec2	equ	0xFDD
  5527                           fsr2h	equ	0xFDA
  5528                           fsr2l	equ	0xFD9
  5529                           status	equ	0xFD8
  5530                           
  5531 ;; *************** function ___ftpack *****************
  5532 ;; Defined at:
  5533 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;  arg             3    0[COMRAM] unsigned um
  5536 ;;  exp             1    3[COMRAM] unsigned char 
  5537 ;;  sign            1    4[COMRAM] unsigned char 
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;		None
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  3    0[COMRAM] float 
  5542 ;; Registers used:
  5543 ;;		wreg, status,2, status,0
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5549 ;;      Params:         5       0       0       0       0       0       0       0       0
  5550 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5551 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5552 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5553 ;;Total ram usage:        8 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; This function calls:
  5556 ;;		Nothing
  5557 ;; This function is called by:
  5558 ;;		___awtoft
  5559 ;;		___ftadd
  5560 ;;		___ftmul
  5561 ;;		___lltoft
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text21
  5566  0022B2                     __ptext21:
  5567                           	opt stack 0
  5568  0022B2                     ___ftpack:
  5569                           	opt stack 27
  5570                           
  5571                           ;incstack = 0
  5572  0022B2  5004               	movf	___ftpack@exp,w,c
  5573  0022B4  B4D8               	btfsc	status,2,c
  5574  0022B6  D005               	goto	l1946
  5575  0022B8  5001               	movf	___ftpack@arg,w,c
  5576  0022BA  1002               	iorwf	___ftpack@arg+1,w,c
  5577  0022BC  1003               	iorwf	___ftpack@arg+2,w,c
  5578  0022BE  A4D8               	btfss	status,2,c
  5579  0022C0  D00C               	goto	l1952
  5580  0022C2                     l1946:
  5581  0022C2  0E00               	movlw	0
  5582  0022C4  6E01               	movwf	?___ftpack,c
  5583  0022C6  0E00               	movlw	0
  5584  0022C8  6E02               	movwf	?___ftpack+1,c
  5585  0022CA  0E00               	movlw	0
  5586  0022CC  6E03               	movwf	?___ftpack+2,c
  5587  0022CE  0012               	return	
  5588  0022D0                     l1950:
  5589  0022D0  2A04               	incf	___ftpack@exp,f,c
  5590  0022D2  90D8               	bcf	status,0,c
  5591  0022D4  3203               	rrcf	___ftpack@arg+2,f,c
  5592  0022D6  3202               	rrcf	___ftpack@arg+1,f,c
  5593  0022D8  3201               	rrcf	___ftpack@arg,f,c
  5594  0022DA                     l1952:
  5595  0022DA  0E00               	movlw	0
  5596  0022DC  1401               	andwf	___ftpack@arg,w,c
  5597  0022DE  6E06               	movwf	??___ftpack& (0+255),c
  5598  0022E0  0E00               	movlw	0
  5599  0022E2  1402               	andwf	___ftpack@arg+1,w,c
  5600  0022E4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5601  0022E6  0EFE               	movlw	254
  5602  0022E8  1403               	andwf	___ftpack@arg+2,w,c
  5603  0022EA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5604  0022EC  5006               	movf	??___ftpack,w,c
  5605  0022EE  1007               	iorwf	??___ftpack+1,w,c
  5606  0022F0  1008               	iorwf	??___ftpack+2,w,c
  5607  0022F2  B4D8               	btfsc	status,2,c
  5608  0022F4  D00C               	goto	l1958
  5609  0022F6  D7EC               	goto	l1950
  5610  0022F8                     l1954:
  5611  0022F8  2A04               	incf	___ftpack@exp,f,c
  5612  0022FA  0E01               	movlw	1
  5613  0022FC  2601               	addwf	___ftpack@arg,f,c
  5614  0022FE  0E00               	movlw	0
  5615  002300  2202               	addwfc	___ftpack@arg+1,f,c
  5616  002302  0E00               	movlw	0
  5617  002304  2203               	addwfc	___ftpack@arg+2,f,c
  5618  002306  90D8               	bcf	status,0,c
  5619  002308  3203               	rrcf	___ftpack@arg+2,f,c
  5620  00230A  3202               	rrcf	___ftpack@arg+1,f,c
  5621  00230C  3201               	rrcf	___ftpack@arg,f,c
  5622  00230E                     l1958:
  5623  00230E  0E00               	movlw	0
  5624  002310  1401               	andwf	___ftpack@arg,w,c
  5625  002312  6E06               	movwf	??___ftpack& (0+255),c
  5626  002314  0E00               	movlw	0
  5627  002316  1402               	andwf	___ftpack@arg+1,w,c
  5628  002318  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5629  00231A  0EFF               	movlw	255
  5630  00231C  1403               	andwf	___ftpack@arg+2,w,c
  5631  00231E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5632  002320  5006               	movf	??___ftpack,w,c
  5633  002322  1007               	iorwf	??___ftpack+1,w,c
  5634  002324  1008               	iorwf	??___ftpack+2,w,c
  5635  002326  B4D8               	btfsc	status,2,c
  5636  002328  D006               	goto	l1962
  5637  00232A  D7E6               	goto	l1954
  5638  00232C                     l1960:
  5639  00232C  0604               	decf	___ftpack@exp,f,c
  5640  00232E  90D8               	bcf	status,0,c
  5641  002330  3601               	rlcf	___ftpack@arg,f,c
  5642  002332  3602               	rlcf	___ftpack@arg+1,f,c
  5643  002334  3603               	rlcf	___ftpack@arg+2,f,c
  5644  002336                     l1962:
  5645  002336  BE02               	btfsc	___ftpack@arg+1,7,c
  5646  002338  D003               	goto	l479
  5647  00233A  0E02               	movlw	2
  5648  00233C  6004               	cpfslt	___ftpack@exp,c
  5649  00233E  D7F6               	goto	l1960
  5650  002340                     l479:
  5651  002340  A004               	btfss	___ftpack@exp,0,c
  5652  002342  9E02               	bcf	___ftpack@arg+1,7,c
  5653  002344  90D8               	bcf	status,0,c
  5654  002346  3204               	rrcf	___ftpack@exp,f,c
  5655  002348  5004               	movf	___ftpack@exp,w,c
  5656  00234A  1203               	iorwf	___ftpack@arg+2,f,c
  5657  00234C  5005               	movf	___ftpack@sign,w,c
  5658  00234E  A4D8               	btfss	status,2,c
  5659  002350  8E03               	bsf	___ftpack@arg+2,7,c
  5660  002352  C001  F001         	movff	___ftpack@arg,?___ftpack
  5661  002356  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5662  00235A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5663  00235E  0012               	return	
  5664  002360                     __end_of___ftpack:
  5665                           	opt stack 0
  5666                           tblptru	equ	0xFF8
  5667                           tblptrh	equ	0xFF7
  5668                           tblptrl	equ	0xFF6
  5669                           tablat	equ	0xFF5
  5670                           prodh	equ	0xFF4
  5671                           prodl	equ	0xFF3
  5672                           wreg	equ	0xFE8
  5673                           indf2	equ	0xFDF
  5674                           postinc2	equ	0xFDE
  5675                           postdec2	equ	0xFDD
  5676                           fsr2h	equ	0xFDA
  5677                           fsr2l	equ	0xFD9
  5678                           status	equ	0xFD8
  5679                           
  5680 ;; *************** function _Lcd_Out2 *****************
  5681 ;; Defined at:
  5682 ;;		line 116 in file "lcd.h"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  y               1    wreg     unsigned char 
  5685 ;;  x               1    3[COMRAM] unsigned char 
  5686 ;;  buffer          2    4[COMRAM] PTR unsigned char 
  5687 ;;		 -> STR_4(7), STR_3(8), STR_2(7), main@temp(20), 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  y               1    6[COMRAM] unsigned char 
  5690 ;;  data            1    7[COMRAM] unsigned char 
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      void 
  5693 ;; Registers used:
  5694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5700 ;;      Params:         3       0       0       0       0       0       0       0       0
  5701 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5703 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5704 ;;Total ram usage:        5 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    1
  5707 ;; This function calls:
  5708 ;;		_Lcd_Chr_CP
  5709 ;;		_Lcd_Cmd
  5710 ;; This function is called by:
  5711 ;;		_main
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text22
  5716  0023F0                     __ptext22:
  5717                           	opt stack 0
  5718  0023F0                     _Lcd_Out2:
  5719                           	opt stack 29
  5720                           
  5721                           ;incstack = 0
  5722                           ;Lcd_Out2@y stored from wreg
  5723  0023F0  6E07               	movwf	Lcd_Out2@y,c
  5724                           
  5725                           ;lcd.h: 118: unsigned char data;
  5726                           ;lcd.h: 119: switch (y)
  5727  0023F2  D00D               	goto	l2612
  5728  0023F4                     l2602:
  5729  0023F4  5004               	movf	Lcd_Out2@x,w,c
  5730  0023F6  0F80               	addlw	128
  5731  0023F8  D008               	goto	L8
  5732  0023FA                     l2604:
  5733  0023FA  5004               	movf	Lcd_Out2@x,w,c
  5734  0023FC  0FC0               	addlw	192
  5735  0023FE  D005               	goto	L8
  5736  002400                     l2606:
  5737  002400  5004               	movf	Lcd_Out2@x,w,c
  5738  002402  0F94               	addlw	148
  5739  002404  D002               	goto	L8
  5740  002406                     l2608:
  5741  002406  5004               	movf	Lcd_Out2@x,w,c
  5742  002408  0FD4               	addlw	212
  5743  00240A                     L8:
  5744  00240A  6E08               	movwf	Lcd_Out2@data,c
  5745                           
  5746                           ;lcd.h: 126: }
  5747                           
  5748                           ;lcd.h: 125: default: break;
  5749  00240C  D00D               	goto	l2614
  5750  00240E                     l2612:
  5751  00240E  5007               	movf	Lcd_Out2@y,w,c
  5752                           
  5753                           ; Switch size 1, requested type "space"
  5754                           ; Number of cases is 4, Range of values is 1 to 4
  5755                           ; switch strategies available:
  5756                           ; Name         Instructions Cycles
  5757                           ; simple_byte           13     7 (average)
  5758                           ;	Chosen strategy is simple_byte
  5759  002410  0A01               	xorlw	1	; case 1
  5760  002412  B4D8               	btfsc	status,2,c
  5761  002414  D7EF               	goto	l2602
  5762  002416  0A03               	xorlw	3	; case 2
  5763  002418  B4D8               	btfsc	status,2,c
  5764  00241A  D7EF               	goto	l2604
  5765  00241C  0A01               	xorlw	1	; case 3
  5766  00241E  B4D8               	btfsc	status,2,c
  5767  002420  D7EF               	goto	l2606
  5768  002422  0A07               	xorlw	7	; case 4
  5769  002424  B4D8               	btfsc	status,2,c
  5770  002426  D7EF               	goto	l2608
  5771  002428                     l2614:
  5772                           
  5773                           ;lcd.h: 127: Lcd_Cmd(data);
  5774  002428  5008               	movf	Lcd_Out2@data,w,c
  5775  00242A  ECE0  F010         	call	_Lcd_Cmd
  5776                           
  5777                           ;lcd.h: 128: while(*buffer)
  5778  00242E  D014               	goto	l2620
  5779  002430                     l2616:
  5780                           
  5781                           ;lcd.h: 129: {
  5782                           ;lcd.h: 130: Lcd_Chr_CP(*buffer);
  5783  002430  C005  FFF6         	movff	Lcd_Out2@buffer,tblptrl
  5784  002434  C006  FFF7         	movff	Lcd_Out2@buffer+1,tblptrh
  5785  002438  6AF8               	clrf	tblptru,c
  5786  00243A  0E07               	movlw	(high __ramtop+-1)
  5787  00243C  64F7               	cpfsgt	tblptrh,c
  5788  00243E  D003               	bra	u3187
  5789  002440  0008               	tblrd		*
  5790  002442  50F5               	movf	tablat,w,c
  5791  002444  D005               	bra	u3180
  5792  002446                     u3187:
  5793  002446  CFF6 FFE9          	movff	tblptrl,fsr0l
  5794  00244A  CFF7 FFEA          	movff	tblptrh,fsr0h
  5795  00244E  50EF               	movf	indf0,w,c
  5796  002450                     u3180:
  5797  002450  EC6F  F00F         	call	_Lcd_Chr_CP
  5798                           
  5799                           ;lcd.h: 131: buffer++;
  5800  002454  4A05               	infsnz	Lcd_Out2@buffer,f,c
  5801  002456  2A06               	incf	Lcd_Out2@buffer+1,f,c
  5802  002458                     l2620:
  5803  002458  C005  FFF6         	movff	Lcd_Out2@buffer,tblptrl
  5804  00245C  C006  FFF7         	movff	Lcd_Out2@buffer+1,tblptrh
  5805  002460  6AF8               	clrf	tblptru,c
  5806  002462  0E07               	movlw	(high __ramtop+-1)
  5807  002464  64F7               	cpfsgt	tblptrh,c
  5808  002466  D003               	bra	u3197
  5809  002468  0008               	tblrd		*
  5810  00246A  50F5               	movf	tablat,w,c
  5811  00246C  D005               	bra	u3190
  5812  00246E                     u3197:
  5813  00246E  CFF6 FFE9          	movff	tblptrl,fsr0l
  5814  002472  CFF7 FFEA          	movff	tblptrh,fsr0h
  5815  002476  50EF               	movf	indf0,w,c
  5816  002478                     u3190:
  5817  002478  0900               	iorlw	0
  5818  00247A  B4D8               	btfsc	status,2,c
  5819  00247C  0012               	return	
  5820  00247E  D7D8               	goto	l2616
  5821  002480                     __end_of_Lcd_Out2:
  5822                           	opt stack 0
  5823                           tblptru	equ	0xFF8
  5824                           tblptrh	equ	0xFF7
  5825                           tblptrl	equ	0xFF6
  5826                           tablat	equ	0xFF5
  5827                           prodh	equ	0xFF4
  5828                           prodl	equ	0xFF3
  5829                           indf0	equ	0xFEF
  5830                           fsr0h	equ	0xFEA
  5831                           fsr0l	equ	0xFE9
  5832                           wreg	equ	0xFE8
  5833                           indf2	equ	0xFDF
  5834                           postinc2	equ	0xFDE
  5835                           postdec2	equ	0xFDD
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function _Lcd_Chr_CP *****************
  5841 ;; Defined at:
  5842 ;;		line 137 in file "lcd.h"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  data            1    wreg     unsigned char 
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;  data            1    2[COMRAM] unsigned char 
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  1    wreg      void 
  5849 ;; Registers used:
  5850 ;;		wreg, status,2, status,0
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5856 ;;      Params:         0       0       0       0       0       0       0       0       0
  5857 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5858 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5859 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5860 ;;Total ram usage:        3 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; This function calls:
  5863 ;;		Nothing
  5864 ;; This function is called by:
  5865 ;;		_Lcd_Out2
  5866 ;;		_Lcd_Out
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           	psect	text23
  5871  001EDE                     __ptext23:
  5872                           	opt stack 0
  5873  001EDE                     _Lcd_Chr_CP:
  5874                           	opt stack 29
  5875                           
  5876                           ;incstack = 0
  5877                           ;Lcd_Chr_CP@data stored from wreg
  5878  001EDE  6E03               	movwf	Lcd_Chr_CP@data,c
  5879                           
  5880                           ;lcd.h: 138: RD3 = 0; RD2 = 1;
  5881  001EE0  9683               	bcf	3971,3,c	;volatile
  5882  001EE2  8483               	bsf	3971,2,c	;volatile
  5883                           
  5884                           ;lcd.h: 139: RD7 = (data & 0b10000000)>>7; RD6 = (data & 0b01000000)>>6;
  5885  001EE4  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  5886  001EE6  AE03               	btfss	Lcd_Chr_CP@data,7,c
  5887  001EE8  D001               	bra	u2525
  5888  001EEA  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  5889  001EEC                     u2525:
  5890  001EEC  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5891  001EEE  A0D8               	btfss	status,0,c
  5892  001EF0  D002               	goto	u2530
  5893  001EF2  8E83               	bsf	3971,7,c	;volatile
  5894  001EF4  D001               	goto	u2545
  5895  001EF6                     u2530:
  5896  001EF6  9E83               	bcf	3971,7,c	;volatile
  5897  001EF8                     u2545:
  5898  001EF8  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5899  001EFC  0E06               	movlw	6
  5900  001EFE  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  5901  001F00                     u2555:
  5902  001F00  90D8               	bcf	status,0,c
  5903  001F02  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5904  001F04  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  5905  001F06  D7FC               	goto	u2555
  5906  001F08  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5907  001F0A  A0D8               	btfss	status,0,c
  5908  001F0C  D002               	goto	u2560
  5909  001F0E  8C83               	bsf	3971,6,c	;volatile
  5910  001F10  D001               	goto	u2575
  5911  001F12                     u2560:
  5912  001F12  9C83               	bcf	3971,6,c	;volatile
  5913  001F14                     u2575:
  5914                           
  5915                           ;lcd.h: 140: RD5 = (data & 0b00100000)>>5; RD4 = (data & 0b00010000)>>4;
  5916  001F14  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5917  001F18  0E05               	movlw	5
  5918  001F1A  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  5919  001F1C                     u2585:
  5920  001F1C  90D8               	bcf	status,0,c
  5921  001F1E  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5922  001F20  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  5923  001F22  D7FC               	goto	u2585
  5924  001F24  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5925  001F26  A0D8               	btfss	status,0,c
  5926  001F28  D002               	goto	u2590
  5927  001F2A  8A83               	bsf	3971,5,c	;volatile
  5928  001F2C  D001               	goto	u2605
  5929  001F2E                     u2590:
  5930  001F2E  9A83               	bcf	3971,5,c	;volatile
  5931  001F30                     u2605:
  5932  001F30  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5933  001F34  3A01               	swapf	??_Lcd_Chr_CP,f,c
  5934  001F36  0E0F               	movlw	15
  5935  001F38  1601               	andwf	??_Lcd_Chr_CP,f,c
  5936  001F3A  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5937  001F3C  A0D8               	btfss	status,0,c
  5938  001F3E  D002               	goto	u2610
  5939  001F40  8883               	bsf	3971,4,c	;volatile
  5940  001F42  D001               	goto	l2210
  5941  001F44                     u2610:
  5942  001F44  9883               	bcf	3971,4,c	;volatile
  5943  001F46                     l2210:
  5944                           
  5945                           ;lcd.h: 141: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5946  001F46  0E06               	movlw	6
  5947  001F48                     u3727:
  5948  001F48  2EE8               	decfsz	wreg,f,c
  5949  001F4A  D7FE               	bra	u3727
  5950  001F4C  D000               	nop2	
  5951                           
  5952                           ;lcd.h: 142: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  5953  001F4E  8683               	bsf	3971,3,c	;volatile
  5954  001F50  0E03               	movlw	3
  5955  001F52                     u3737:
  5956  001F52  2EE8               	decfsz	wreg,f,c
  5957  001F54  D7FE               	bra	u3737
  5958  001F56  F000               	nop	
  5959  001F58  9683               	bcf	3971,3,c	;volatile
  5960                           
  5961                           ;lcd.h: 143: RD7 = (data & 0b00001000)>>3; RD6 = (data & 0b00000100)>>2;
  5962  001F5A  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5963  001F5E  90D8               	bcf	status,0,c
  5964  001F60  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5965  001F62  90D8               	bcf	status,0,c
  5966  001F64  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5967  001F66  90D8               	bcf	status,0,c
  5968  001F68  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5969  001F6A  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5970  001F6C  A0D8               	btfss	status,0,c
  5971  001F6E  D002               	goto	u2630
  5972  001F70  8E83               	bsf	3971,7,c	;volatile
  5973  001F72  D001               	goto	u2645
  5974  001F74                     u2630:
  5975  001F74  9E83               	bcf	3971,7,c	;volatile
  5976  001F76                     u2645:
  5977  001F76  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5978  001F7A  90D8               	bcf	status,0,c
  5979  001F7C  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5980  001F7E  90D8               	bcf	status,0,c
  5981  001F80  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5982  001F82  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5983  001F84  A0D8               	btfss	status,0,c
  5984  001F86  D002               	goto	u2650
  5985  001F88  8C83               	bsf	3971,6,c	;volatile
  5986  001F8A  D001               	goto	u2665
  5987  001F8C                     u2650:
  5988  001F8C  9C83               	bcf	3971,6,c	;volatile
  5989  001F8E                     u2665:
  5990                           
  5991                           ;lcd.h: 144: RD5 = (data & 0b00000010)>>1; RD4 = (data & 0b00000001);
  5992  001F8E  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  5993  001F92  90D8               	bcf	status,0,c
  5994  001F94  3201               	rrcf	??_Lcd_Chr_CP,f,c
  5995  001F96  3001               	rrcf	??_Lcd_Chr_CP,w,c
  5996  001F98  A0D8               	btfss	status,0,c
  5997  001F9A  D002               	goto	u2670
  5998  001F9C  8A83               	bsf	3971,5,c	;volatile
  5999  001F9E  D001               	goto	l2218
  6000  001FA0                     u2670:
  6001  001FA0  9A83               	bcf	3971,5,c	;volatile
  6002  001FA2                     l2218:
  6003  001FA2  A003               	btfss	Lcd_Chr_CP@data,0,c
  6004  001FA4  D002               	goto	u2690
  6005  001FA6  8883               	bsf	3971,4,c	;volatile
  6006  001FA8  D001               	goto	l2220
  6007  001FAA                     u2690:
  6008  001FAA  9883               	bcf	3971,4,c	;volatile
  6009  001FAC                     l2220:
  6010                           
  6011                           ;lcd.h: 145: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6012  001FAC  0E06               	movlw	6
  6013  001FAE                     u3747:
  6014  001FAE  2EE8               	decfsz	wreg,f,c
  6015  001FB0  D7FE               	bra	u3747
  6016  001FB2  D000               	nop2	
  6017                           
  6018                           ;lcd.h: 146: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  6019  001FB4  8683               	bsf	3971,3,c	;volatile
  6020  001FB6  0E03               	movlw	3
  6021  001FB8                     u3757:
  6022  001FB8  2EE8               	decfsz	wreg,f,c
  6023  001FBA  D7FE               	bra	u3757
  6024  001FBC  F000               	nop	
  6025  001FBE  9683               	bcf	3971,3,c	;volatile
  6026                           
  6027                           ;lcd.h: 147: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(8000000/4000000.0)));
  6028  001FC0  0E03               	movlw	3
  6029  001FC2                     u3767:
  6030  001FC2  2EE8               	decfsz	wreg,f,c
  6031  001FC4  D7FE               	bra	u3767
  6032  001FC6  F000               	nop	
  6033  001FC8  0E0F               	movlw	15
  6034  001FCA  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  6035  001FCC  0E48               	movlw	72
  6036  001FCE                     u3777:
  6037  001FCE  2EE8               	decfsz	wreg,f,c
  6038  001FD0  D7FE               	bra	u3777
  6039  001FD2  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  6040  001FD4  D7FC               	bra	u3777
  6041  001FD6  0012               	return		;funcret
  6042  001FD8                     __end_of_Lcd_Chr_CP:
  6043                           	opt stack 0
  6044                           tblptru	equ	0xFF8
  6045                           tblptrh	equ	0xFF7
  6046                           tblptrl	equ	0xFF6
  6047                           tablat	equ	0xFF5
  6048                           prodh	equ	0xFF4
  6049                           prodl	equ	0xFF3
  6050                           indf0	equ	0xFEF
  6051                           fsr0h	equ	0xFEA
  6052                           fsr0l	equ	0xFE9
  6053                           wreg	equ	0xFE8
  6054                           indf2	equ	0xFDF
  6055                           postinc2	equ	0xFDE
  6056                           postdec2	equ	0xFDD
  6057                           fsr2h	equ	0xFDA
  6058                           fsr2l	equ	0xFD9
  6059                           status	equ	0xFD8
  6060                           
  6061 ;; *************** function _Lcd_Init *****************
  6062 ;; Defined at:
  6063 ;;		line 53 in file "lcd.h"
  6064 ;; Parameters:    Size  Location     Type
  6065 ;;		None
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;  data            1    4[COMRAM] unsigned char 
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  1    wreg      void 
  6070 ;; Registers used:
  6071 ;;		wreg, status,2, status,0, cstack
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6077 ;;      Params:         0       0       0       0       0       0       0       0       0
  6078 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6079 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6080 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6081 ;;Total ram usage:        2 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:    1
  6084 ;; This function calls:
  6085 ;;		_Lcd_Cmd
  6086 ;; This function is called by:
  6087 ;;		_main
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           	psect	text24
  6092  001DC4                     __ptext24:
  6093                           	opt stack 0
  6094  001DC4                     _Lcd_Init:
  6095                           	opt stack 29
  6096                           
  6097                           ;lcd.h: 54: unsigned char data;
  6098                           ;lcd.h: 55: TRISD7 = 0;
  6099                           
  6100                           ;incstack = 0
  6101  001DC4  9E95               	bcf	3989,7,c	;volatile
  6102                           
  6103                           ;lcd.h: 56: TRISD6 = 0;
  6104  001DC6  9C95               	bcf	3989,6,c	;volatile
  6105                           
  6106                           ;lcd.h: 57: TRISD5 = 0;
  6107  001DC8  9A95               	bcf	3989,5,c	;volatile
  6108                           
  6109                           ;lcd.h: 58: TRISD4 = 0;
  6110  001DCA  9895               	bcf	3989,4,c	;volatile
  6111                           
  6112                           ;lcd.h: 59: TRISD3 = 0;
  6113  001DCC  9695               	bcf	3989,3,c	;volatile
  6114                           
  6115                           ;lcd.h: 60: TRISD2 = 0;
  6116  001DCE  9495               	bcf	3989,2,c	;volatile
  6117                           
  6118                           ;lcd.h: 61: RD7 = 0;
  6119  001DD0  9E83               	bcf	3971,7,c	;volatile
  6120                           
  6121                           ;lcd.h: 62: RD6 = 0;
  6122  001DD2  9C83               	bcf	3971,6,c	;volatile
  6123                           
  6124                           ;lcd.h: 63: RD5 = 0;
  6125  001DD4  9A83               	bcf	3971,5,c	;volatile
  6126                           
  6127                           ;lcd.h: 64: RD4 = 0;
  6128  001DD6  9883               	bcf	3971,4,c	;volatile
  6129                           
  6130                           ;lcd.h: 65: RD3 = 0;
  6131  001DD8  9683               	bcf	3971,3,c	;volatile
  6132                           
  6133                           ;lcd.h: 66: RD2 = 0;
  6134  001DDA  9483               	bcf	3971,2,c	;volatile
  6135                           
  6136                           ;lcd.h: 67: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6137  001DDC  0E0F               	movlw	15
  6138  001DDE  6E04               	movwf	??_Lcd_Init& (0+255),c
  6139  001DE0  0E48               	movlw	72
  6140  001DE2                     u3787:
  6141  001DE2  2EE8               	decfsz	wreg,f,c
  6142  001DE4  D7FE               	bra	u3787
  6143  001DE6  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6144  001DE8  D7FC               	bra	u3787
  6145                           
  6146                           ;lcd.h: 68: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6147  001DEA  0E0F               	movlw	15
  6148  001DEC  6E04               	movwf	??_Lcd_Init& (0+255),c
  6149  001DEE  0E48               	movlw	72
  6150  001DF0                     u3797:
  6151  001DF0  2EE8               	decfsz	wreg,f,c
  6152  001DF2  D7FE               	bra	u3797
  6153  001DF4  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6154  001DF6  D7FC               	bra	u3797
  6155                           
  6156                           ;lcd.h: 69: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6157  001DF8  0E0F               	movlw	15
  6158  001DFA  6E04               	movwf	??_Lcd_Init& (0+255),c
  6159  001DFC  0E48               	movlw	72
  6160  001DFE                     u3807:
  6161  001DFE  2EE8               	decfsz	wreg,f,c
  6162  001E00  D7FE               	bra	u3807
  6163  001E02  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6164  001E04  D7FC               	bra	u3807
  6165                           
  6166                           ;lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6167  001E06  0E0F               	movlw	15
  6168  001E08  6E04               	movwf	??_Lcd_Init& (0+255),c
  6169  001E0A  0E48               	movlw	72
  6170  001E0C                     u3817:
  6171  001E0C  2EE8               	decfsz	wreg,f,c
  6172  001E0E  D7FE               	bra	u3817
  6173  001E10  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6174  001E12  D7FC               	bra	u3817
  6175                           
  6176                           ;lcd.h: 71: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6177  001E14  0E0F               	movlw	15
  6178  001E16  6E04               	movwf	??_Lcd_Init& (0+255),c
  6179  001E18  0E48               	movlw	72
  6180  001E1A                     u3827:
  6181  001E1A  2EE8               	decfsz	wreg,f,c
  6182  001E1C  D7FE               	bra	u3827
  6183  001E1E  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6184  001E20  D7FC               	bra	u3827
  6185                           
  6186                           ;lcd.h: 72: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6187  001E22  0E0F               	movlw	15
  6188  001E24  6E04               	movwf	??_Lcd_Init& (0+255),c
  6189  001E26  0E48               	movlw	72
  6190  001E28                     u3837:
  6191  001E28  2EE8               	decfsz	wreg,f,c
  6192  001E2A  D7FE               	bra	u3837
  6193  001E2C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6194  001E2E  D7FC               	bra	u3837
  6195                           
  6196                           ;lcd.h: 73: for(data = 1; data < 4; data ++)
  6197  001E30  0E01               	movlw	1
  6198  001E32  6E05               	movwf	Lcd_Init@data,c
  6199  001E34                     l2550:
  6200  001E34  0E03               	movlw	3
  6201  001E36  6405               	cpfsgt	Lcd_Init@data,c
  6202  001E38  D001               	goto	l75
  6203  001E3A  D01F               	goto	l76
  6204  001E3C                     l75:
  6205                           
  6206                           ;lcd.h: 74: {
  6207                           ;lcd.h: 75: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1; RD3 = 0;
  6208  001E3C  9E83               	bcf	3971,7,c	;volatile
  6209  001E3E  9C83               	bcf	3971,6,c	;volatile
  6210  001E40  8A83               	bsf	3971,5,c	;volatile
  6211  001E42  8883               	bsf	3971,4,c	;volatile
  6212  001E44  9683               	bcf	3971,3,c	;volatile
  6213                           
  6214                           ;lcd.h: 76: RD2 = 0; RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1;
  6215  001E46  9483               	bcf	3971,2,c	;volatile
  6216  001E48  9E83               	bcf	3971,7,c	;volatile
  6217  001E4A  9C83               	bcf	3971,6,c	;volatile
  6218  001E4C  8A83               	bsf	3971,5,c	;volatile
  6219  001E4E  8883               	bsf	3971,4,c	;volatile
  6220                           
  6221                           ;lcd.h: 77: RD3 = 1; RD2 = 0;
  6222  001E50  8683               	bsf	3971,3,c	;volatile
  6223  001E52  9483               	bcf	3971,2,c	;volatile
  6224                           
  6225                           ;lcd.h: 78: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6226  001E54  0E03               	movlw	3
  6227  001E56                     u3847:
  6228  001E56  2EE8               	decfsz	wreg,f,c
  6229  001E58  D7FE               	bra	u3847
  6230  001E5A  F000               	nop	
  6231                           
  6232                           ;lcd.h: 79: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 1; RD3 = 0;
  6233  001E5C  9E83               	bcf	3971,7,c	;volatile
  6234  001E5E  9C83               	bcf	3971,6,c	;volatile
  6235  001E60  8A83               	bsf	3971,5,c	;volatile
  6236  001E62  8883               	bsf	3971,4,c	;volatile
  6237  001E64  9683               	bcf	3971,3,c	;volatile
  6238                           
  6239                           ;lcd.h: 80: RD2 = 0;
  6240  001E66  9483               	bcf	3971,2,c	;volatile
  6241                           
  6242                           ;lcd.h: 81: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6243  001E68  0E0F               	movlw	15
  6244  001E6A  6E04               	movwf	??_Lcd_Init& (0+255),c
  6245  001E6C  0E48               	movlw	72
  6246  001E6E                     u3857:
  6247  001E6E  2EE8               	decfsz	wreg,f,c
  6248  001E70  D7FE               	bra	u3857
  6249  001E72  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6250  001E74  D7FC               	bra	u3857
  6251  001E76  2A05               	incf	Lcd_Init@data,f,c
  6252  001E78  D7DD               	goto	l2550
  6253  001E7A                     l76:
  6254                           
  6255                           ;lcd.h: 82: }
  6256                           ;lcd.h: 83: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 0; RD2 = 0;
  6257  001E7A  9E83               	bcf	3971,7,c	;volatile
  6258  001E7C  9C83               	bcf	3971,6,c	;volatile
  6259  001E7E  8A83               	bsf	3971,5,c	;volatile
  6260  001E80  9883               	bcf	3971,4,c	;volatile
  6261  001E82  9683               	bcf	3971,3,c	;volatile
  6262  001E84  9483               	bcf	3971,2,c	;volatile
  6263                           
  6264                           ;lcd.h: 84: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 1; RD2 = 0;
  6265  001E86  9E83               	bcf	3971,7,c	;volatile
  6266  001E88  9C83               	bcf	3971,6,c	;volatile
  6267  001E8A  8A83               	bsf	3971,5,c	;volatile
  6268  001E8C  9883               	bcf	3971,4,c	;volatile
  6269  001E8E  8683               	bsf	3971,3,c	;volatile
  6270  001E90  9483               	bcf	3971,2,c	;volatile
  6271                           
  6272                           ;lcd.h: 85: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6273  001E92  0E03               	movlw	3
  6274  001E94                     u3867:
  6275  001E94  2EE8               	decfsz	wreg,f,c
  6276  001E96  D7FE               	bra	u3867
  6277  001E98  F000               	nop	
  6278                           
  6279                           ;lcd.h: 86: RD7 = 0; RD6 = 0; RD5 = 1; RD4 = 0; RD3 = 0; RD2 = 0;
  6280  001E9A  9E83               	bcf	3971,7,c	;volatile
  6281  001E9C  9C83               	bcf	3971,6,c	;volatile
  6282  001E9E  8A83               	bsf	3971,5,c	;volatile
  6283  001EA0  9883               	bcf	3971,4,c	;volatile
  6284  001EA2  9683               	bcf	3971,3,c	;volatile
  6285  001EA4  9483               	bcf	3971,2,c	;volatile
  6286                           
  6287                           ;lcd.h: 87: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6288  001EA6  0E0F               	movlw	15
  6289  001EA8  6E04               	movwf	??_Lcd_Init& (0+255),c
  6290  001EAA  0E48               	movlw	72
  6291  001EAC                     u3877:
  6292  001EAC  2EE8               	decfsz	wreg,f,c
  6293  001EAE  D7FE               	bra	u3877
  6294  001EB0  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6295  001EB2  D7FC               	bra	u3877
  6296                           
  6297                           ;lcd.h: 88: data = 40; Lcd_Cmd(data);
  6298  001EB4  0E28               	movlw	40
  6299  001EB6  6E05               	movwf	Lcd_Init@data,c
  6300  001EB8  5005               	movf	Lcd_Init@data,w,c
  6301  001EBA  ECE0  F010         	call	_Lcd_Cmd
  6302                           
  6303                           ;lcd.h: 89: data = 16; Lcd_Cmd(data);
  6304  001EBE  0E10               	movlw	16
  6305  001EC0  6E05               	movwf	Lcd_Init@data,c
  6306  001EC2  5005               	movf	Lcd_Init@data,w,c
  6307  001EC4  ECE0  F010         	call	_Lcd_Cmd
  6308                           
  6309                           ;lcd.h: 90: data = 1; Lcd_Cmd(data);
  6310  001EC8  0E01               	movlw	1
  6311  001ECA  6E05               	movwf	Lcd_Init@data,c
  6312  001ECC  5005               	movf	Lcd_Init@data,w,c
  6313  001ECE  ECE0  F010         	call	_Lcd_Cmd
  6314                           
  6315                           ;lcd.h: 91: data = 15; Lcd_Cmd(data);
  6316  001ED2  0E0F               	movlw	15
  6317  001ED4  6E05               	movwf	Lcd_Init@data,c
  6318  001ED6  5005               	movf	Lcd_Init@data,w,c
  6319  001ED8  ECE0  F010         	call	_Lcd_Cmd
  6320  001EDC  0012               	return		;funcret
  6321  001EDE                     __end_of_Lcd_Init:
  6322                           	opt stack 0
  6323                           tblptru	equ	0xFF8
  6324                           tblptrh	equ	0xFF7
  6325                           tblptrl	equ	0xFF6
  6326                           tablat	equ	0xFF5
  6327                           prodh	equ	0xFF4
  6328                           prodl	equ	0xFF3
  6329                           indf0	equ	0xFEF
  6330                           fsr0h	equ	0xFEA
  6331                           fsr0l	equ	0xFE9
  6332                           wreg	equ	0xFE8
  6333                           indf2	equ	0xFDF
  6334                           postinc2	equ	0xFDE
  6335                           postdec2	equ	0xFDD
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function _Lcd_Cmd *****************
  6341 ;; Defined at:
  6342 ;;		line 151 in file "lcd.h"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  data            1    wreg     unsigned char 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  data            1    2[COMRAM] unsigned char 
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  1    wreg      void 
  6349 ;; Registers used:
  6350 ;;		wreg, status,2, status,0
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6356 ;;      Params:         0       0       0       0       0       0       0       0       0
  6357 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6358 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6359 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6360 ;;Total ram usage:        3 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; This function calls:
  6363 ;;		Nothing
  6364 ;; This function is called by:
  6365 ;;		_Lcd_Init
  6366 ;;		_Lcd_Out2
  6367 ;;		_main
  6368 ;;		_Lcd_Out
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           	psect	text25
  6373  0021C0                     __ptext25:
  6374                           	opt stack 0
  6375  0021C0                     _Lcd_Cmd:
  6376                           	opt stack 29
  6377                           
  6378                           ;incstack = 0
  6379                           ;Lcd_Cmd@data stored from wreg
  6380  0021C0  6E03               	movwf	Lcd_Cmd@data,c
  6381                           
  6382                           ;lcd.h: 152: RD3 = 0; RD2 = 0;
  6383  0021C2  9683               	bcf	3971,3,c	;volatile
  6384  0021C4  9483               	bcf	3971,2,c	;volatile
  6385                           
  6386                           ;lcd.h: 153: RD7 = (data & 0b10000000)>>7; RD6 = (data & 0b01000000)>>6;
  6387  0021C6  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  6388  0021C8  AE03               	btfss	Lcd_Cmd@data,7,c
  6389  0021CA  D001               	bra	u2335
  6390  0021CC  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  6391  0021CE                     u2335:
  6392  0021CE  3001               	rrcf	??_Lcd_Cmd,w,c
  6393  0021D0  A0D8               	btfss	status,0,c
  6394  0021D2  D002               	goto	u2340
  6395  0021D4  8E83               	bsf	3971,7,c	;volatile
  6396  0021D6  D001               	goto	u2355
  6397  0021D8                     u2340:
  6398  0021D8  9E83               	bcf	3971,7,c	;volatile
  6399  0021DA                     u2355:
  6400  0021DA  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6401  0021DE  0E06               	movlw	6
  6402  0021E0  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6403  0021E2                     u2365:
  6404  0021E2  90D8               	bcf	status,0,c
  6405  0021E4  3201               	rrcf	??_Lcd_Cmd,f,c
  6406  0021E6  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6407  0021E8  D7FC               	goto	u2365
  6408  0021EA  3001               	rrcf	??_Lcd_Cmd,w,c
  6409  0021EC  A0D8               	btfss	status,0,c
  6410  0021EE  D002               	goto	u2370
  6411  0021F0  8C83               	bsf	3971,6,c	;volatile
  6412  0021F2  D001               	goto	u2385
  6413  0021F4                     u2370:
  6414  0021F4  9C83               	bcf	3971,6,c	;volatile
  6415  0021F6                     u2385:
  6416                           
  6417                           ;lcd.h: 154: RD5 = (data & 0b00100000)>>5; RD4 = (data & 0b00010000)>>4;
  6418  0021F6  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6419  0021FA  0E05               	movlw	5
  6420  0021FC  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6421  0021FE                     u2395:
  6422  0021FE  90D8               	bcf	status,0,c
  6423  002200  3201               	rrcf	??_Lcd_Cmd,f,c
  6424  002202  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6425  002204  D7FC               	goto	u2395
  6426  002206  3001               	rrcf	??_Lcd_Cmd,w,c
  6427  002208  A0D8               	btfss	status,0,c
  6428  00220A  D002               	goto	u2400
  6429  00220C  8A83               	bsf	3971,5,c	;volatile
  6430  00220E  D001               	goto	u2415
  6431  002210                     u2400:
  6432  002210  9A83               	bcf	3971,5,c	;volatile
  6433  002212                     u2415:
  6434  002212  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6435  002216  3A01               	swapf	??_Lcd_Cmd,f,c
  6436  002218  0E0F               	movlw	15
  6437  00221A  1601               	andwf	??_Lcd_Cmd,f,c
  6438  00221C  3001               	rrcf	??_Lcd_Cmd,w,c
  6439  00221E  A0D8               	btfss	status,0,c
  6440  002220  D002               	goto	u2420
  6441  002222  8883               	bsf	3971,4,c	;volatile
  6442  002224  D001               	goto	l2186
  6443  002226                     u2420:
  6444  002226  9883               	bcf	3971,4,c	;volatile
  6445  002228                     l2186:
  6446                           
  6447                           ;lcd.h: 155: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6448  002228  0E06               	movlw	6
  6449  00222A                     u3887:
  6450  00222A  2EE8               	decfsz	wreg,f,c
  6451  00222C  D7FE               	bra	u3887
  6452  00222E  D000               	nop2	
  6453                           
  6454                           ;lcd.h: 156: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  6455  002230  8683               	bsf	3971,3,c	;volatile
  6456  002232  0E03               	movlw	3
  6457  002234                     u3897:
  6458  002234  2EE8               	decfsz	wreg,f,c
  6459  002236  D7FE               	bra	u3897
  6460  002238  F000               	nop	
  6461  00223A  9683               	bcf	3971,3,c	;volatile
  6462                           
  6463                           ;lcd.h: 157: RD7 = (data & 0b00001000)>>3; RD6 = (data & 0b00000100)>>2;
  6464  00223C  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6465  002240  90D8               	bcf	status,0,c
  6466  002242  3201               	rrcf	??_Lcd_Cmd,f,c
  6467  002244  90D8               	bcf	status,0,c
  6468  002246  3201               	rrcf	??_Lcd_Cmd,f,c
  6469  002248  90D8               	bcf	status,0,c
  6470  00224A  3201               	rrcf	??_Lcd_Cmd,f,c
  6471  00224C  3001               	rrcf	??_Lcd_Cmd,w,c
  6472  00224E  A0D8               	btfss	status,0,c
  6473  002250  D002               	goto	u2440
  6474  002252  8E83               	bsf	3971,7,c	;volatile
  6475  002254  D001               	goto	u2455
  6476  002256                     u2440:
  6477  002256  9E83               	bcf	3971,7,c	;volatile
  6478  002258                     u2455:
  6479  002258  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6480  00225C  90D8               	bcf	status,0,c
  6481  00225E  3201               	rrcf	??_Lcd_Cmd,f,c
  6482  002260  90D8               	bcf	status,0,c
  6483  002262  3201               	rrcf	??_Lcd_Cmd,f,c
  6484  002264  3001               	rrcf	??_Lcd_Cmd,w,c
  6485  002266  A0D8               	btfss	status,0,c
  6486  002268  D002               	goto	u2460
  6487  00226A  8C83               	bsf	3971,6,c	;volatile
  6488  00226C  D001               	goto	u2475
  6489  00226E                     u2460:
  6490  00226E  9C83               	bcf	3971,6,c	;volatile
  6491  002270                     u2475:
  6492                           
  6493                           ;lcd.h: 158: RD5 = (data & 0b00000010)>>1; RD4 = (data & 0b00000001);
  6494  002270  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6495  002274  90D8               	bcf	status,0,c
  6496  002276  3201               	rrcf	??_Lcd_Cmd,f,c
  6497  002278  3001               	rrcf	??_Lcd_Cmd,w,c
  6498  00227A  A0D8               	btfss	status,0,c
  6499  00227C  D002               	goto	u2480
  6500  00227E  8A83               	bsf	3971,5,c	;volatile
  6501  002280  D001               	goto	l2194
  6502  002282                     u2480:
  6503  002282  9A83               	bcf	3971,5,c	;volatile
  6504  002284                     l2194:
  6505  002284  A003               	btfss	Lcd_Cmd@data,0,c
  6506  002286  D002               	goto	u2500
  6507  002288  8883               	bsf	3971,4,c	;volatile
  6508  00228A  D001               	goto	l2196
  6509  00228C                     u2500:
  6510  00228C  9883               	bcf	3971,4,c	;volatile
  6511  00228E                     l2196:
  6512                           
  6513                           ;lcd.h: 159: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6514  00228E  0E06               	movlw	6
  6515  002290                     u3907:
  6516  002290  2EE8               	decfsz	wreg,f,c
  6517  002292  D7FE               	bra	u3907
  6518  002294  D000               	nop2	
  6519                           
  6520                           ;lcd.h: 160: RD3 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); RD3 = 0;
  6521  002296  8683               	bsf	3971,3,c	;volatile
  6522  002298  0E03               	movlw	3
  6523  00229A                     u3917:
  6524  00229A  2EE8               	decfsz	wreg,f,c
  6525  00229C  D7FE               	bra	u3917
  6526  00229E  F000               	nop	
  6527  0022A0  9683               	bcf	3971,3,c	;volatile
  6528                           
  6529                           ;lcd.h: 161: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6530  0022A2  0E0F               	movlw	15
  6531  0022A4  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  6532  0022A6  0E48               	movlw	72
  6533  0022A8                     u3927:
  6534  0022A8  2EE8               	decfsz	wreg,f,c
  6535  0022AA  D7FE               	bra	u3927
  6536  0022AC  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  6537  0022AE  D7FC               	bra	u3927
  6538  0022B0  0012               	return		;funcret
  6539  0022B2                     __end_of_Lcd_Cmd:
  6540                           	opt stack 0
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           indf0	equ	0xFEF
  6548                           fsr0h	equ	0xFEA
  6549                           fsr0l	equ	0xFE9
  6550                           wreg	equ	0xFE8
  6551                           indf2	equ	0xFDF
  6552                           postinc2	equ	0xFDE
  6553                           postdec2	equ	0xFDD
  6554                           fsr2h	equ	0xFDA
  6555                           fsr2l	equ	0xFD9
  6556                           status	equ	0xFD8
  6557                           tblptru	equ	0xFF8
  6558                           tblptrh	equ	0xFF7
  6559                           tblptrl	equ	0xFF6
  6560                           tablat	equ	0xFF5
  6561                           prodh	equ	0xFF4
  6562                           prodl	equ	0xFF3
  6563                           indf0	equ	0xFEF
  6564                           fsr0h	equ	0xFEA
  6565                           fsr0l	equ	0xFE9
  6566                           wreg	equ	0xFE8
  6567                           indf2	equ	0xFDF
  6568                           postinc2	equ	0xFDE
  6569                           postdec2	equ	0xFDD
  6570                           fsr2h	equ	0xFDA
  6571                           fsr2l	equ	0xFD9
  6572                           status	equ	0xFD8
  6573                           
  6574                           	psect	rparam
  6575  0000                     tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodh	equ	0xFF4
  6580                           prodl	equ	0xFF3
  6581                           indf0	equ	0xFEF
  6582                           fsr0h	equ	0xFEA
  6583                           fsr0l	equ	0xFE9
  6584                           wreg	equ	0xFE8
  6585                           indf2	equ	0xFDF
  6586                           postinc2	equ	0xFDE
  6587                           postdec2	equ	0xFDD
  6588                           fsr2h	equ	0xFDA
  6589                           fsr2l	equ	0xFD9
  6590                           status	equ	0xFD8


Data Sizes:
    Strings     30
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      78
    BANK0           160     48      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@temp(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[7]), STR_3(CODE[8]), STR_2(CODE[7]), main@temp(BANK0[20]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___awtoft->___ftpack
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0   53108
                                             76 COMRAM     2     2      0
                                             25 BANK0     23    23      0
                            _Lcd_Cmd
                           _Lcd_Init
                           _Lcd_Out2
                           ___awtoft
                             ___ftge
                            ___ftmul
                             _getCad
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   43997
                                             63 COMRAM    13     6      7
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10398
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10200
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4418
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                             _getCad (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2203
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3565
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3268
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     776
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _getCad                                               3     1      2      22
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2225
                                              8 COMRAM     4     1      3
                           ___ftpack
                             _getCad (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2070
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     2      3    1045
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   ___awtoft
     ___ftpack
     _getCad (ARG)
   ___ftge
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
       _getCad (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _getCad (ARG)
   _getCad
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             _getCad (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _getCad (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         _getCad (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _getCad (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               _getCad (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _getCad (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           _getCad (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _getCad (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             _getCad (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _getCad (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           _getCad (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _getCad (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           _getCad (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _getCad (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     4E      4E       1       82.1%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     30      30       5       30.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Oct 11 13:41:04 2021

                     l75 1E3C                       l76 1E7A             ___awdiv@sign 000C  
            __CFG_BOR$ON 000000      ___wmul@multiplicand 0011              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000             ___ftadd@exp1 0039             ___ftadd@exp2 0038  
            __CFG_LVP$ON 000000             ___ftadd@sign 0037                      l121 1B46  
                    l123 1B66                      l213 0F08                      l502 18BE  
                    l506 18E8                      l517 1998                      l526 19B4  
                    l447 1DB2                      l551 1C8A                      l544 1BFC  
                    l545 1C24                      l626 2574                      l636 264A  
                    l479 2340                      l576 2792             __CFG_CPB$OFF 000000  
                    _RA2 007C02                      _RC0 007C10                      _RD2 007C1A  
                    _RE0 007C20                      _RD3 007C1B                      _RE1 007C21  
                    _RD4 007C1C                      _RE2 007C22                      _RD5 007C1D  
                    _RD6 007C1E                      _RD7 007C1F             __CFG_CPD$OFF 000000  
           ___awmod@sign 0006                      wreg 000FE8              _sprintf$712 0060  
           __CFG_WDT$OFF 000000                     l2020 1948                     l2022 1952  
                   l2014 1926                     l2110 2494                     l2040 19D0  
                   l2032 1986                     l2024 195C                     l2210 1F46  
                   l2050 1A00                     l2034 1990                     l2026 1964  
                   l2122 24BA                     l2220 1FAC                     l2124 24C2  
                   l2116 24A4                     l2060 2000                     l2300 27B6  
                   l2310 1B96                     l2142 24FA                     l2134 24E2  
                   l2126 24C6                     l2080 205A                     l2218 1FA2  
                   l2410 1D88                     l2138 24EC                     l2170 25D4  
                   l2162 25B4                     l2154 259A                     l2090 2082  
                   l2066 2028                     l2250 183A                     l2242 177A  
                   l2316 1BC2                     l2164 25BC                     l2084 206A  
                   l2502 2526                     l2406 1D78                     l2350 1C60  
                   l2166 25C0                     l2174 25DE                     l2158 25A6  
                   l2094 2092                     l2270 141C                     l2432 2390  
                   l2424 26CE                     l2504 2532                     l2416 1DA0  
                   l2264 1378                     l2194 2284                     l2186 2228  
                   l2602 23F4                     l2442 23EC                     l2514 2566  
                   l2506 2536                     l2530 263C                     l2522 2608  
                   l2418 1DAC                     l2346 1C50                     l2178 25EC  
                   l2282 156C                     l2274 1440                     l2196 228E  
                   l2620 2458                     l2604 23FA                     l2612 240E  
                   l2436 23C0                     l2524 2614                     l2372 1CD8  
                   l2356 1C78                     l2700 0A66                     l2550 1E34  
                   l2606 2400                     l2614 2428                     l2630 276C  
                   l2526 2618                     l2366 1CBA                     l2358 1C84  
                   l2616 2430                     l2608 2406                     l2624 275E  
                   l2456 20F8                     l2536 2662                     l2288 1610  
                   l2474 215E                     l2538 266E                     l2394 1D4A  
                   l2386 1D1A                     l2810 0ED6                     l2802 0EB0  
                   l2730 0BAC                     l2642 08A6                     l2628 2764  
                   l2492 21AE                     l2484 2186                     l2812 0EEA  
                   l2804 0EBE                     l2740 0C34                     l2732 0BDC  
                   l2724 0B70                     l2716 0B08                     l1950 22D0  
                   l2910 270C                     l2486 2192                     l2478 216E  
                   l2734 0BF2                     l2654 08F2                     l2662 0952  
                   l1960 232C                     l1952 22DA                     l2488 2198  
                   l2840 107E                     l2824 0F3A                     l2816 0F0C  
                   l2760 0D24                     l2744 0C5A                     l2728 0B96  
                   l2672 09B2                     l2648 08C0                     l1962 2336  
                   l1954 22F8                     l1946 22C2                     l2754 0CB8  
                   l2690 0A20                     l2682 09DE                     l2674 09C8  
                   l2828 0F8C                     l2780 0DC6                     l2772 0D6A  
                   l2684 0A06                     l2668 0978                     l1958 230E  
                   l2862 111A                     l2854 10CA                     l2846 1096  
                   l2838 1070                     l2758 0D1E                     l2678 09D8  
                   l1992 18CC                     l2880 11B8                     l2792 0E16  
                   l2784 0DD6                     l2776 0DAC                     l2848 10A4  
                   l2890 11F2                     l2882 11C2                     l2874 117A  
                   l2858 10EE                     l2794 0E1C                     l2786 0DDE  
                   l2970 1B5E                     l2962 1B0C                     l2884 11CE  
                   l2876 1184                     l2868 1146                     l2788 0DF2  
                   l2948 1A4E                     l1998 18F6                     l2894 1216  
                   l2896 121A                     l2898 1236                     _ADON 007E10  
                   STR_1 0877                     STR_2 088E                     STR_3 087F  
                   STR_4 0887                     u3011 20DC                     u3030 2116  
                   u2151 1FE8                     u2400 2210                     u3035 210E  
                   u2171 2010                     u2500 228C                     u2420 2226  
                   u2340 21D8                     u3300 0AA6                     u2415 2212  
                   u2335 21CE                     u2440 2256                     u3305 0A9C  
                   u2370 21F4                     u2610 1F44                     u2530 1EF6  
                   u2355 21DA                     u2460 226E                     u3180 2450  
                   u2365 21E2                     u2605 1F30                     u2525 1EEC  
                   u2630 1F74                     u3190 2478                     u2455 2258  
                   u2480 2282                     u2560 1F12                     u2385 21F6  
                   u2545 1EF8                     u2801 1B7A                     u2650 1F8C  
                   u2475 2270                     u2395 21FE                     u2555 1F00  
                   u3187 2446                     u2645 1F76                     u3197 246E  
                   u1941 188A                     u2821 1BA6                     u2670 1FA0  
                   u2590 1F2E                     u2575 1F14                     u1951 189E  
                   u2665 1F8E                     u2585 1F1C                     u2690 1FAA  
                   u3490 0F00                     u3717 1AC4                     u3807 1DFE  
                   u3727 1F48                     u3817 1E0C                     u3737 1F52  
                   u3907 2290                     u3827 1E1A                     u3747 1FAE  
                   u3917 229A                     u3837 1E28                     u3757 1FB8  
                   u3927 22A8                     u3847 1E56                     u3767 1FC2  
                   u3857 1E6E                     u3777 1FCE                     u3867 1E94  
                   u3787 1DE2                     u3877 1EAC                     u3797 1DF0  
                   u3887 222A                     u3897 2234                     _main 1A26  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr0h 000FEA  
                   indf0 000FEF                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
        __end_of_Lcd_Cmd 22B2            __CFG_MCLRE$ON 000000             ___ftmul@cntr 0022  
           ___param_bank 000000             ___ftmul@sign 0023               _Lcd_Chr_CP 1EDE  
           ___fttol@exp1 0039             ___fttol@lval 0035           Lcd_Out2@buffer 0005  
          __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
        __end_of___awdiv 2504          __end_of___ftadd 1A26          __end_of___awmod 25F6  
        __end_of___ftneg 27A0          __end_of___lldiv 2586          __end_of___ftmul 20CC  
        ___awdiv@divisor 0009          __end_of___llmod 265C          __end_of___ftsub 26F8  
        __end_of___fttol 21C0          ___awdiv@counter 000B            __CFG_USBDIV$1 000000  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000             ___lltoft@exp 0011  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
          ___awtoft@sign 000C          __end_of_dpowers 0829                    _scale 1244  
        __end_of_isdigit 27BE            ___ftpack@sign 0005                    tablat 000FF5  
                  status 000FD8          __end_of_sprintf 1244           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000         __end_of_Lcd_Init 1EDE         __end_of_Lcd_Out2 2480  
        __initialization 27BE             __end_of_main 1B6A                   ??_main 004D  
          ___fttol@sign1 0034            __activetblptr 000002     __size_of__tdiv_to_l_ 0132  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
       ___llmod@dividend 0001                   ?_scale 0024                   _ADRESH 000FC4  
       ___awdiv@dividend 0007         __end_of___awtoft 2730         __end_of___ftpack 2360  
       __end_of___lltoft 26B8                   _OSCCON 000FD3                ??_Lcd_Cmd 0001  
                 _TRISA2 007C92                   _TRISC0 007CA0                   _TRISD2 007CAA  
                 _TRISE0 007CB0                   _TRISD3 007CAB                   _TRISE1 007CB1  
                 _TRISD4 007CAC                   _TRISE2 007CB2                   _TRISD5 007CAD  
                 _TRISD6 007CAE                   _TRISD7 007CAF           __CFG_XINST$OFF 000000  
       __end_of__powers_ 0850                   ___ftge 2360              ?_Lcd_Chr_CP 0001  
                 ___wmul 2730                ??___awdiv 000B                ??___ftadd 0034  
         __CFG_STVREN$ON 000000                ??___awmod 0005                ??___ftneg 0004  
                 _getCad 2756                ??___lldiv 0009                ??___ftmul 001B  
              ??___llmod 0009                ??___ftsub 0040                ??___fttol 002F  
                 _fround 1634         ___awdiv@quotient 000D          ___awmod@divisor 0003  
        ___awmod@counter 0005    ___ftmul@f3_as_product 001F                ??_isdigit 0001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_sprintf 0047               __accesstop 0060  
__end_of__initialization 27BE               ___ftadd@f1 002E               ___ftadd@f2 0031  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
             ___ftneg@f1 0001               ___awtoft@c 0009               ___ftmul@f1 0015  
             ___ftmul@f2 0018               ___ftsub@f1 003A               ___ftsub@f2 003D  
             ___fttol@f1 002B           __pcstackCOMRAM 0001               ___lltoft@c 0009  
          __end_of_scale 1634               __div_to_l_ 1C9C                ?_Lcd_Init 0001  
              ?_Lcd_Out2 0004          __div_to_l_@exp1 000C          __div_to_l_@cntr 000B  
                ??_scale 0027          __div_to_l_@quot 0007             sprintf@width 006B  
    __size_of_Lcd_Chr_CP 00FA            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
                ?___ftge 0001                  ?___wmul 000F                  ?_getCad 0001  
                ?_fround 0024                ?___awtoft 0009                ?___ftpack 0001  
              ?___lltoft 0009                  _GO_DONE 007E11               ??_Lcd_Init 0004  
             ??_Lcd_Out2 0007          __CFG_VREGEN$OFF 000000                  _Lcd_Cmd 21C0  
      __end_of__npowers_ 0877                  __Hparam 0000                  __Lparam 0000  
        __size_of___ftge 0090                  ___awdiv 2480                  ___ftadd 187A  
                ___awmod 2586                  ___ftneg 277C                  ___lldiv 2504  
        __size_of___wmul 0026                  ___ftmul 1FD8                  ___llmod 25F6  
                ___ftsub 26B8                  ___fttol 20CC               _fround$710 0027  
             _fround$709 002A          __size_of_getCad 0026             __psmallconst 0800  
                __pcinit 27BE               ??___awtoft 000C               ??___ftpack 0006  
        __size_of_fround 0246                  __ramtop 0800               ??___lltoft 000D  
                __ptext0 1A26                  __ptext1 0896                  __ptext2 1244  
                __ptext3 27A0                  __ptext4 1634                  __ptext5 2730  
                __ptext6 1FD8                  __ptext7 2586                  __ptext8 2480  
                __ptext9 1B6A              ?__div_to_l_ 0001                  _dpowers 0801  
                _isdigit 27A0         ___awmod@dividend 0001                  _sprintf 0896  
   end_of_initialization 27BE            __Lmediumconst 0000          ___lldiv@divisor 0005  
        ___lldiv@counter 000D             ??_Lcd_Chr_CP 0001                Lcd_Out2@x 0004  
              Lcd_Out2@y 0007                  postdec2 000FDD                  postinc2 000FDE  
         __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004            ??__tdiv_to_l_ 0007  
     __end_of_Lcd_Chr_CP 1FD8      __size_of__div_to_l_ 0128              ___ftmul@exp 001E  
         __end_of___ftge 23F0           __end_of___wmul 2756           __end_of_getCad 277C  
         __end_of_fround 187A      start_initialization 27BE      __end_of__tdiv_to_l_ 1C9C  
      __size_of_Lcd_Init 011A        __size_of_Lcd_Out2 0090          ___llmod@divisor 0005  
        ___llmod@counter 0009                 ??___ftge 0007                 ??___wmul 0013  
               ??_getCad 0003         __CFG_LPT1OSC$OFF 000000                 ??_fround 0027  
          sprintf@tmpval 006D               fround@prec 002D        __size_of___awtoft 0038  
      __size_of___ftpack 00AE        __size_of___lltoft 005C            __pcstackBANK0 0060  
               ?_Lcd_Cmd 0001              sprintf@flag 0069              sprintf@fval 0073  
            sprintf@prec 0076                 ?___awdiv 0007                 ?___ftadd 002E  
               ?___awmod 0001                 ?___ftneg 0001                 ?___lldiv 0001  
               ?___ftmul 0015                 ?___llmod 0001                 ?___ftsub 003A  
              __npowers_ 0850                 ?___fttol 002B              __tdiv_to_l_ 1B6A  
           ??__div_to_l_ 0007              __smallconst 0800                 ?_isdigit 0001  
              _scale$711 0027                 ?_sprintf 0040           __size_of_scale 03F0  
         ___wmul@product 0013       __end_of__div_to_l_ 1DC4         __CFG_WDTPS$32768 000000  
           Lcd_Init@data 0005        ___wmul@multiplier 000F             Lcd_Out2@data 0008  
               _Lcd_Init 1DC4                 _Lcd_Out2 23F0         __size_of_Lcd_Cmd 00F2  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0084  
       __size_of___ftadd 01AC         __size_of___awmod 0070         __size_of___ftneg 0024  
       __size_of___lldiv 0082         __size_of___ftmul 00F4         __size_of___llmod 0066  
       __size_of___ftsub 0040         __size_of___fttol 00F4                 ___awtoft 26F8  
               ___ftpack 22B2                 ___lltoft 265C              _isdigit$383 0002  
             sprintf@exp 0071               sprintf@val 0065         __size_of_isdigit 001E  
         Lcd_Chr_CP@data 0003                 __ptext10 1C9C                 __ptext11 265C  
               __ptext20 26F8                 __ptext12 25F6                 __ptext21 22B2  
               __ptext13 2504                 __ptext22 23F0                 __ptext14 20CC  
               __ptext23 1EDE                 __ptext15 26B8                 __ptext24 1DC4  
               __ptext16 187A                 __ptext25 21C0                 __ptext17 277C  
               __ptext18 2360                 __ptext19 2756                 __powers_ 0829  
       __size_of_sprintf 09AE              Lcd_Cmd@data 0003            __size_of_main 0144  
            getCad@canal 0003                 main@temp 0079    __CFG_CPUDIV$OSC1_PLL2 000000  
        main@temperatura 008D                 isdigit@c 0003                 scale@scl 002A  
              sprintf@ap 0063         __tdiv_to_l_@exp1 000F                sprintf@sp 0040  
       __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001  
           ?__tdiv_to_l_ 0001                 sprintf@c 0078                 sprintf@f 0042  
       ___lldiv@quotient 0009  
